Our bottom-up deterministic parser adopts Nivre's algorithm (Nivre, 2004) with a preprocessor. $$$$$ Incrementality In Deterministic Dependency Parsing
Our bottom-up deterministic parser adopts Nivre's algorithm (Nivre, 2004) with a preprocessor. $$$$$ We then analyze the algorithm proposed in Nivre (2003) and show that, given the previous result, this algorithm is optimal from the point of view of incrementality.

The parser is a bottom-up deterministic dependency parser based on the algorithm proposed by (Nivre, 2004). $$$$$ Incrementality In Deterministic Dependency Parsing
The parser is a bottom-up deterministic dependency parser based on the algorithm proposed by (Nivre, 2004). $$$$$ We then analyze the algorithm proposed in Nivre (2003) and show that, given the previous result, this algorithm is optimal from the point of view of incrementality.

The main part of our dependency parser is based on Nivre' s algorithm (Nivre, 2004), in which the dependency relations are constructed by a bottom up deterministic schema. $$$$$ Incrementality In Deterministic Dependency Parsing
The main part of our dependency parser is based on Nivre' s algorithm (Nivre, 2004), in which the dependency relations are constructed by a bottom up deterministic schema. $$$$$ However, since there are no nonterminal symbols involved in dependency parsing, we also need to maintain a representation of the dependency graph being constructed during processing.

If we consider transition-based dependency parsing (Nivre, 2008), the purely bottom-up strategy is implemented by the arc-standard model of Nivre (2004). $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
If we consider transition-based dependency parsing (Nivre, 2008), the purely bottom-up strategy is implemented by the arc-standard model of Nivre (2004). $$$$$ Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.

Nivre (2004) investigated the issue of (strict ) incrementality for this type of parsers ;i.e., if at any point of the analysis the processed input forms one connected structure. $$$$$ By contrast, parsers that only partially disambiguate the input — partial parsing — are usually deterministic and construct the final analysis in one pass over the input (Abney, 1991; Daelemans et al., 1999).
Nivre (2004) investigated the issue of (strict ) incrementality for this type of parsers ;i.e., if at any point of the analysis the processed input forms one connected structure. $$$$$ In the strictest sense, we take incrementality to mean that, at any point during the parsing process, there is a single connected structure representing the analysis of the input consumed so far.

Incrementality is not strict here in the sense of (Nivre, 2004), because sometimes more than one word is needed before parts of the frame are constructed and out put: into the right, for instance, needs to wait for a word like leg that completes the chunk. $$$$$ In a dependency structure, every word token is dependent on at most one other word token, usually called its head or regent, which means that the structure can be represented as a directed graph, with nodes representing word tokens and arcs representing dependency relations.
Incrementality is not strict here in the sense of (Nivre, 2004), because sometimes more than one word is needed before parts of the frame are constructed and out put: into the right, for instance, needs to wait for a word like leg that completes the chunk. $$$$$ It seems fair to conclude that, although strict word-by-word incrementality is not possible in deterministic dependency parsing, the arc-eager algorithm can in practice be seen as a close approximation of incremental parsing.

The semantics of this transition system is described in (Nivre,2004). $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
The semantics of this transition system is described in (Nivre,2004). $$$$$ Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.

When restricted to these three transitions, the system is equivalent to the so-called stack-based arc-standard model of Nivre (2004). $$$$$ When restricted to sentences that are accepted by the parser, the degree of incrementality increases to 87.9%.
When restricted to these three transitions, the system is equivalent to the so-called stack-based arc-standard model of Nivre (2004). $$$$$ Using the same representation of parser configurations as before, the arc-eager algorithm can be defined by the transitions given in Figure 5, where wi and wj are arbitrary word tokens (Nivre, 2003): the stack to the next input token wj, and pushes wj onto the stack.

This idea has been applied to constituency parsing, for example in Sagae and Lavie (2006), and we describe below a simple variant for dependency parsing similar to Yamada and Matsumoto (2003) and the arc-standard version of Nivre (2004). $$$$$ Deterministic dependency parsing has recently been proposed as a robust and efficient method for syntactic parsing of unrestricted natural language text (Yamada and Matsumoto, 2003; Nivre, 2003).
This idea has been applied to constituency parsing, for example in Sagae and Lavie (2006), and we describe below a simple variant for dependency parsing similar to Yamada and Matsumoto (2003) and the arc-standard version of Nivre (2004). $$$$$ Since deterministic dependency parsing has previously been shown to be competitive in terms of parsing accuracy (Yamada and Matsumoto, 2003; Nivre et al., 2004), we believe that this is a promising approach for situations that require parsing to be robust, efficient and (almost) incremental.

The MaltParser is a dependency parser generator, with three parsing algorithms: Nivre's arc standard, Nivre's arc eager (see Nivre (2004) for a comparison between the two Nivre algorithms), and Covington's (Covington, 2001). $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
The MaltParser is a dependency parser generator, with three parsing algorithms: Nivre's arc standard, Nivre's arc eager (see Nivre (2004) for a comparison between the two Nivre algorithms), and Covington's (Covington, 2001). $$$$$ Hence, in terms of what drives the parsing process, all algorithms discussed here correspond to bottom-up algorithms in context-free parsing.

The parsing algorithm is the arc-standard method (Nivre, 2004), which is briefly described in Section 2. $$$$$ Following Abney and Johnson (1991), we will call this arc-eager parsing, to distinguish it from the standard bottom-up strategy discussed in the previous section.
The parsing algorithm is the arc-standard method (Nivre, 2004), which is briefly described in Section 2. $$$$$ Defining incrementality is less straightforward for the arc-eager algorithm than for the standard bottom-up algorithm.

These features are found to have high overall accuracy in the Nivre parser (Nivre, 2004) and in human sentence processing modeling (Boston et al, 2008) . $$$$$ In experiments reported in Nivre et al. (2004), a parsing accuracy of 85.7% (unlabeled attachment score) was achieved, using data from a small treebank of Swedish (Einarsson, 1976), divided into a training set of 5054 sentences and a test set of 631 sentences.
These features are found to have high overall accuracy in the Nivre parser (Nivre, 2004) and in human sentence processing modeling (Boston et al, 2008) . $$$$$ Since deterministic dependency parsing has previously been shown to be competitive in terms of parsing accuracy (Yamada and Matsumoto, 2003; Nivre et al., 2004), we believe that this is a promising approach for situations that require parsing to be robust, efficient and (almost) incremental.

In this paper, we propose a model based on Arc-Standard Transition System of Nivre (2004), which is known as an incremental greedy projective parsing model that parses sentences in linear time. $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
In this paper, we propose a model based on Arc-Standard Transition System of Nivre (2004), which is known as an incremental greedy projective parsing model that parses sentences in linear time. $$$$$ In this paper, we have analyzed the potential for incremental processing in deterministic dependency parsing.

Actions in Arc-Standard Transition System (Nivre, 2004) clues to unsupervised parsing. $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
Actions in Arc-Standard Transition System (Nivre, 2004) clues to unsupervised parsing. $$$$$ Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.

We implement three transition-based dependency parsers with three different parsing algorithms: Nivre's arc standard, Nivre's arc eager (see Nivre (2004) for a comparison between the two Nivre algorithms), and Liang's dynamic algorithm (Huang and Sagae, 2010). $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
We implement three transition-based dependency parsers with three different parsing algorithms: Nivre's arc standard, Nivre's arc eager (see Nivre (2004) for a comparison between the two Nivre algorithms), and Liang's dynamic algorithm (Huang and Sagae, 2010). $$$$$ Hence, in terms of what drives the parsing process, all algorithms discussed here correspond to bottom-up algorithms in context-free parsing.

In this respect such a model is very restrictive and suffers from the pitfalls of the incremental processing (Nivre, 2004). $$$$$ In this paper, we have analyzed the potential for incremental processing in deterministic dependency parsing.
In this respect such a model is very restrictive and suffers from the pitfalls of the incremental processing (Nivre, 2004). $$$$$ Moreover, we have shown that in practical parsing, the algorithm performs incremental processing for the majority of input structures.

This is in line with the Arc-Standard parsing strategy of shift-reduce dependency parsers (Nivre, 2004). $$$$$ In order to understand the constraints on incrementality in dependency parsing, we will begin by considering the most straightforward parsing strategy, i.e. left-to-right bottom-up parsing, which in this case is essentially equivalent to shift-reduce parsing with a context-free grammar in Chomsky normal form.
This is in line with the Arc-Standard parsing strategy of shift-reduce dependency parsers (Nivre, 2004). $$$$$ Following Abney and Johnson (1991), we will call this arc-eager parsing, to distinguish it from the standard bottom-up strategy discussed in the previous section.

There are other transition-based dependency parsing algorithms that take a similar approach; Nivre (2009) integrated a SWAP transition into Nivre's arc-standard algorithm (Nivre, 2004) and Fernandez Gonzalez and Gomez-Rodriguez (2012) integrated a buffer transition into Nivre's arc-eager algorithm to handle non-projectivity. $$$$$ Comparing the two algorithms, we see that the Left-Arc transition of the arc-eager algorithm corresponds directly to the Left-Reduce transition of the standard bottom-up algorithm.
There are other transition-based dependency parsing algorithms that take a similar approach; Nivre (2009) integrated a SWAP transition into Nivre's arc-standard algorithm (Nivre, 2004) and Fernandez Gonzalez and Gomez-Rodriguez (2012) integrated a buffer transition into Nivre's arc-eager algorithm to handle non-projectivity. $$$$$ Thus, we can say that the action performed by the Right-Reduce transition in the standard bottom-up algorithm is performed by a Right-Arc transition in combination with a subsequent Reduce transition in the arc-eager algorithm.
