 $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
 $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.

These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ REALPRO is really a realizer shell, which allows for a (run-time) configuration using specially formatted Linguistic Knowledge Bases (LKBs) which state grammar rules, lexical entries, and feature defaults.
These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ For example if in his/her application all sentences must be in past tense, the user can set the default tense to be past rather than present as follows: The English grammar currently covers a wide range of syntactic phenomena: Most of these points are illustrated by the input in Figure 2.

We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ A Fast And Portable Realizer For Text Generation Systems
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ The input to REALPRO is a syntactic dependency structure.

 $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
 $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.

In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ REALPRO has the following characteristics, which we believe are unique in this combination: We reserve a more detailed comparison with PENMAN and FUF, as well as with AlethGen/GL (Coch, 1996) (which is perhaps the system most similar to REALPRO, since they are based on the same linguistic theory and are both implemented with speed in mind), for a more extensive paper.
In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).

We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ The input to REALPRO is a syntactic dependency structure.
We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ We conclude that the uniformity of the syntactic constructions found in the sentences used in the above test sequence does not influence the results.

Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ The input to REALPRO is a syntactic dependency structure.
Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.

Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation.
Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).

In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.
In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ The average runtime for this input is 0.31 seconds, which is comparable to the runtime reported above for the 20 word sentence.

It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ In REALPRO, each transformation is handled by a separate module.

As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular.
As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation.

 $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
 $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.

Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research.
Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ In this technical note and demo we present a new off-theshelf realizer, REALPRO.

The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ Furthermore, there is no non-determinism in REALPRO: the input to REALPRO fully determines the output, though the input is a very abstract linguistic representation which is well suited for interfacing with knowledge-based applications.
The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ This means that REALPRO gives the developer control over the output, while taking care of the linguistic details.

Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994).
Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ Furthermore, there is no non-determinism in REALPRO: the input to REALPRO fully determines the output, though the input is a very abstract linguistic representation which is well suited for interfacing with knowledge-based applications.

The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ A Fast And Portable Realizer For Text Generation Systems
The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.

The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ A Fast And Portable Realizer For Text Generation Systems
The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994).

The surface realization process is performed by RealPro (Lavoie and Rambow (1997)). $$$$$ Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research.
The surface realization process is performed by RealPro (Lavoie and Rambow (1997)). $$$$$ The complexity of the generation algorithm derives primarily from the tree traversals which must be performed twice, when passing from DSyntS to SSyntS, and from SSyntS to the DMorphS.

Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular.
Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ REALPRO has the following characteristics, which we believe are unique in this combination: We reserve a more detailed comparison with PENMAN and FUF, as well as with AlethGen/GL (Coch, 1996) (which is perhaps the system most similar to REALPRO, since they are based on the same linguistic theory and are both implemented with speed in mind), for a more extensive paper.

Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ The following ASCII-based specification corresponds to the DSyntS of sentence (2): In this definition, parentheses () are used to specify the scope of dependency while square brackets [] are used to specify features associated with a lexeme.
Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ In addition, REALPRO can also output an ASCII representation of the DGraphS that a user application can format in application-specific ways.
