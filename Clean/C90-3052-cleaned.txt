As mentioned in (Emele and Zajac, 1990), the proposed approach inevitably leads to the consequence that the data structure becomes slightly complicated. $$$$$ 2 Typed t~ature s t ructures  and unif ication Tlle basic data structure of tile language is a typed featme structure: a feature structure (FS in the fol- lowing) with which a type can be associated.
As mentioned in (Emele and Zajac, 1990), the proposed approach inevitably leads to the consequence that the data structure becomes slightly complicated. $$$$$ [6] Martin C. Emele: "A Typed Feature Structure Unification-based Approach to Generation" in: Proceedings of the WGNLC of the [ECE 1988, (Japan: Oiso University) 1989.

 $$$$$ LEXICAL_CATEGORY : DET V N V PN V V. DET : ALL V EVERY V A V THE.
 $$$$$ ", in: Proceedings of the 27th Annual Meeting of the A CL-89 (Vancouver, Canada) 1989.

Implementations of sorted feature formalisms such as TDL (Krieger and Schifer, 1994), ALE (Carpenter, 1993), CUF (DSrre and Dorna, 1993), TFS (Emele and Zajac, 1990) and others have been used successfully for the development and testing of large grammars and lexicons, but they may be too slow for actual use in applications 180 because they are generally built on top of Prolog or LISP, and can therefore not be as efficient as the built-in unification of Prolog. $$$$$ Typed Unification Grammars Martin C. Emele, Dhni Zajac Project Polygloss* University of Stuttgart IMS~CL/Ifl~AIS, Keplerstrage 17, D - 7000 Stuttgart 1, Federal Republic of Germany {emele,zajac} @is.informatik.uni-st ut gart.dbp.de Abstract We introduce TFS, a computer formal- ism in the class of logic ibrmaiisms which integrates a powerful type system.
Implementations of sorted feature formalisms such as TDL (Krieger and Schifer, 1994), ALE (Carpenter, 1993), CUF (DSrre and Dorna, 1993), TFS (Emele and Zajac, 1990) and others have been used successfully for the development and testing of large grammars and lexicons, but they may be too slow for actual use in applications 180 because they are generally built on top of Prolog or LISP, and can therefore not be as efficient as the built-in unification of Prolog. $$$$$ 3.2 The APPEND type as a relation One can also understand feature types as relations much like those in PROLOG.

A more radical approach however rooted in the traditional model is to fully map the typed unification grammars [Emele and Zajac, 1990 on the SNAP. $$$$$ Typed Unification Grammars Martin C. Emele, Dhni Zajac Project Polygloss* University of Stuttgart IMS~CL/Ifl~AIS, Keplerstrage 17, D - 7000 Stuttgart 1, Federal Republic of Germany {emele,zajac} @is.informatik.uni-st ut gart.dbp.de Abstract We introduce TFS, a computer formal- ism in the class of logic ibrmaiisms which integrates a powerful type system.
A more radical approach however rooted in the traditional model is to fully map the typed unification grammars [Emele and Zajac, 1990 on the SNAP. $$$$$ [18] R4mi Zajac: "A Transfer Model Using a Typed Feature Structure Rewriting System with In- heritance.

 $$$$$ LEXICAL_CATEGORY : DET V N V PN V V. DET : ALL V EVERY V A V THE.
 $$$$$ ", in: Proceedings of the 27th Annual Meeting of the A CL-89 (Vancouver, Canada) 1989.

This gives the possibility to define more general relations, and in particular functions can be defined in a way similar to, for example, (Johnson and Rosner, 1989) and (Emele and Zajac, 1990). $$$$$ Unification of two types X and Y is defined .
This gives the possibility to define more general relations, and in particular functions can be defined in a way similar to, for example, (Johnson and Rosner, 1989) and (Emele and Zajac, 1990). $$$$$ This possibility (together with the fact.

In this way the user can create an inheritance hierarchy which is similar but not identical to how inheritance is used in other formalisms uch as TFS (Emele and Zajac, 1990) or ALE (Carpenter, 1992). $$$$$ Abstraction and modular- ity are needed when the linguist wants to describe a hierarchy of concepts (like a lexical hierarchy or the hierarchy of phrasal categories), and to describe linguistic data at different levels (e.g.
In this way the user can create an inheritance hierarchy which is similar but not identical to how inheritance is used in other formalisms uch as TFS (Emele and Zajac, 1990) or ALE (Carpenter, 1992). $$$$$ 6 Conelus ion Ihe main characteristics of the formalism we pre-- s(.nted are (1, type inheritance which provides a clean way of itetining classes and subclasses of ob-.
