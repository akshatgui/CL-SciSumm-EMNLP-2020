The time needed for tree kernel function was not so problematic as we could use the fast evaluation proposed in (Moschitti, 2006). $$$$$ For this purpose, we slightly modified the kernel function proposed in (Collins and Duffy, 2002) by introducing a parameter σ which enables the ST or the SST evaluation.
The time needed for tree kernel function was not so problematic as we could use the fast evaluation proposed in (Moschitti, 2006). $$$$$ The above results are quite interesting because they show that (1) we can use tree kernels with SVMs on huge training sets, e.g. on 122,774 instances and (2) the time needed to converge is approximately the one required by SVMs when using polynomial kernel.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

SVMLight (Joachims,1999), in the SVMLight/TK (Moschitti, 2006) variant, allows to use tree-valued features. $$$$$ Given a syntactic tree we can use as feature representation the set of all its STs or SSTs.
SVMLight (Joachims,1999), in the SVMLight/TK (Moschitti, 2006) variant, allows to use tree-valued features. $$$$$ The classifier evaluations were carried out with the SVM-light-TK software available at http://ai-nlp.info.uniroma2.it/moschitti/ which encodes ST and SST kernels in the SVMlight software (Joachims, 1999).

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

The algorithm for the efficient evaluation of ? for the syntactic tree kernel (STK) has been widely discussed in (Collins and Duffy, 2002) whereas its fast evaluation is proposed in (Moschitti, 2006b), so we only describe the equations of the partial tree kernel (PTK). $$$$$ For this purpose, we slightly modified the kernel function proposed in (Collins and Duffy, 2002) by introducing a parameter σ which enables the ST or the SST evaluation.
The algorithm for the efficient evaluation of ? for the syntactic tree kernel (STK) has been widely discussed in (Collins and Duffy, 2002) whereas its fast evaluation is proposed in (Moschitti, 2006b), so we only describe the equations of the partial tree kernel (PTK). $$$$$ In this section we compare our Fast Tree Kernel (FTK) approach with the Quadratic Tree Kernel (QTK) algorithm.

PTFs have been defined in (Moschitti, 2006a). $$$$$ To compute the kernels defined in the previous section, we sum the A function for each pair (n1,n2)E NT1 x NT2 (Eq.
PTFs have been defined in (Moschitti, 2006a). $$$$$ We used the default linear (Linear) and polynomial (Poly) kernels for the evaluations with the standard features defined in (Gildea and Jurafsky, 2002).

Miwa et al (2009a) proposed a hybrid kernel, which combines the all-paths graph (APG) kernel (Airola et al 2008), the bag-of-words kernel, and the subset tree kernel (Moschitti, 2006) (applied on the shortest dependency paths between target protein pairs). $$$$$ (Pradhan et al., 2004).
Miwa et al (2009a) proposed a hybrid kernel, which combines the all-paths graph (APG) kernel (Airola et al 2008), the bag-of-words kernel, and the subset tree kernel (Moschitti, 2006) (applied on the shortest dependency paths between target protein pairs). $$$$$ In (Shen et al., 2003), a tree-kernel based on Lexicalized Tree Adjoining Grammar (LTAG) for the parse-reranking task was proposed.

The function can be computed recursively in closed form, and quite efficient implementations are available (Moschitti, 2006). $$$$$ By recursively applying this property, it follows that the subtrees in n1 and n2 are identical.
The function can be computed recursively in closed form, and quite efficient implementations are available (Moschitti, 2006). $$$$$ In fact, as many predicate argument structures are quite large (up to 100 nodes) they contain many fragments.

It should be stressed that we are comparing against a fast TK implementation that is almost linear in time with respect to the number of tree nodes (Moschitti, 2006). $$$$$ In contrast, their major drawback are (a) the computational time complexity which is superlinear in the number of tree nodes and (b) the accuracy that they produce is often lower than the one provided by linear models on manually designed features.
It should be stressed that we are comparing against a fast TK implementation that is almost linear in time with respect to the number of tree nodes (Moschitti, 2006). $$$$$ Our fast algorithm computes the kernels between two syntactic parse trees in O(m + n) average time, where m and n are the number of nodes in the two trees.

For classification we applied the updated tree-kernel package (Moschitti 2006), distributed with the svm-light tool (Joachims 1999) for learning Support Vector Machines (SVMs). $$$$$ Experiments with Support Vector Machines on the predicate argument classification task provide empirical support to our thesis.
For classification we applied the updated tree-kernel package (Moschitti 2006), distributed with the svm-light tool (Joachims 1999) for learning Support Vector Machines (SVMs). $$$$$ The classifier evaluations were carried out with the SVM-light-TK software available at http://ai-nlp.info.uniroma2.it/moschitti/ which encodes ST and SST kernels in the SVMlight software (Joachims, 1999).

The worse case is not really informative since as shown in (Moschitti, 2006), we can design fast algorithm with a linear average running time (we use such algorithm for SSTK). $$$$$ On the one hand, we show that the FTK running time is linear on the average case and is much faster than QTK.
The worse case is not really informative since as shown in (Moschitti, 2006), we can design fast algorithm with a linear average running time (we use such algorithm for SSTK). $$$$$ We have shown that a fast algorithm (FTK) can evaluate tree kernels in a linear average running time and also that the overall converging time required by SVMs is compatible with very large data sets.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

Collins and Duffy (Collins and Duffy, 2002) suggested to employ convolution kernels to measure similarity between two trees in terms of their sub structures, and more recently, Moschitti (Moschitti, 2006) described in details a fast implementation of tree kernels. $$$$$ 1 as presented in (Collins and Duffy, 2002).
Collins and Duffy (Collins and Duffy, 2002) suggested to employ convolution kernels to measure similarity between two trees in terms of their sub structures, and more recently, Moschitti (Moschitti, 2006) described in details a fast implementation of tree kernels. $$$$$ Recently, several tree kernels have been designed.

More recently, Moschitti (Moschitti, 2006) introduced in details a fast implementation of tree kernels, where a node pair set is first constructed for those associated with same production rules. $$$$$ In our study, we consider syntactic parse trees, consequently, each node with its children is associated with a grammar production rule, where the symbol at left-hand side corresponds to the parent node and the symbols at right-hand side are associated with its children.
More recently, Moschitti (Moschitti, 2006) introduced in details a fast implementation of tree kernels, where a node pair set is first constructed for those associated with same production rules. $$$$$ Recently, several tree kernels have been designed.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

 $$$$$ For this purpose, it is enough to add the condition: 0. if n1 and n2 are leaves and their associated symbols are equal then A(n1, n2) = 1, to the recursive rule set for the A evaluation (Zhang and Lee, 2003).
 $$$$$ This research is partially supported by the Presto Space EU Project#: FP6-507336.

Although this kernel achieves state-of-the-art performance in NLP tasks, such as Question Classification (Bloehdorn and Moschitti, 2007b) and Textual Entailment (Mehdad et al, 2010), it offers clearly possibility of improvement: (i) better possibility to exploit semantic smoothing since, e.g., trivially STK only matches the syntactic structure apple/orange when comparing the big beautiful apple to a nice large orange; and (ii) STK cannot be effectively applied to dependency structures, e.g. see experiments and motivation in (Moschitti, 2006a). $$$$$ The main tree kernel advantage is the possibility to generate a high number of syntactic features and let the learning algorithm to select those most relevant for a specific application.
Although this kernel achieves state-of-the-art performance in NLP tasks, such as Question Classification (Bloehdorn and Moschitti, 2007b) and Textual Entailment (Mehdad et al, 2010), it offers clearly possibility of improvement: (i) better possibility to exploit semantic smoothing since, e.g., trivially STK only matches the syntactic structure apple/orange when comparing the big beautiful apple to a nice large orange; and (ii) STK cannot be effectively applied to dependency structures, e.g. see experiments and motivation in (Moschitti, 2006a). $$$$$ It should be noted that our results of kernel combinations on FrameNet are in contrast with (Moschitti, 2004), where no improvement was obtained.
