see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.

We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ A finite-state transducer has two tapes.
We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ The accepting automata for regular n-relations are the n-way finite-state transducers.

Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ For example, we can show that Koskenniemi's (1983) two-level parallel rule systems also denote regular relations.
Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ This is the sort of arrangement that Karttunen et al. (1992) discuss.

Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ The regular relations differ from the regular languages, however, in that they are not closed under intersection and complementation.
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ The intersection of their same-length relations is therefore regular.

(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ The third and fourth operators enable us to express if-then and if-and-only-if conditions on regular languages.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ Inspired in part by our early report of the material presented in this paper (Kaplan and Kay 1981), Koskenniemi (1983) proposed an alternative system for recognizing and producing morphological and phonological word-form variants.

This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ An n-way regular expression is simply a regular expression whose terms are n-tuples of alphabetic symbols or â‚¬.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ They are usually simple strings and some theorists would restrict them to single segments.

The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ A similar construction is used to prove that regular relations are closed under the composition operator discussed in Section 2.
The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ Note that Intro(S)-1 removes all elements of S from a string if S is disjoint from E. The second is the Ignore operator.

This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ Note that Intro(S)-1 removes all elements of S from a string if S is disjoint from E. The second is the Ignore operator.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ But also as we have seen several times before, this relation does not completely simulate the batch application of the rules.

Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ A finite-state transducer has two tapes.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ In short, the relations accepted by finite-state transducers are closed under serial composition.

 $$$$$ Phonological rewriting rules have four parts.
 $$$$$ We, of course, are responsible for any remaining errors.

The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ The rule properly applies to rewrite the N because it is bracketed by < and
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ .
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ We now have components for freely introducing and removing context brackets, for rejecting strings with mislocated brackets, and for representing the rewrite action of a rule between appropriate context markers.

In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ While finite-state transducers are attractive for their formal simplicity, they have a much more important advantage for our purposes.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ However, we shall see that directionality in rewriting rules is not mirrored by directionality in the transducers.

An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ A similar characterization of two-level rule systems is provided in Section 7.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ First, it can be the start of a rule application, provided it appears in front of an appropriate configuration of 0, and right-context brackets.

Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ The reason is doubtless that batch rules are unnecessarily prolix and, in particular, they fail to capture generalizations that can almost always be made about the individual rules that make up a batch.
Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ A replacement operator for batch rules must also be constructed.

Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ Let m (for marker) be {<,
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ }, the set of both markers.
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ Second, it can be ignored during the identity portions of the strings, the regions between the changes sanctioned by the replacement relation.

it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ We are also encouraged by initial successes in adapting these techniques to the autosegmental formalism described by Kay (1987).
it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ We have described transducers as acceptors of pairs of tapes that stand in a certain relation.

For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ This is the mode of application for a set of rules collected together as a batch.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ A model of the left-to-right application optional application of a batch rule is obtained by substituting the new, more complex definitions in the composition cascade for ordinary rules with these application parameters

Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ It is interesting to note that for much the same reason, Ritchie (1992) also made crucial use of two-level boundary-context rules to prove that the relations denoted by Koskenniemi's (1985) two-level grammars are also coextensive with the regular relations.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ As we mentioned before, the two-level grammars with boundary-context rules are the ones that Ritchie (1992) showed were complete for the regular relations.

Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ The pair can be regarded as performing a transduction between the outer tapes, and it turns out that a single finite-state transducer can be constructed that performs exactly this transduction without incorporating any analog of the intermediate tape.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ Figure 9 shows the general form of the state-transition diagram for a transducer that accepts a replacement relation.

 $$$$$ Phonological rewriting rules have four parts.
 $$$$$ We, of course, are responsible for any remaining errors.
