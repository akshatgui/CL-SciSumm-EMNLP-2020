We turned to TextRunner (Yates et al, 2007) as a large source of background knowledge about pre-existing relations between nominals. $$$$$ The process is easily parallelized, and took only 4 hours to run on our cluster.
We turned to TextRunner (Yates et al, 2007) as a large source of background knowledge about pre-existing relations between nominals. $$$$$ While full parsing is too expensive to apply to the Web, we use a parser to generate training examples for extraction.
We turned to TextRunner (Yates et al, 2007) as a large source of background knowledge about pre-existing relations between nominals. $$$$$ The bulk of previous information extraction work uses hand-labeled data or hand-crafted patterns to enable relation-specific extraction (e.g., (Culotta et al., 2006)).

Yates (2009) considers the output from an open information extraction system (Yates et al, 2007) and clusters predicates and arguments using string similarity and a combination of constraints. $$$$$ If the classifier deems the relationship trustworthy, a tuple of the form t = (ei, rj, ek) is extracted, where ei, ek are entities and rj is the relation between them.
Yates (2009) considers the output from an open information extraction system (Yates et al, 2007) and clusters predicates and arguments using string similarity and a combination of constraints. $$$$$ (Etzioni et al., 2005) On a set of ten high-frequency relations, TEXTRUNNER found nearly as many correct extractions as KNOWITALL (11,631 to 11,476), while reducing the error rate of KNOWITALL by 33% (18% to 12%).
Yates (2009) considers the output from an open information extraction system (Yates et al, 2007) and clusters predicates and arguments using string similarity and a combination of constraints. $$$$$ TEXTRUNNER's extractions are indexed, allowing a fast query mechanism.

Two example systems implementing this paradigm are TEXTRUNNER (Yates et al, 2007) and REVERB (Fader et al, 2011). $$$$$ TEXTRUNNER's extractions are indexed, allowing a fast query mechanism.
Two example systems implementing this paradigm are TEXTRUNNER (Yates et al, 2007) and REVERB (Fader et al, 2011). $$$$$ The RESOLVER system performs an unsupervised clustering of TEXTRUNNER's extractions to create sets of synonymous entities and relations.
Two example systems implementing this paradigm are TEXTRUNNER (Yates et al, 2007) and REVERB (Fader et al, 2011). $$$$$ (Yates and Etzioni, 2007)

In contrast, when research focuses on any relation, as in TextRunner (Yates et al, 2007), there is no standardized manner for re-using the pattern learned. $$$$$ The TEXTRUNNER extractor makes a single pass over all documents, tagging sentences with part-of-speech tags and nounphrase chunks as it goes.
In contrast, when research focuses on any relation, as in TextRunner (Yates et al, 2007), there is no standardized manner for re-using the pattern learned. $$$$$ OIE presents significant new challenges for information extraction systems, including Automation of relation extraction, which in traditional information extraction uses handlabeled inputs.
In contrast, when research focuses on any relation, as in TextRunner (Yates et al, 2007), there is no standardized manner for re-using the pattern learned. $$$$$ For a full discussion of previous work, please see (Banko et al., 2007), or see (Yates and Etzioni, 2007) for work relating to synonym resolution.
In contrast, when research focuses on any relation, as in TextRunner (Yates et al, 2007), there is no standardized manner for re-using the pattern learned. $$$$$ It does not scale to the size of the Web.

The online demo of TextRunner (Yates et al, 2007) actually allowed us to collect the arguments for all our semantic relations. $$$$$ TEXTRUNNER builds an inverted index of the extracted tuples, and spreads it across a cluster of machines.
The online demo of TextRunner (Yates et al, 2007) actually allowed us to collect the arguments for all our semantic relations. $$$$$ For example, TEXTRUNNER might extract the tuple (Edison, invented, light bulbs).
