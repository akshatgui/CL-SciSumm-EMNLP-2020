To identify associative constructions, we first process our texts using Conexor's FDG parser (Tapanainen and Jarvinen, 1997). $$$$$ We describe a practical parser for unrestricted dependencies.
To identify associative constructions, we first process our texts using Conexor's FDG parser (Tapanainen and Jarvinen, 1997). $$$$$ The test may also refer to the positions somewhere in the sentence without specifying the exact location.
To identify associative constructions, we first process our texts using Conexor's FDG parser (Tapanainen and Jarvinen, 1997). $$$$$ Basically, the barrier can be used to limit the test only to the current clause (by using clause boundary markers and &quot;stop words&quot;) or to a constituent (by using &quot;stop categories&quot;) instead of the whole sentence.
To identify associative constructions, we first process our texts using Conexor's FDG parser (Tapanainen and Jarvinen, 1997). $$$$$ These dependencies are usually resolved more reliably than, say, appositions, prepositional attachments etc.

For English texts, these trees were first provided by the Connexor parser at UMIACS (Tapanainen and Jarvinen, 1997), and then corrected by one of the team PIs. $$$$$ This section evaluates the success of the level of dependencies.
For English texts, these trees were first provided by the Connexor parser at UMIACS (Tapanainen and Jarvinen, 1997), and then corrected by one of the team PIs. $$$$$ Then, we give some linguistic background to the notations we are using, with a brief comparison to other current dependency formalisms and systems.
For English texts, these trees were first provided by the Connexor parser at UMIACS (Tapanainen and Jarvinen, 1997), and then corrected by one of the team PIs. $$$$$ We are using Atro Voutilainen's (1995) improved part-of-speech disambiguation grammar which runs in the CG-2 parser.
For English texts, these trees were first provided by the Connexor parser at UMIACS (Tapanainen and Jarvinen, 1997), and then corrected by one of the team PIs. $$$$$ The most important result is that the new framework allows us to describe non-projective dependency grammars and apply them efficiently.

It is developped at the Xerox Research Centre Europe (XRCE) and shares the same computationnal paradigm as the PNLPL approach (Jensen, 1992) and the FDGP approach (Tapanainen and Jarvinen, 1997). $$$$$ We are using Atro Voutilainen's (1995) improved part-of-speech disambiguation grammar which runs in the CG-2 parser.
It is developped at the Xerox Research Centre Europe (XRCE) and shares the same computationnal paradigm as the PNLPL approach (Jensen, 1992) and the FDGP approach (Tapanainen and Jarvinen, 1997). $$$$$ More than one such test can be appended to a rule.
It is developped at the Xerox Research Centre Europe (XRCE) and shares the same computationnal paradigm as the PNLPL approach (Jensen, 1992) and the FDGP approach (Tapanainen and Jarvinen, 1997). $$$$$ Similarly, a modifies bird, and it is a determiner.
It is developped at the Xerox Research Centre Europe (XRCE) and shares the same computationnal paradigm as the PNLPL approach (Jensen, 1992) and the FDGP approach (Tapanainen and Jarvinen, 1997). $$$$$ We are using Atro Voutilainen's (1995) improved part-of-speech disambiguation grammar which runs in the CG-2 parser.
