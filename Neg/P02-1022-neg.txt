Perspective GATE (Cunningham et al, 2002a) is an architecture, a framework and a development environment for human language technology modules and applications. $$$$$ (Brugman et al., 1998) and to work on comparing different versions of information, e.g.
Perspective GATE (Cunningham et al, 2002a) is an architecture, a framework and a development environment for human language technology modules and applications. $$$$$ Depending on the information that needs to be annotated, some ANNIE modules can be used or adapted to bootstrap the corpus annotation task.
Perspective GATE (Cunningham et al, 2002a) is an architecture, a framework and a development environment for human language technology modules and applications. $$$$$ We are also extending the system to handle language generation modules, in order to enable the construction of applications which require language production in addition to analysis, e.g. intelligent report generation from IE data.
Perspective GATE (Cunningham et al, 2002a) is an architecture, a framework and a development environment for human language technology modules and applications. $$$$$ The coreferencer finds identity relations between entities in the text.

The GATE API (Application Programming Interface) is fully documented in Javadoc and also examples are given in the comprehensive User Guide (Cunningham et al, 2002b). $$$$$ It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities.
The GATE API (Application Programming Interface) is fully documented in Javadoc and also examples are given in the comprehensive User Guide (Cunningham et al, 2002b). $$$$$ Oracle) and the other two are file- based, using Java serialisation or an XML-based internal format.
The GATE API (Application Programming Interface) is fully documented in Javadoc and also examples are given in the comprehensive User Guide (Cunningham et al, 2002b). $$$$$ ANNIE consists of the following main processing resources: tokeniser, sentence splitter, POS tagger, gazetteer, finite state transducer (based on GATE's built-in regular expressions over annotations language (Cunningham et al., 2002)), orthomatcher and coreference resolver.
The GATE API (Application Programming Interface) is fully documented in Javadoc and also examples are given in the comprehensive User Guide (Cunningham et al, 2002b). $$$$$ Since many NLP algorithms require annotated corpora for training, GATE's development environment provides easy-to-use and extendable facilities for text annotation.

JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996) and is used to describe patterns to match and annotations to be created as a result (for further details see (Cunningham et al, 2002b)). $$$$$ (Note that although Java represents characters as Unicode, it doesn't support input in many of the languages covered by Unicode.)
JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996) and is used to describe patterns to match and annotations to be created as a result (for further details see (Cunningham et al, 2002b)). $$$$$ For each annotation type, figures are generated for precision, recall, F-measure and false positives.

 $$$$$ The fact that all processing resources use finite-state transducer technology makes them quite performant in terms of execution times.
 $$$$$ Because GATE is an open architecture, new virtual keyboards can be defined by the users and added to the system as needed.

The automatic alignments have then been manually corrected through a graphical editing tool within the GATE framework (Cunningham et al, 2002). $$$$$ Since many NLP algorithms require annotated corpora for training, GATE's development environment provides easy-to-use and extendable facilities for text annotation.
The automatic alignments have then been manually corrected through a graphical editing tool within the GATE framework (Cunningham et al, 2002). $$$$$ The annotation can be done manually by the user or semi-automatically by running some processing resources over the corpus and then correcting/adding new annotations manually.
The automatic alignments have then been manually corrected through a graphical editing tool within the GATE framework (Cunningham et al, 2002). $$$$$ It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities.
The automatic alignments have then been manually corrected through a graphical editing tool within the GATE framework (Cunningham et al, 2002). $$$$$ The MUMIS (MUltiMedia Indexing and Searching environment) system uses Information Extraction components developed within GATE to produce formal annotations about essential events in football video programme material.

The GATE system (Cunningham et al., 2002) is used to tag named entities, which are categorized as <Person>, <Organization>, <Location> and <Date>. $$$$$ This work is particularly novel in that it addresses the complete range of issues in NLP application development in a flexible and extensible way, rather than focusing just on some particular aspect of the development process.
The GATE system (Cunningham et al., 2002) is used to tag named entities, which are categorized as <Person>, <Organization>, <Location> and <Date>. $$$$$ One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE's visual environment.
The GATE system (Cunningham et al., 2002) is used to tag named entities, which are categorized as <Person>, <Organization>, <Location> and <Date>. $$$$$ It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities.
The GATE system (Cunningham et al., 2002) is used to tag named entities, which are categorized as <Person>, <Organization>, <Location> and <Date>. $$$$$ It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities.

In order to produce the gold standard annotations in GerManC-GS we used the GATE platform, which facilitates automatic as well as manual annotation (Cunningham et al 2002). $$$$$ The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains.
In order to produce the gold standard annotations in GerManC-GS we used the GATE platform, which facilitates automatic as well as manual annotation (Cunningham et al 2002). $$$$$ (Brugman et al., 1998; Grishman, 1997; Zajac, 1998).
In order to produce the gold standard annotations in GerManC-GS we used the GATE platform, which facilitates automatic as well as manual annotation (Cunningham et al 2002). $$$$$ Our approach is also related to work on user interfaces to architectural facilities such as development environments, e.g.

Linguistic analysis of textual input is carried out using the General Architecture for Text Engineering (GATE) - a framework for the development and deployment of language processing technology in large scale (Cunningham et al, 2002). $$$$$ One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE's visual environment.
Linguistic analysis of textual input is carried out using the General Architecture for Text Engineering (GATE) - a framework for the development and deployment of language processing technology in large scale (Cunningham et al, 2002). $$$$$ It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities.

The algorithm was implemented using the GATE NLP framework (Cunningham et al, 2002) and texts preprocessed using the tokeniser, sentence splitter, and part-of-speech (POS) tagger provided with GATE. $$$$$ Scalability was tested by running the ANNIE modules over a randomly chosen part of the British National Corpus (10% of all documents), which contained documents of up to 17MB in size.
The algorithm was implemented using the GATE NLP framework (Cunningham et al, 2002) and texts preprocessed using the tokeniser, sentence splitter, and part-of-speech (POS) tagger provided with GATE. $$$$$ 'Ltd:), titles, etc.

These named entities are tagged with GATE (Cunningham et al, 2002). $$$$$ Currently, statistical models can be integrated but need to be trained separately.
These named entities are tagged with GATE (Cunningham et al, 2002). $$$$$ In this section, we describe briefly some of the NLP applications we have developed using the GATE architecture.
These named entities are tagged with GATE (Cunningham et al, 2002). $$$$$ Currently, statistical models can be integrated but need to be trained separately.
These named entities are tagged with GATE (Cunningham et al, 2002). $$$$$ (Brugman et al., 1998) and to work on comparing different versions of information, e.g.

The linguistic component uses the infrastructure and the following resources from GATE (Cunningham et al, 2002) $$$$$ For example, users from the humanities created a gazetteer list with 18th century place names in London, which when supplied to the ANNIE gazetteer, allows the automatic annotation of place information in a large collection of 18th century court reports from the Old Bailey in London.
The linguistic component uses the infrastructure and the following resources from GATE (Cunningham et al, 2002) $$$$$ GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations.
The linguistic component uses the infrastructure and the following resources from GATE (Cunningham et al, 2002) $$$$$ One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE's visual environment.
The linguistic component uses the infrastructure and the following resources from GATE (Cunningham et al, 2002) $$$$$ (Brugman et al., 1998; Grishman, 1997; Zajac, 1998).

We developed a set of algorithms along with existing NLP tools (GATE (Cunningham et al, 2002) etc.) for this task. $$$$$ The AnnotationDiff viewer displays the two sets of annotations, marked with different colours (similar to 'visual diff' implementations such as in the MKS Toolkit or TkDiff).
We developed a set of algorithms along with existing NLP tools (GATE (Cunningham et al, 2002) etc.) for this task. $$$$$ Gate's AnnotationDiff tool enables two sets of annotations on a document to be compared, in order to either compare a system-annotated text with a reference (hand-annotated) text, or to compare the output of two different versions of the system (or two different systems).
We developed a set of algorithms along with existing NLP tools (GATE (Cunningham et al, 2002) etc.) for this task. $$$$$ The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains.
We developed a set of algorithms along with existing NLP tools (GATE (Cunningham et al, 2002) etc.) for this task. $$$$$ Currently, statistical models can be integrated but need to be trained separately.

For named-entity recognition, we use GATE (Cunningham et al, 2002), augmented with named entity lists for locations, food types, restaurant names, and food subtypes (e.g. pizza), scraped from the we8there web pages. $$$$$ Since manual annotation is a difficult and error-prone task, GATE tries to make it simple to use and yet keep it flexible.
For named-entity recognition, we use GATE (Cunningham et al, 2002), augmented with named entity lists for locations, food types, restaurant names, and food subtypes (e.g. pizza), scraped from the we8there web pages. $$$$$ Gate's AnnotationDiff tool enables two sets of annotations on a document to be compared, in order to either compare a system-annotated text with a reference (hand-annotated) text, or to compare the output of two different versions of the system (or two different systems).
For named-entity recognition, we use GATE (Cunningham et al, 2002), augmented with named entity lists for locations, food types, restaurant names, and food subtypes (e.g. pizza), scraped from the we8there web pages. $$$$$ Currently 28 languages are supported, and more are planned for future releases.

To this end, the GATE Gazetteer (Cunningham et al., 2002) was used, and only entities recognized by it automatically were considered. $$$$$ We are also extending the system to handle language generation modules, in order to enable the construction of applications which require language production in addition to analysis, e.g. intelligent report generation from IE data.
To this end, the GATE Gazetteer (Cunningham et al., 2002) was used, and only entities recognized by it automatically were considered. $$$$$ Currently, statistical models can be integrated but need to be trained separately.
To this end, the GATE Gazetteer (Cunningham et al., 2002) was used, and only entities recognized by it automatically were considered. $$$$$ Depending on the information that needs to be annotated, some ANNIE modules can be used or adapted to bootstrap the corpus annotation task.
To this end, the GATE Gazetteer (Cunningham et al., 2002) was used, and only entities recognized by it automatically were considered. $$$$$ The annotation can be done manually by the user or semi-automatically by running some processing resources over the corpus and then correcting/adding new annotations manually.

Our system is based on the GATE natural language processing framework (Cunningham et al, 2002) and it uses the ANNIE IE system included in the standard GATE distribution for text tokenization, sentence splitting and part-of-speech tagging. $$$$$ In order to test their usability in practice, we used these facilities to build corpora of named entity annotated texts for the MUSE, ACE, and MUMIS applications.
Our system is based on the GATE natural language processing framework (Cunningham et al, 2002) and it uses the ANNIE IE system included in the standard GATE distribution for text tokenization, sentence splitting and part-of-speech tagging. $$$$$ One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE's visual environment.
Our system is based on the GATE natural language processing framework (Cunningham et al, 2002) and it uses the ANNIE IE system included in the standard GATE distribution for text tokenization, sentence splitting and part-of-speech tagging. $$$$$ To add a new annotation, one selects the text with the mouse (e.g., &quot;Mr. Clever&quot;) and then clicks on the desired annotation type (e.g., Person), which is shown in the list of types on the right-handside of the document viewer (see Figure 1).
Our system is based on the GATE natural language processing framework (Cunningham et al, 2002) and it uses the ANNIE IE system included in the standard GATE distribution for text tokenization, sentence splitting and part-of-speech tagging. $$$$$ If however the desired annotation type does not already appear there or the user wants to associate more detailed information with the annotation (not just its type), then an annotation editing dialogue can be used.

Similarly, we define additional features using the gazetteers from GATE, (Cunningham et al., 2002) namely, countries, person first/last names, trigger words;. $$$$$ The gazetteer lists are compiled into finite state machines, which can match text tokens.
Similarly, we define additional features using the gazetteers from GATE, (Cunningham et al., 2002) namely, countries, person first/last names, trigger words;. $$$$$ In all cases, when a document is created/opened in GATE, the format is analysed and converted into a single unified model of annotation.
Similarly, we define additional features using the gazetteers from GATE, (Cunningham et al., 2002) namely, countries, person first/last names, trigger words;. $$$$$ For example, users from the humanities created a gazetteer list with 18th century place names in London, which when supplied to the ANNIE gazetteer, allows the automatic annotation of place information in a large collection of 18th century court reports from the Old Bailey in London.

An INIT is defined as a dated and located subject-verb-object triple, relying mostly on syntactical analyses from the MINIPAR parser (Lin, 1998) and linguistic annotations from the GATE information extraction engine (Cunningham et al., 2002). $$$$$ This repository is used by the framework to discover and load available resources.
An INIT is defined as a dated and located subject-verb-object triple, relying mostly on syntactical analyses from the MINIPAR parser (Lin, 1998) and linguistic annotations from the GATE information extraction engine (Cunningham et al., 2002). $$$$$ Since manual annotation is a difficult and error-prone task, GATE tries to make it simple to use and yet keep it flexible.
An INIT is defined as a dated and located subject-verb-object triple, relying mostly on syntactical analyses from the MINIPAR parser (Lin, 1998) and linguistic annotations from the GATE information extraction engine (Cunningham et al., 2002). $$$$$ Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g.
An INIT is defined as a dated and located subject-verb-object triple, relying mostly on syntactical analyses from the MINIPAR parser (Lin, 1998) and linguistic annotations from the GATE information extraction engine (Cunningham et al., 2002). $$$$$ GATE contains two such mechanisms: an evaluation tool (AnnotationDiff) which enables automated performance measurement and visualisation of the results, and a benchmarking tool, which enables the tracking of a system's progress and regression testing.

These patterns are implemented as regular expressions using the JAPE language (Cunningham et al, 2002). $$$$$ First of all, the tool is run in generation mode to produce a set of texts annotated by the system.
These patterns are implemented as regular expressions using the JAPE language (Cunningham et al, 2002). $$$$$ We are also extending the system to handle language generation modules, in order to enable the construction of applications which require language production in addition to analysis, e.g. intelligent report generation from IE data.
These patterns are implemented as regular expressions using the JAPE language (Cunningham et al, 2002). $$$$$ In all cases, when a document is created/opened in GATE, the format is analysed and converted into a single unified model of annotation.
These patterns are implemented as regular expressions using the JAPE language (Cunningham et al, 2002). $$$$$ The annotation can be done manually by the user or semi-automatically by running some processing resources over the corpus and then correcting/adding new annotations manually.

Similar mechanisms have also been proposed in other architectures to help heterogeneous linguistic modules to communicate through a common XML interface (see Cunningham et al,2002, Blache and Gunot, 2003). $$$$$ GATE documents can also be exported back to their original format (e.g.
Similar mechanisms have also been proposed in other architectures to help heterogeneous linguistic modules to communicate through a common XML interface (see Cunningham et al,2002, Blache and Gunot, 2003). $$$$$ The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains.
Similar mechanisms have also been proposed in other architectures to help heterogeneous linguistic modules to communicate through a common XML interface (see Cunningham et al,2002, Blache and Gunot, 2003). $$$$$ Annotations in the key set have two possible colours depending on their state: white for annotations which have a compatible (or partially compatible) annotation in the response set, and orange for annotations which are missing in the response set.
Similar mechanisms have also been proposed in other architectures to help heterogeneous linguistic modules to communicate through a common XML interface (see Cunningham et al,2002, Blache and Gunot, 2003). $$$$$ The tool requires a clean version of a corpus (with no annotations) and an annotated reference corpus.

Some other systems are frameworks for performing generic tasks in one area of focus such as NLTK (Bird and Loper, 2004) and GATE (Cunningham et al, 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and Guess (Adar, 2006) for Network Analysis and Visualization; and Lemur for Language Modeling and Information Retrieval. $$$$$ As a framework, it provides a reusable design for an LE software system and a set of prefabricated software building blocks that language engineers can use, extend and customise for their specific needs.
Some other systems are frameworks for performing generic tasks in one area of focus such as NLTK (Bird and Loper, 2004) and GATE (Cunningham et al, 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and Guess (Adar, 2006) for Network Analysis and Visualization; and Lemur for Language Modeling and Information Retrieval. $$$$$ In the viewer, two annotations will be positioned on the same row if they are co-extensive, and on different rows if not.
Some other systems are frameworks for performing generic tasks in one area of focus such as NLTK (Bird and Loper, 2004) and GATE (Cunningham et al, 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and Guess (Adar, 2006) for Network Analysis and Visualization; and Lemur for Language Modeling and Information Retrieval. $$$$$ (Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et al., 2000).
Some other systems are frameworks for performing generic tasks in one area of focus such as NLTK (Bird and Loper, 2004) and GATE (Cunningham et al, 2002) for Natural Language Processing; Pajek (Batagelj and Mrvar, 2003) and Guess (Adar, 2006) for Network Analysis and Visualization; and Lemur for Language Modeling and Information Retrieval. $$$$$ The implementation of the processing resources is centred on robustness, usability and the clear distinction between declarative data representations and finite state algorithms The behaviour of all the processors is completely controlled by external resources such as grammars or rule sets, which makes them easily modifiable by users who do not need to be familiar with programming languages.
