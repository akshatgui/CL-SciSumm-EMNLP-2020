The infinite application of grammar rules is a common problem of the existing top-down unification-based generators (Shieber et al, 1989). $$$$$ For instance, a single chain rule might be considered to be applicable twice because of the nondeterminism of the call to chained_nodes.
The infinite application of grammar rules is a common problem of the existing top-down unification-based generators (Shieber et al, 1989). $$$$$ Finally, in order to incorporate a general facility for auxiliary conditions in rules, some sort of delayed evaluation triggered by appropriate instantiation (e.g., wait declarations (Naish, 1986)) would be desirable.
The infinite application of grammar rules is a common problem of the existing top-down unification-based generators (Shieber et al, 1989). $$$$$ In addition, full information about the subject, including agreement information was available before it was generated.
The infinite application of grammar rules is a common problem of the existing top-down unification-based generators (Shieber et al, 1989). $$$$$ This control regime is realized, for instance, when running a DCG &quot;backwards&quot; as a generator.

One of the termination problems Shieber et al (1989) pointed out is in the left-recursive rules. $$$$$ We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
One of the termination problems Shieber et al (1989) pointed out is in the left-recursive rules. $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work.
One of the termination problems Shieber et al (1989) pointed out is in the left-recursive rules. $$$$$ Although vastly superior to the naive top-down algorithm, even this sort of amended top-down approach to generation based on goal freezing under one guise or another fails to terminate with certain linguistically plausible analyses.

Though the restriction can not be applied to languages like Dutch (Shieber et al, 1989), the limitation is irrelevant to our purpose (translation between Japanese and English). $$$$$ Shieber, Moore, and Pereira were supported in this work by a contract with the Nippon Telephone and Telegraph Corp. and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bib liotheekwezen en Informatieverzorgin through the Eurotra project.
Though the restriction can not be applied to languages like Dutch (Shieber et al, 1989), the limitation is irrelevant to our purpose (translation between Japanese and English). $$$$$ In general, these cases arise when a particular lexical item is stipulated to occur, the stipulation being either lexical (as in the case of particles or idioms) or grammatical (as in the case of expletive expressions).
Though the restriction can not be applied to languages like Dutch (Shieber et al, 1989), the limitation is irrelevant to our purpose (translation between Japanese and English). $$$$$ In particular, unlike an Earley deduction generator (Shieber, 1988), it allows use of semantically nonmonotonic grammars, yet unlike topdown methods, it also permits left-recursion.
Though the restriction can not be applied to languages like Dutch (Shieber et al, 1989), the limitation is irrelevant to our purpose (translation between Japanese and English). $$$$$ Finally, even though much of the processing is top-down, left-recursive rules (e.g., rule (3)) are still handled in a constrained manner by the algorithm.

The actual realization of the component is based on a constraint-based inheritance algorithm that follows the example of PATR-II (Shieber et al, 1989). $$$$$ 5 Finally, it is necessary to deal with the noun phrases that create store elements.
The actual realization of the component is based on a constraint-based inheritance algorithm that follows the example of PATR-II (Shieber et al, 1989). $$$$$ Of course, the same mechanism could be added to any of the other generation techniques discussed to in this paper.
The actual realization of the component is based on a constraint-based inheritance algorithm that follows the example of PATR-II (Shieber et al, 1989). $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work.
The actual realization of the component is based on a constraint-based inheritance algorithm that follows the example of PATR-II (Shieber et al, 1989). $$$$$ Efficiency considerations require that only grammars possessing a property of semantic monotonicity can be effectively used, and even for those grammars, processing can become overly nondeterministic.

The lexicon match is not based on direct unification of the target phrase's semantics with that of its head, a fundamental requirement of the bottom-up head-driven algorithm of Shieber et al (1989) and Van Noord (1990). $$$$$ The use of dynamic programming techniques, as in chart parsing, would be an appropriate augmentation to the implementation of the algorithm.
The lexicon match is not based on direct unification of the target phrase's semantics with that of its head, a fundamental requirement of the bottom-up head-driven algorithm of Shieber et al (1989) and Van Noord (1990). $$$$$ Further enhancements to the algorithm are envisioned.
