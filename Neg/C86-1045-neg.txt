In this paper we present an algorithm for generating sentences using unification categorial grammars (UCGs, Zeevat et al 1987) but which extends to any categorial grammar with unification (e.g. categorial unification grammars, Uszkoreit 1986, Karttunen 1987). $$$$$ Conjunction is a good case for demonstrating the versatility.
In this paper we present an algorithm for generating sentences using unification categorial grammars (UCGs, Zeevat et al 1987) but which extends to any categorial grammar with unification (e.g. categorial unification grammars, Uszkoreit 1986, Karttunen 1987). $$$$$ Approaches to selected linguistic phenomena such as long-distance dependencies, adjuncts, word order, and extraposition are discussed.
In this paper we present an algorithm for generating sentences using unification categorial grammars (UCGs, Zeevat et al 1987) but which extends to any categorial grammar with unification (e.g. categorial unification grammars, Uszkoreit 1986, Karttunen 1987). $$$$$ The implementation f this facility through Stuart Shieber, however, raised interesting problems in connection with the prediction aspect of the Earley-parser.
In this paper we present an algorithm for generating sentences using unification categorial grammars (UCGs, Zeevat et al 1987) but which extends to any categorial grammar with unification (e.g. categorial unification grammars, Uszkoreit 1986, Karttunen 1987). $$$$$ In a unification based system like PATR it is not trivial to ensure that gap information is passed up from one daughter const i tuent only when a rule is applied.

The lexical types are organised into an inheritance hierarchy, constrained by expressions of a simple feature based category description language, inspired by previous attempts to integrate categorial grammars and unification-based grammars, e.g. Uszkoreit (1986) and Zeevat et al (1987). $$$$$ It will be argued that the strategies and potentials of CUGs justify their further exploration i the wider context of research on unification grammars.
The lexical types are organised into an inheritance hierarchy, constrained by expressions of a simple feature based category description language, inspired by previous attempts to integrate categorial grammars and unification-based grammars, e.g. Uszkoreit (1986) and Zeevat et al (1987). $$$$$ The head is a context-free rewrite rule and the body is a DAG.
The lexical types are organised into an inheritance hierarchy, constrained by expressions of a simple feature based category description language, inspired by previous attempts to integrate categorial grammars and unification-based grammars, e.g. Uszkoreit (1986) and Zeevat et al (1987). $$$$$ The philosophy behind the development of PATR has been to provide a tool for writing, testing, and comparing grammars of very different types in a powerful formalism with well-understood formal properties and a well-defined semantics (Shieber 1984).
The lexical types are organised into an inheritance hierarchy, constrained by expressions of a simple feature based category description language, inspired by previous attempts to integrate categorial grammars and unification-based grammars, e.g. Uszkoreit (1986) and Zeevat et al (1987). $$$$$ In a CUG that only contains two (or at least very ? few) rules, the first method of duplicating rules appears preferrable over the gap threading approach.

Unificationbased versions of Categorial Grammar, known as CUG or UCG, have attracted considerable attention recently (see, for instance, Uszkoreit, 1986, Karttunen, 1986, Bouma, 1988, Bouma et al, 1988, and Calder et al, 1988). $$$$$ The philosophy behind the development of PATR has been to provide a tool for writing, testing, and comparing grammars of very different types in a powerful formalism with well-understood formal properties and a well-defined semantics (Shieber 1984).
Unificationbased versions of Categorial Grammar, known as CUG or UCG, have attracted considerable attention recently (see, for instance, Uszkoreit, 1986, Karttunen, 1986, Bouma, 1988, Bouma et al, 1988, and Calder et al, 1988). $$$$$ Yet the feature that indicates the difference between adverbs and adverbial phrases could not be in both the argument and the value parts of the functor, otherwise iterations of the two types of modifiers as they occur in the following pair of sentences would be ruled out.
Unificationbased versions of Categorial Grammar, known as CUG or UCG, have attracted considerable attention recently (see, for instance, Uszkoreit, 1986, Karttunen, 1986, Bouma, 1988, Bouma et al, 1988, and Calder et al, 1988). $$$$$ Categorial unification grammars (CUGs) embody the essential properties of both unification and categorial grammar formalisms.
Unificationbased versions of Categorial Grammar, known as CUG or UCG, have attracted considerable attention recently (see, for instance, Uszkoreit, 1986, Karttunen, 1986, Bouma, 1988, Bouma et al, 1988, and Calder et al, 1988). $$$$$ Order Variat ion Worder order variation has always been one of the hardest problems for categorial grammars.

Higher order versions of categorial grammars like the ones being produced in the CUG/UCG-frameworks. $$$$$ Categorial unification grammars (CUGs) embody the essential properties of both unification and categorial grammar formalisms.
Higher order versions of categorial grammars like the ones being produced in the CUG/UCG-frameworks. $$$$$ It will be argued that the strategies and potentials of CUGs justify their further exploration i the wider context of research on unification grammars.
Higher order versions of categorial grammars like the ones being produced in the CUG/UCG-frameworks. $$$$$ This approach presupposes that the valency list contains adjuncts as well as complements as the flmetor's syntactic arguments) The model can be summarized as follows.
Higher order versions of categorial grammars like the ones being produced in the CUG/UCG-frameworks. $$$$$ It will be argued that the strategies and potentials of CUGs justify their further exploration i the wider context of research on unification grammars.

The family of grammar models that are based on such formalisms include Generalized Phrase Structure Grammar (GPSG) [Gazdar et al 1985], Lexical Functional Grammar (LFG) [Bresnan 1982], Functional Unification Grammar (bUG) [Kay 1984], Head-Driven Phrase Structure Grammar (I-IPSG) [Pollard and Sag 1988], and Categorial Unification Grammar (CUG) [Karttunen 1986, Uszkoreit 1986, Zeevat et al 1987]. $$$$$ Categorial unification grammars (CUGs) embody the essential properties of both unification and categorial grammar formalisms.
The family of grammar models that are based on such formalisms include Generalized Phrase Structure Grammar (GPSG) [Gazdar et al 1985], Lexical Functional Grammar (LFG) [Bresnan 1982], Functional Unification Grammar (bUG) [Kay 1984], Head-Driven Phrase Structure Grammar (I-IPSG) [Pollard and Sag 1988], and Categorial Unification Grammar (CUG) [Karttunen 1986, Uszkoreit 1986, Zeevat et al 1987]. $$$$$ It will be argued that the strategies and potentials of CUGs justify their further exploration i the wider context of research on unification grammars.
The family of grammar models that are based on such formalisms include Generalized Phrase Structure Grammar (GPSG) [Gazdar et al 1985], Lexical Functional Grammar (LFG) [Bresnan 1982], Functional Unification Grammar (bUG) [Kay 1984], Head-Driven Phrase Structure Grammar (I-IPSG) [Pollard and Sag 1988], and Categorial Unification Grammar (CUG) [Karttunen 1986, Uszkoreit 1986, Zeevat et al 1987]. $$$$$ There could still be a justif ication for encoding the two types of dependencies in the same argument stack.
The family of grammar models that are based on such formalisms include Generalized Phrase Structure Grammar (GPSG) [Gazdar et al 1985], Lexical Functional Grammar (LFG) [Bresnan 1982], Functional Unification Grammar (bUG) [Kay 1984], Head-Driven Phrase Structure Grammar (I-IPSG) [Pollard and Sag 1988], and Categorial Unification Grammar (CUG) [Karttunen 1986, Uszkoreit 1986, Zeevat et al 1987]. $$$$$ In this paper, the basic concepts of CUGs and simple examples of their application will be presented.

Use of unification (a core operation in HPSG) in CG dates at least as far back as Karttunen (1986, 1989), Uszkoreit (1986), and Zeevat (1988). $$$$$ (26b) Start in 1700.
Use of unification (a core operation in HPSG) in CG dates at least as far back as Karttunen (1986, 1989), Uszkoreit (1986), and Zeevat (1988). $$$$$ Their efficient and uniform way of encoding linguistic knowledge in well-understood and widely used representations makes them attractive for computational applications and for linguistic research.
Use of unification (a core operation in HPSG) in CG dates at least as far back as Karttunen (1986, 1989), Uszkoreit (1986), and Zeevat (1988). $$$$$ Their efficient and uniform way of encoding linguistic knowledge in well-understood and widely used representations makes them attractive for computational applications and for linguistic research.
