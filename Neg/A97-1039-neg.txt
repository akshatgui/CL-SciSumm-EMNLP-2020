 $$$$$ REALPRO is currently distributed with a socket interface which allows it to be run as a standalone server.
 $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.

These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ Figure 3 shows the architecture.
These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ Phenomena currently not handled automatically include certain types of &quot;fancy syntax&quot; such as clefts and it-clefts (though these can be generated by specifying the surface structure in the input), as well as long-distance dependencies such as These are books which I think you should buy (where which is an argument of buy).
These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ The row labeled &quot;Sec&quot; represents average execution time (over several test runs) for the sentence of the given input length, in seconds, on a PC with a 150MHz Pentium processor and 32 Megs of RAM.

We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ Figure 3 shows the architecture.
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ REALPRO is licensed free of charge to qualified academic institutions, and is licensed for a fee to commercial sites.
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ Normally, the user need not change the two grammar LKBs (the DSynt and SSynt grammars), unless the grammar of the target sublanguage is not a subset of English (or French).

 $$$$$ REALPRO is really a realizer shell, which allows for a (run-time) configuration using specially formatted Linguistic Knowledge Bases (LKBs) which state grammar rules, lexical entries, and feature defaults.
 $$$$$ Phenomena currently not handled automatically include certain types of &quot;fancy syntax&quot; such as clefts and it-clefts (though these can be generated by specifying the surface structure in the input), as well as long-distance dependencies such as These are books which I think you should buy (where which is an argument of buy).
 $$$$$ This has the advantage that the sentence planner can be unabashedly domain-specific, which is necessary in today's applications, since a broad-coverage implementation of a domain-independent theory of conceptual representations and their mapping to linguistic representations is still far from being realistic.

In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.
In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ The lexicon is an LKB which is used by all components.
In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ REALPRO can output text formatted as ASCII, HTML, or RTF.

We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ This means that REALPRO gives the developer control over the output, while taking care of the linguistic details.
We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ Each module draws on one or several LKBs.
We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ It is called the Deep-Syntactic Structure or &quot;DSyntS&quot; for short, and is inspired in this form by I. Mel'euk's Meaning-Text Theory (Mel'euk, 1988).

Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ The input to REALPRO is a syntactic dependency structure.
Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ The user may also want to change the defaults.
Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ For lexemes not in the lexicon it is necessary to specify the word class This illustrates that function words (do) need not be included in the input DSyntS, and that syntactic issues such as subject-verb and noun-determiner agreement are handled automatically.
Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ The system comes with LKBs for English; French is currently under development.

Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ Also, REALPRO does not map any sort of semantic labels to syntactic categories.
Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.
Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ These sentences are all of the form This small girl often claims that that boy often claims that Mary likes red wine, where the middle clause that that boy often claims is iterated for the longer sentences.

In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.
In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ These tasks, we assume, are handled by a separate component (such as a sentence planner).
In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ REALPRO is licensed free of charge to qualified academic institutions, and is licensed for a fee to commercial sites.
In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ However, the user may want to extend the lexicon if a lexeme with irregular morphology is not in it yet.

It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items).
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ REALPRO can output text formatted as ASCII, HTML, or RTF.
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ The following table shows the runtime for sentences of different lengths.
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.

As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ Also, REALPRO does not map any sort of semantic labels to syntactic categories.
As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ REALPRO is licensed free of charge to qualified academic institutions, and is licensed for a fee to commercial sites.
As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.

 $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.
 $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.
 $$$$$ This representation has the following salient features: Lexemes which are in the lexicon are in uppercase, those that are not are in lowercase.

Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ The complexity of the generation algorithm derives primarily from the tree traversals which must be performed twice, when passing from DSyntS to SSyntS, and from SSyntS to the DMorphS.
Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular.
Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items).
Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ The user may also want to change the defaults.

The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ The lexicon is an LKB which is used by all components.
The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ Presumably because of deeper facts about language, the grammar rules are quite small.
The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ The following ASCII-based specification corresponds to the DSyntS of sentence (2): In this definition, parentheses () are used to specify the scope of dependency while square brackets [] are used to specify features associated with a lexeme.

Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items).
Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ Figure 3 shows the architecture.
Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ The tree in Figure 2 yields (3): Note that REALPRO does not perform the task of lexical choice: the input to REALPRO must specify all meaning-bearing lexemes, including features for free pronominalization.
Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ This has the advantage that the sentence planner can be unabashedly domain-specific, which is necessary in today's applications, since a broad-coverage implementation of a domain-independent theory of conceptual representations and their mapping to linguistic representations is still far from being realistic.

The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ The lexicon is an LKB which is used by all components.
The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ Each module draws on one or several LKBs.
The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ For lexemes not in the lexicon it is necessary to specify the word class This illustrates that function words (do) need not be included in the input DSyntS, and that syntactic issues such as subject-verb and noun-determiner agreement are handled automatically.

The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ The following ASCII-based specification corresponds to the DSyntS of sentence (2): In this definition, parentheses () are used to specify the scope of dependency while square brackets [] are used to specify features associated with a lexeme.
The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation.

The surface realization process is performed by RealPro (Lavoie and Rambow (1997)). $$$$$ Systems that generate natural language output as part of their interaction with a user have become a major area of research and development.
The surface realization process is performed by RealPro (Lavoie and Rambow (1997)). $$$$$ Let n be the length of the output string (and hence an upper bound on the size of both DSyntS and SSyntS).

Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ In this technical note and demo we present a new off-theshelf realizer, REALPRO.
Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.
Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ At each node, each rule in the appropriate grammar (deep- or surface-syntactic) must be checked against the subtree rooted at that node.
Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ REALPRO is really a realizer shell, which allows for a (run-time) configuration using specially formatted Linguistic Knowledge Bases (LKBs) which state grammar rules, lexical entries, and feature defaults.

Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ It has an application programming interface (API), available in C++ and Java, which can be used to integrate REALPRO in applications.
Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ These tasks, we assume, are handled by a separate component (such as a sentence planner).
Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ The system comes with LKBs for English; French is currently under development.
