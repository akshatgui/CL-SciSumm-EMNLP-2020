 $$$$$ The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).
 $$$$$ However, the user may want to extend the lexicon if a lexeme with irregular morphology is not in it yet.
 $$$$$ Each module draws on one or several LKBs.

These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ For training, debugging, and demonstration purposes, REALPRO can also be used in interactive mode to realize sentences from ASCII files containing syntactic specifications.
These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).
These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ Figure 3 shows the architecture.
These realizers, along with RealPro (Lavoie and Rambow, 1997), accept tense as a parameter, but do not calculate it from a semantic representation of overlapping time intervals such as ours (though the Nigel grammar can calculate tense from speech, event, and reference time orderings, discussed below). $$$$$ REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation.

We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ REALPRO is licensed free of charge to qualified academic institutions, and is licensed for a fee to commercial sites.
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ Furthermore, there is no non-determinism in REALPRO: the input to REALPRO fully determines the output, though the input is a very abstract linguistic representation which is well suited for interfacing with knowledge-based applications.
We adopt Deep Syntactic Structures (DSyntSs) as a format for syntactic structures because they can be realized by the fast portable realizer RealPro (Lavoie and Rambow, 1997). $$$$$ In REALPRO, each transformation is handled by a separate module.

 $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
 $$$$$ For training, debugging, and demonstration purposes, REALPRO can also be used in interactive mode to realize sentences from ASCII files containing syntactic specifications.
 $$$$$ This reduces the tree matching algorithm to polynomial in n. Furthermore, while the branching factor of the input tree can in theory be n â€” 1, in practice it will be much smaller.
 $$$$$ REALPRO is really a realizer shell, which allows for a (run-time) configuration using specially formatted Linguistic Knowledge Bases (LKBs) which state grammar rules, lexical entries, and feature defaults.

In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ For training, debugging, and demonstration purposes, REALPRO can also be used in interactive mode to realize sentences from ASCII files containing syntactic specifications.
In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ Let n be the length of the output string (and hence an upper bound on the size of both DSyntS and SSyntS).
In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).
In this sense, they are functionally similar to the REALPRO system (Lavoie and Rambow, 1997). $$$$$ In REALPRO, each transformation is handled by a separate module.

We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ Each module draws on one or several LKBs.
We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.
We automatically converted the phrase structure output of the Collins parser into the syntactic dependency representation used by our syntactic realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ In REALPRO, each transformation is handled by a separate module.

Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994).
Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ Instead, such projects use an off-the-shelf realizer, among which PENMAN (Bateman, 1996) and SURGE/FUF (Elhadad and Robin, 1996) are probably the most popular.
Discourse relations are essentially rhetorical structure theory (RST) relations [Mann and Thompson, 1987], and messages are represented using a deep-syntactic representation, which is loosely based on RealPro [Lavoie and Rambow, 1997]. $$$$$ The input to REALPRO is a syntactic dependency structure.

Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ The tree in Figure 2 yields (3): Note that REALPRO does not perform the task of lexical choice: the input to REALPRO must specify all meaning-bearing lexemes, including features for free pronominalization.
Currently, FLO supports the LinGOrealiser (Carrollet al, 1999), but we are also looking at FLO modules for RealPro (Lavoie and Rambow, 1997) and FUF/SURGE (Elhadad et al, 1997). $$$$$ The input to REALPRO is a syntactic dependency structure.

In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ The average runtime for this input is 0.31 seconds, which is comparable to the runtime reported above for the 20 word sentence.
In the second phase, the sentence plan ranker (SPR) ranks sentence plans generated by the SPG, and then selects the top-ranked out put as input to the surface realizer, RealPro (Lavoie and Rambow, 1997). $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.

It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ (In our case, the number of nodes in the input DSyntS is equal to the number of words in the output string.)
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ For example, in order to generate saw (rather than the default seed) for the past tense of to see, the following entry would be added to the lexicon.
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ For lexemes not in the lexicon it is necessary to specify the word class This illustrates that function words (do) need not be included in the input DSyntS, and that syntactic issues such as subject-verb and noun-determiner agreement are handled automatically.
It passes propositions and a goal to the sentence-level realization module which uses templates to build the deep syntactic structures required by the RealPro realizer (Lavoie and Rambow, 1997) for generating a string that communicates the goal. $$$$$ The lexicon is an LKB which is used by all components.

As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation.
As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.
As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ The user may also want to change the defaults.
As rightly pointed out by Belz (2008), traditional wide coverage realizers such as KPML (Bateman et al, 2005), FUF/SURGE (Elhadad and Robin, 1996) and RealPro (Lavoie and Rambow, 1997), which were also intended as off-the-shelf plug-in realizers still tend to require a considerable amount of work for integration and fine-tuning of the grammatical and lexical resources. $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.

 $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.
 $$$$$ We conclude that the uniformity of the syntactic constructions found in the sentences used in the above test sequence does not influence the results.
 $$$$$ Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994).

Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ This has the advantage that the sentence planner can be unabashedly domain-specific, which is necessary in today's applications, since a broad-coverage implementation of a domain-independent theory of conceptual representations and their mapping to linguistic representations is still far from being realistic.
Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ The input to REALPRO is a syntactic dependency structure.
Realization is achieved with the RealPro surface realizer (Lavoie and Rambow, 1997). $$$$$ The architecture of REALPRO is based on MeaningText Theory, which posits a sequence of correspondences between different levels of representation.

The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).
The top ranked sentence plan output by the SPR is input to the RealPro surface realizer which produces a surface linguistic utterance (Lavoie and Rambow, 1997). $$$$$ It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items).

Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ For example, in order to generate saw (rather than the default seed) for the past tense of to see, the following entry would be added to the lexicon.
Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ We are grateful to R. Kittredge, T. Korelsky, D. McCullough, A. Nasr, E. Reiter, and M. White as well as to three anonymous reviewers for helpful comments about earlier drafts of this technical note and/or about REALPRO.
Finally, surface realization is performed by interfacing RealPro (Lavoie and Rambow, 1997) with a language model. $$$$$ These sentences are all of the form This small girl often claims that that boy often claims that Mary likes red wine, where the middle clause that that boy often claims is iterated for the longer sentences.

The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ REALPRO is currently distributed with a socket interface which allows it to be run as a standalone server.
The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ REALPRO is currently distributed with a socket interface which allows it to be run as a standalone server.
The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994).
The realizer takes each sentence in the story and reformulates it into input compatible with the RealPro (Lavoie and Rambow,1997) text generation engine. $$$$$ REALPRO is derived from previous systems (Iordanskaja et al., 1988; Iordanslcaja et al., 1992; Rambow and Korelsky, 1992), but represents a new design and a completely new implementation.

The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ It is called the Deep-Syntactic Structure or &quot;DSyntS&quot; for short, and is inspired in this form by I. Mel'euk's Meaning-Text Theory (Mel'euk, 1988).
The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ (Recall that not all words in the input representation need be in the lexicon.)
The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ The following ASCII-based specification corresponds to the DSyntS of sentence (2): In this definition, parentheses () are used to specify the scope of dependency while square brackets [] are used to specify features associated with a lexeme.
The top-ranked candidateis selected for presentation and verbalized using a language model interfaced with RealPro (Lavoie and Rambow, 1997), a text generation engine. $$$$$ The row labeled &quot;Length&quot; refers to the length of the output string in words.

The surface realization process is performed by RealPro (Lavoie and Rambow (1997)). $$$$$ As mentioned in Section 3, REALPRO is configured by specifying several LKBs.
The surface realization process is performed by RealPro (Lavoie and Rambow (1997)). $$$$$ The input to REALPRO is a syntactic dependency structure.

Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ The development of REALPRO was partially supported by USAF Rome Laboratory under contracts F3060293-C-0015, F30602-94-C-0124, and F30602-92-C-0163, and by DARPA under contracts F30602-95-2-0005 and F30602-96-C-0220.
Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ The lexicon is an LKB which is used by all components.
Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO (Lavoie and Rambow, 1997), ALETH GEN (Coch, 1996), KPML (Bateman, 1997), FUF/SURGE (Elhadad and Robin, 1996), HALO GEN (Langkilde, 2000), YAG (McRoy et al, 2000), and OPENCCG (White, 2006). Realisation involves two logically distinguishable tasks. $$$$$ This reduces the tree matching algorithm to polynomial in n. Furthermore, while the branching factor of the input tree can in theory be n â€” 1, in practice it will be much smaller.

Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ Phenomena currently not handled automatically include certain types of &quot;fancy syntax&quot; such as clefts and it-clefts (though these can be generated by specifying the surface structure in the input), as well as long-distance dependencies such as These are books which I think you should buy (where which is an argument of buy).
Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ (Recall that not all words in the input representation need be in the lexicon.)
Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string) (Reiter, 1994).
Figure 2 illustrates a DSyntS from a meteorological application, MeteoCogent (Kittredge and Lavoie, 1998), represented using the standard graphical notation and also the RealPro ASCII notation used internally in the framework (Lavoie and Rambow, 1997). $$$$$ While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.
