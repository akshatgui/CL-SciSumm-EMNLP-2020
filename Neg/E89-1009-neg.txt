Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ The right-hand sides of definitional sentences are lvalues, which can be simple atoms, inheritance descriptors (quoted or unquoted), or lists of lvalues.
Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ What we wanted was for cAT:<sing> to inherit from v:<plur>, that is, from the global initial context.
Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ Put another way, the former provide the database definition language whilst the latter provide the query language: the useful premises will standardly all be statements, whilst the interesting theorems will standardly all be statements (though the language itself also allows the former to be derived as theorems and the latter to be used as premises).
Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ We are grateful to our referees and to Jon Cunningham, Walter Daelemans, David Israel, Bill Keller, Tom Khabaza, Ewan Klein, Bob Moore, Fernando Pereira, Allan Ramsay and Chris Thornton for clarifying our thinking about aspects of DATR.

Analyses in Network Morphology are implemented in DATR, a formal language for representing lexical knowledge designed and implemented by Roger Evans and Gerald Gazdar (Evans and Gazdar, 1989). $$$$$ However, many such networks have been realized in the context of programming systems or programming languages that leave their precise meaning unclear.
Analyses in Network Morphology are implemented in DATR, a formal language for representing lexical knowledge designed and implemented by Roger Evans and Gerald Gazdar (Evans and Gazdar, 1989). $$$$$ We are grateful to our referees and to Jon Cunningham, Walter Daelemans, David Israel, Bill Keller, Tom Khabaza, Ewan Klein, Bob Moore, Fernando Pereira, Allan Ramsay and Chris Thornton for clarifying our thinking about aspects of DATR.
Analyses in Network Morphology are implemented in DATR, a formal language for representing lexical knowledge designed and implemented by Roger Evans and Gerald Gazdar (Evans and Gazdar, 1989). $$$$$ The syntax of DATR, especially the use of value terminated attribute trees to encode information derives from PATR (Shieber 1986).

A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ Similarly Al inherits by default from CAT, and A2 from Al.
A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ We adopt the following abbreviation convention for sets of sentences about a single node:
A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ <form> == <&quot;<gen>&quot; &quot;<num>&quot; &quot;<case>&quot;>.
A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ A string is in DATR, (with respect to given set: ATOM of [atom]s and NODE of [node]s) if it is [sentence] as defined by the following set 01 rules: There are two kinds of sentence, those containing `-==' and those containing `='.

DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ The present paper is primarily concerned with (iii), though the examples used may hint at our strategy in respect of (i) and (ii).
DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ <form> == <&quot;<gen>&quot; &quot;<num>&quot; &quot;<case>&quot;>.
DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ The other component (path or node) is unchanged, that is, it is the same as the corresponding component on the left-hand-side of the rule specifying the inheritance.

The original publications on DATR sought to provide the language with (1) a formal theory of inference (Evans and Gazdar, 1989a) and (2) a model-theoretic semantics (Evans and Gazdar, 1989b). $$$$$ Put another way, the former provide the database definition language whilst the latter provide the query language: the useful premises will standardly all be statements, whilst the interesting theorems will standardly all be statements (though the language itself also allows the former to be derived as theorems and the latter to be used as premises).
The original publications on DATR sought to provide the language with (1) a formal theory of inference (Evans and Gazdar, 1989a) and (2) a model-theoretic semantics (Evans and Gazdar, 1989b). $$$$$ Gazdar's work was supported by grants from the ESRC and SERC.
The original publications on DATR sought to provide the language with (1) a formal theory of inference (Evans and Gazdar, 1989a) and (2) a model-theoretic semantics (Evans and Gazdar, 1989b). $$$$$ Gazdar's work was supported by grants from the ESRC and SERC.
The original publications on DATR sought to provide the language with (1) a formal theory of inference (Evans and Gazdar, 1989a) and (2) a model-theoretic semantics (Evans and Gazdar, 1989b). $$$$$ In fact, the following two sentence schemas are entirely equivalent: Rules II, III, and IV implement a local notion of inheritance in the sense that the new node or path specifications are interpreted in the current local context.

The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ We are grateful to our referees and to Jon Cunningham, Walter Daelemans, David Israel, Bill Keller, Tom Khabaza, Ewan Klein, Bob Moore, Fernando Pereira, Allan Ramsay and Chris Thornton for clarifying our thinking about aspects of DATR.
The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ We are grateful to our referees and to Jon Cunningham, Walter Daelemans, David Israel, Bill Keller, Tom Khabaza, Ewan Klein, Bob Moore, Fernando Pereira, Allan Ramsay and Chris Thornton for clarifying our thinking about aspects of DATR.
The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ The path closure contains all those theorems which can be inferred by default from T. To illustrate path closure, consider the following example theory: The situation is slightly more complicated with sentences that have paths on their right-hand sides.
The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ The principal intended area of application is the representation of lexical entries for natural language processing, and we use examples from this domain throughout.

Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ In the light of Braclunan (1985), Ether. ington (1988) and much other recent work, it ha become apparent that the formal properties oi notations intended to represent inheritance arc highly problematic.
Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ We adopt the following abbreviation convention for sets of sentences about a single node:
Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ Evans's work was supported by a grant from the SERC.
Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ Evans's work was supported by a grant from the SERC.

This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ The right-hand sides of extensional sentences are values, that is, simple atoms or lists of atoms/nested lists enclosed in (...).
This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ In the light of Braclunan (1985), Ether. ington (1988) and much other recent work, it ha become apparent that the formal properties oi notations intended to represent inheritance arc highly problematic.
This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ a declarative language for representing a restricted class of inheritance networks, permitting both multiple and default inheritance.
