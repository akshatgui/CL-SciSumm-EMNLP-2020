Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ <form> == <&quot;<gen>&quot; &quot;<num>&quot; &quot;<case>&quot;>.
Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ We adopt the following abbreviation convention for sets of sentences about a single node:
Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ This is because v:<sing> inherits from cAT:<sing>, which inherits (locally) from cAT:<plur>, which is not defined.
Several lexical representation formalisms addressing these desiderata have been proposed, e.g. DATR [Evans and Gazdar 1989a, 1989b, 1990]; LRL [Copestake, 1992]; [Russell et al 1991]. $$$$$ In addition to the conventional inference defined above, DATR has a nonmonotonic notion of inference by default: each definitional sentence about some node/path combination implicitly determines additional sentences about all the extensions to the path at that node for which no more specific definitional sentence exists in the theory.

Analyses in Network Morphology are implemented in DATR, a formal language for representing lexical knowledge designed and implemented by Roger Evans and Gerald Gazdar (Evans and Gazdar, 1989). $$$$$ Gazdar's work was supported by grants from the ESRC and SERC.
Analyses in Network Morphology are implemented in DATR, a formal language for representing lexical knowledge designed and implemented by Roger Evans and Gerald Gazdar (Evans and Gazdar, 1989). $$$$$ The principal intended area of application is the representation of lexical entries for natural language processing, and we use examples from this domain throughout.
Analyses in Network Morphology are implemented in DATR, a formal language for representing lexical knowledge designed and implemented by Roger Evans and Gerald Gazdar (Evans and Gazdar, 1989). $$$$$ The path closure contains all those theorems which can be inferred by default from T. To illustrate path closure, consider the following example theory: The situation is slightly more complicated with sentences that have paths on their right-hand sides.

A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ The principal intended area of application is the representation of lexical entries for natural language processing, and we use examples from this domain throughout.
A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ In this paper we present the syntax and inference mechanisms for language.
A well-known formalism following this approach is DATR [Evans and Gazdar, 1989]. $$$$$ Now from this theory we can derive all the following theorems concerning plural: and the following theorem concerning singular: A2: <sing> = en.

DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ We are grateful to our referees and to Jon Cunningham, Walter Daelemans, David Israel, Bill Keller, Tom Khabaza, Ewan Klein, Bob Moore, Fernando Pereira, Allan Ramsay and Chris Thornton for clarifying our thinking about aspects of DATR.
DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ P2 is a strict extension if Q is nonempty.
DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ Rule II says that if we have a theorem Nl:P1 == L. where L contains N2:P2 as a subexpression, and we also have a theorem N2:P2 == G., then we can derive a theorem in which all occurrences of N2:P2 in L are replaced by G. In the simplest case, this means that we can interpret a sentence of the form N1:P1==N2:P2. as an inheritance specification meaning &quot;the value of P1 at Ni is inherited from P2 at N2&quot;.
DATR was originally introduced by Evans and Gazdar (1989a; 1989b) as a simple, non monotonic language for representing lexical inheritance hierarchies. $$$$$ Once the context is established, the descriptor specifies a new node, a new lpath, or both to be used to determine the inherited value.

The original publications on DATR sought to provide the language with (1) a formal theory of inference (Evans and Gazdar, 1989a) and (2) a model-theoretic semantics (Evans and Gazdar, 1989b). $$$$$ The present paper is primarily concerned with (iii), though the examples used may hint at our strategy in respect of (i) and (ii).
The original publications on DATR sought to provide the language with (1) a formal theory of inference (Evans and Gazdar, 1989a) and (2) a model-theoretic semantics (Evans and Gazdar, 1989b). $$$$$ a declarative language for representing a restricted class of inheritance networks, permitting both multiple and default inheritance.

The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ Inheritance networks (&quot;semantic nets&quot;) provide an intuitively appealing way of thinking about the representation of various kinds of knowledge.
The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ Once the context is established, the descriptor specifies a new node, a new lpath, or both to be used to determine the inherited value.
The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ We adopt the following abbreviation convention for sets of sentences about a single node:
The problem of constructing an explicit theory of infhrence for DATR was originally addressed in (Evans and Gazdar, 1989a). $$$$$ DATR has seven syntactic rules of inference falling into three groups.

Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ a declarative language for representing a restricted class of inheritance networks, permitting both multiple and default inheritance.
Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ The first rule just provides us with a trivial route from definitional to extensional sentences: Note that V must be a value (not an lvalue) here, otherwise the consequent would not be wellformed.
Consider for example the following rule of inherence, adapted from (Evans and Gazdar, 1989a). $$$$$ The expression PAQ, where P and Q are paths, denotes the path formed by concatenating components of P and Q.

This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ <form> == <&quot;<gen>&quot; &quot;<num>&quot; &quot;<case>&quot;>.
This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ The goal of the is the design of a simple language that (i) has the necessary expressive power to encode the lexical entries presupposed by contemporary work in the unification grammar tradition, (ii) can express all the evident generalizations about such entries, (iii) has an explicit theory of inference, (iv) is computationally tractable, and (v) has an explicit declarative semantics.
This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ We adopt the following abbreviation convention for sets of sentences about a single node:
This fulfills one of the original objectives of the DATR programme, as set out in (Evans and Gazdar, 1989a; Evans and Gazdar, 1989b), to provide the language with an explicit theory of inference. $$$$$ Now from this theory we can derive all the following theorems concerning plural: and the following theorem concerning singular: A2: <sing> = en.
