Identifying sets of objects originally followed the incremental algorithm (Dale and Reiter 1995), as in (Bateman 1999), (Stone 2000) and (Krahmer et al 2003), with limited coverage, since only few attributes typically apply to all intended referents and to none of the potential distractors. $$$$$ It is worth stressing that the cost function is global: It determines the costs of entire graphs.
Identifying sets of objects originally followed the incremental algorithm (Dale and Reiter 1995), as in (Bateman 1999), (Stone 2000) and (Krahmer et al 2003), with limited coverage, since only few attributes typically apply to all intended referents and to none of the potential distractors. $$$$$ This article describes a new approach to the generation of referring expressions.
Identifying sets of objects originally followed the incremental algorithm (Dale and Reiter 1995), as in (Bateman 1999), (Stone 2000) and (Krahmer et al 2003), with limited coverage, since only few attributes typically apply to all intended referents and to none of the potential distractors. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.

For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ Optimization has not been the focus of this article, but we came across various heuristic strategies that would speed up the algorithm.
For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ In practice, the situation will most often be somewhere between these extremes.
For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ The graph-theoretical reformulation of the incremental algorithm does not fully exploit the possibilities offered by the graph framework and the use of cost functions.
For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.

(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.
(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ Now the content determination problem for referring expressions can be formulated as a graph construction problem.

We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data: this algorithm provides the ability to make use of different search strategies and weighting mechanisms when adding properties to a description, and such a mechanism might be used, for example, to counterbalance the Relational Algorithm's heavy bias towards the relations in this domain. $$$$$ This article describes a new approach to the generation of referring expressions.
We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data: this algorithm provides the ability to make use of different search strategies and weighting mechanisms when adding properties to a description, and such a mechanism might be used, for example, to counterbalance the Relational Algorithm's heavy bias towards the relations in this domain. $$$$$ Thanks are also due to Paul Piwek, Mari¨et Theune, Ielka van der Sluis, and the anonymous reviewers for helpful comments on an earlier version of this article.
We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data: this algorithm provides the ability to make use of different search strategies and weighting mechanisms when adding properties to a description, and such a mechanism might be used, for example, to counterbalance the Relational Algorithm's heavy bias towards the relations in this domain. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data: this algorithm provides the ability to make use of different search strategies and weighting mechanisms when adding properties to a description, and such a mechanism might be used, for example, to counterbalance the Relational Algorithm's heavy bias towards the relations in this domain. $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.

The major exceptions here may be (a) van Deemter's (2002) algorithm for sets; recall that we excluded from the human data used here 16 references that involved sets; and, as noted above, (b) Krahmer et als (2003) graph-based approach to GRE, which may perform better than the Relational Algorithm on descriptions using relations. $$$$$ This aspect is largely responsible for the computational efficiency of the algorithm (it has a polynomial complexity), but Dale and Reiter (1995, page 248) also claim that it is “psychologically realistic.” They point out that sometimes people may describe an object as “the white bird” even though the simpler “the bird” would have been sufficient (cf.
The major exceptions here may be (a) van Deemter's (2002) algorithm for sets; recall that we excluded from the human data used here 16 references that involved sets; and, as noted above, (b) Krahmer et als (2003) graph-based approach to GRE, which may perform better than the Relational Algorithm on descriptions using relations. $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
The major exceptions here may be (a) van Deemter's (2002) algorithm for sets; recall that we excluded from the human data used here 16 references that involved sets; and, as noted above, (b) Krahmer et als (2003) graph-based approach to GRE, which may perform better than the Relational Algorithm on descriptions using relations. $$$$$ This article describes a new approach to the generation of referring expressions.

They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.
They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ For instance, if G and H are planar (simple) graphs the problem can be solved in time linear in the number of vertices of G (Eppstein 1999).
They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ For the sake of transparency we have not modeled the relations between the dogs and the distant doghouses (i.e., between d1 and d4 and between d2 and d3).
They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ Each graph consists of 4n looping edges (representing properties) and 3n nonlooping edges (representing spatial relations), again with n the number of vertices.

Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.
Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.
Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ (1) There are many attractive and well-understood algorithms for dealing with graph structures (see, e.g., Gibbons [1985], Cormen, Leiserson, and Rivest [1990], or Chartrand and Oellermann [1993]).

Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ First, from the graph-theoretical perspective, the generation of relational descriptions poses no problems.
Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ Otherwise we start with the matching 7r.v = w and try to expand it recursively.
Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.
Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.

In addition, we plan to experiment with assigning costs to planning operators in a metric planning problem (Hoffmann, 2002) in order to model the cognitive cost of an RE (Krahmer et al, 2003) and compute minimal-cost instruction sequences. $$$$$ Intuitively, d1 can be distinguished from d2 only using its relation to the doghouse d3.
In addition, we plan to experiment with assigning costs to planning operators in a metric planning problem (Hoffmann, 2002) in order to model the cognitive cost of an RE (Krahmer et al, 2003) and compute minimal-cost instruction sequences. $$$$$ 5.3.1 Plurals.
In addition, we plan to experiment with assigning costs to planning operators in a metric planning problem (Hoffmann, 2002) in order to model the cognitive cost of an RE (Krahmer et al, 2003) and compute minimal-cost instruction sequences. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.

(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ It is readily seen that this algorithm will output the shortest possible description, if one exists.
(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ Note that this approach is also able to deal with dynamic scenes; it can track changes in the workspace (which is required for handling the assembly process).
(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ Formally: (The H.neighbors(y) are the vertices in H that are adjacent to y, that is, those vertices that are connected to y by an edge.)
(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ Basically, a planar graph is one that can be drawn on a plane in such a way that there are no crossing edges (thus, for instance, the graph in Figure 3 is planar, as is any graph with only four vertices).

 $$$$$ In this respect it is comparable to the Dale and Haddock (1991) algorithm, granted that here the problems with infinite recursions do not arise, since a particular edge is either present in a graph or not.
 $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
 $$$$$ There are two ways in which a nonplanar graph G can be turned into a planar one G' (see Liebers [2001] for a recent overview of planarization algorithms): Either the graph G can be pruned (using vertex or edge deletion) or it can be extended (for instance, using vertex splitting or by inserting vertices at crossings).
 $$$$$ Messmer and Bunke (1995, 1998) describe a method that converts the known graph (or model graph, as they call it) into a decision tree.

Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ This article describes a new approach to the generation of referring expressions.
Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ We end with some concluding remarks and a discussion of future research directions in Section 6.
Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ A disadvantage of the extension approach is that we lose the intuitive one-to-one correspondence between potential target objects and vertices in the scene graph, since the additional vertices only serve the purpose of planarizing the graph and do not represent objects in a scene.

The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ Thanks are also due to Paul Piwek, Mari¨et Theune, Ielka van der Sluis, and the anonymous reviewers for helpful comments on an earlier version of this article.
The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ Moreover, the approach to relations proposed here is fully general: It applies to all n-ary relations, not just binary ones.
The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ Nevertheless, it is worthwhile to look for classes of graphs for which the subgraph isomorphism problem can be solved more efficiently, without postulating upper bounds.

The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.
The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ In this article, we describe a straightforward branch and bound algorithm for finding the relevant subgraphs in which cost functions are used to guide the search process.
The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.
The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ But the main advantage is that the complexity of the new subgraph isomorphism algorithm is only quadratic in the number of vertices of the input referring graph.

We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ The presence of a cost function, however, is potentially very useful, since it allows us to avoid eliminating comparatively cheap (and thus more frequently selected) edges.
We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ That is, adding an edge e to a graph G should never result in a graph cheaper than G. Formally: dG' C G de E EG: cost(G') < cost(G' + e) The monotonicity assumption helps reduce the search space, since extensions of subgraphs with a cost greater than the best subgraph found up to that point can safely be ignored.
We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ In terms of the graphtheoretical framework, this would go as follows.
We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ Some algorithms are fully formalized and come with explicit characterizations of their complexity (e.g., Dale and Reiter 1995; van Deemter 2000); others are more conceptual and concentrate on exploring new directions (e.g., Stone and Webber 1998).

For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ The edges associated with the intended referent should be sorted on their descriptive power, which is inversely proportional to the number of occurrences of that particular edge in the scene graph.
For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ At each recursion step a fresh and as yet unmatched vertex y from VH is selected that is adjacent to one of the vertices in the current domain of 7r (notated dom(7r)).
For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ That by itself does not guarantee that type is always included.

Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ This article describes a new approach to the generation of referring expressions.
Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.
Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.

A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ Next the set of distractors is calculated.
A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ It is readily seen that this algorithm will output the shortest possible description, if one exists.

The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ This graph models the respective spatial relations between the two chihuahuas, between the two doghouses, and between each dog and the nearest doghouse.
The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ (1) There are many attractive and well-understood algorithms for dealing with graph structures (see, e.g., Gibbons [1985], Cormen, Leiserson, and Rivest [1990], or Chartrand and Oellermann [1993]).
The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ Here, for the sake of illustration, we briefly describe a weighted greedy pruning algorithm that turns an arbitrary scene graph G = (VG, EG) with n vertices and m edges into a planar graph G' = (VG,, EGI) with n vertices and at most m edges.
The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.

In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ Thanks are also due to Paul Piwek, Mari¨et Theune, Ielka van der Sluis, and the anonymous reviewers for helpful comments on an earlier version of this article.
In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ In terms of the graph perspective, this is the set of vertices in the scene graph G (other than the target vertex v) to which the graph H refers.
In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.
In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ We would like to thank Dennis van Oort and Denis Gerritsen for their help in the implementation and Alexander Koller and Kees van Deemter for some very useful discussions.
