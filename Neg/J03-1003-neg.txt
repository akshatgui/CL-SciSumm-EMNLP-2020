Identifying sets of objects originally followed the incremental algorithm (Dale and Reiter 1995), as in (Bateman 1999), (Stone 2000) and (Krahmer et al 2003), with limited coverage, since only few attributes typically apply to all intended referents and to none of the potential distractors. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
Identifying sets of objects originally followed the incremental algorithm (Dale and Reiter 1995), as in (Bateman 1999), (Stone 2000) and (Krahmer et al 2003), with limited coverage, since only few attributes typically apply to all intended referents and to none of the potential distractors. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.

For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ In addition, the user has the possibility of specifying the cost function in whatever way he or she sees fit.
For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ Thanks are also due to Paul Piwek, Mari¨et Theune, Ielka van der Sluis, and the anonymous reviewers for helpful comments on an earlier version of this article.
For the first step, attribute selection, we use a version of the Graph-based REG algorithm of Krahmer et al (2003). $$$$$ Finally, it is worth stressing that the NP-completeness is due to the presence of edges representing relations between different vertices.

(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ A disadvantage of the extension approach is that we lose the intuitive one-to-one correspondence between potential target objects and vertices in the scene graph, since the additional vertices only serve the purpose of planarizing the graph and do not represent objects in a scene.
(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ In particular, the algorithm will fail for objects that can be uniquely described only with K + 1 (or more) edges.
(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ Thanks are also due to Paul Piwek, Mari¨et Theune, Ielka van der Sluis, and the anonymous reviewers for helpful comments on an earlier version of this article.
(in line with the human preference for basic level values; cf. Krahmer et al 2003. $$$$$ This implies that only the first test graph is fully connected.

We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data $$$$$ Informally, we say that a vertex (“the intended referent”) from a graph H refers to a given entity in the scene graph G iff the graph H can be “placed over” the scene graph G in such a way that the vertex being referred to is “placed over” the vertex of the given entity in G and each edge from H with label l can be “placed over” an edge from G with the same label.
We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data $$$$$ Thus, for each v E VH and for each e E EH: cost(v) = cost(e) = 1.
We are currently exploring whether Krahmer et als (2003) graph-based approach to GRE is able to provide a better coverage of the data $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.

The major exceptions here may be (a) van Deemter's (2002) algorithm for sets; recall that we excluded from the human data used here 16 references that involved sets; and, as noted above, (b) Krahmer et als (2003) graph-based approach to GRE, which may perform better than the Relational Algorithm on descriptions using relations. $$$$$ Next we order the remaining edges from the scene graph RG = EG\OG with respect to their costs; the cheapest one comes first, the more expensive ones come later, in order of increasing expense.
The major exceptions here may be (a) van Deemter's (2002) algorithm for sets; recall that we excluded from the human data used here 16 references that involved sets; and, as noted above, (b) Krahmer et als (2003) graph-based approach to GRE, which may perform better than the Relational Algorithm on descriptions using relations. $$$$$ 5.3.2 Context and Salience.
The major exceptions here may be (a) van Deemter's (2002) algorithm for sets; recall that we excluded from the human data used here 16 references that involved sets; and, as noted above, (b) Krahmer et als (2003) graph-based approach to GRE, which may perform better than the Relational Algorithm on descriptions using relations. $$$$$ ), and the performance results will vary with the properties of the scene graph.

They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ ), and the set of selected properties is {dog, brown, small}, which a linguistic realizer might express as “the small brown dog.” This is a successful distinguishing description but not a minimal one: The property brown is, strictly speaking, made redundant by the later inclusion of the property small.
They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.
They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
They distinguish three types of preciseness, i.e. precise, imprecise, or very imprecise pointing, and integrate pointing into the graph-based algorithm proposed by [Krahmer et al, 2003]. $$$$$ The current approach has four main advantages: (1) Graph structures have been studied extensively, and by moving to a graph perspective we get direct access to the many theories and algorithms for dealing with graphs; (2) many existing generation algorithms can be reformulated in terms of graphs, and this enhances comparison and integration of the various approaches; (3) the graph perspective allows us to solve a number of problems that have plagued earlier algorithms for the generation of referring expressions; and (4) the combined use of graphs and cost functions paves the way for an integration of rule-based generation techniques with more recent stochastic approaches.

Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ Next the set of distractors is calculated.
Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ At this stage in the generation process only graphs with costs lower than five points are worth investigating.
Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ The constructed subgraph should refer to each of the vertices in the set W, but not to any of the vertices in the scene graph outside this set.
Algorithms for the generation of referring expressions commonly use this as a starting point, proposing that properties are organized in some linear order (Dale and Reiter, 1995) or weighted order (Krahmer et al, 2003) as input. $$$$$ (In the next section we describe a number of more interesting cost functions and discuss the impact these have on the output of the algorithm.)

Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ The costs associated with this graph are five points (two vertices and three edges).
Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ There are two ways in which a nonplanar graph G can be turned into a planar one G' (see Liebers [2001] for a recent overview of planarization algorithms): Either the graph G can be pruned (using vertex or edge deletion) or it can be extended (for instance, using vertex splitting or by inserting vertices at crossings).
Similarly, one of the strengths of the Graph-Based Algorithm (Krahmer et al, 2003) is its ability to generate expressions that involve relations between objects, and these include spatial ones (next to, on top of, etc.). $$$$$ The graph perspective has four main advantages.

In addition, we plan to experiment with assigning costs to planning operators in a metric planning problem (Hoffmann, 2002) in order to model the cognitive cost of an RE (Krahmer et al, 2003) and compute minimal-cost instruction sequences. $$$$$ Each graph consists of 4n looping edges (representing properties) and 3n nonlooping edges (representing spatial relations), again with n the number of vertices.
In addition, we plan to experiment with assigning costs to planning operators in a metric planning problem (Hoffmann, 2002) in order to model the cognitive cost of an RE (Krahmer et al, 2003) and compute minimal-cost instruction sequences. $$$$$ If it is, e is added to EGI.
In addition, we plan to experiment with assigning costs to planning operators in a metric planning problem (Hoffmann, 2002) in order to model the cognitive cost of an RE (Krahmer et al, 2003) and compute minimal-cost instruction sequences. $$$$$ It rules out d4 (which is a cat).

(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ In general, there is no a priori reason to assume that our scene representations will be planar.
(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ Now the cheapest edges (i.e, those expressing type information) should be tried first, and more expensive edges should be tried later.
(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ (2) By defining different cost functions for the graph perspective, we can simulate (and improve) some of the well-known algorithms for the generation of referring expressions mentioned above.
(Krahmer et al, 2003) describe an approach to GRE in which a cost function guides search for a suitable description, and show that some existing GRE algorithms fit into this framework. $$$$$ The only hard requirement cost functions have to fulfill is monotonicity.

 $$$$$ An object that has been mentioned in recent context is linguistically salient and hence can often be referred to using fewer properties; an animal that is first described as “the large black dog with the hanging ears” may subsequently be referred to using an anaphoric description such as “the dog.” Krahmer and Theune (2002) model this phenomenon by assigning salience weights (sws) to objects.
 $$$$$ We propose to formalize a scene (i.e., a domain of objects and their properties and relations) as a labeled directed graph and describe the content selection problem (which properties and relations to include in a description for an object?) as a subgraph construction problem.
 $$$$$ The result is a maximal planar subgraph G' of the scene graph G that differs from G only possibly in the deletion of certain relatively expensive nonlooping (relational) edges.
 $$$$$ For instance, when discussing domestic animals, it seems likely that a human speaker would first describe an animal by its type (is it a dog? is it a cat?).

Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ Moreover, with EG(v, w) we refer to the set of edges in EG from v to w; that is, EG(v, w) = {e E EG  |e = (v, l, w), for l E L}.
Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ The outline of this article is as follows.
Recent work has formalised NLG algorithms for referring expression generation in terms of algorithms for finding an appropriate subgraph of a graph representing the domain knowledge [Krahmer et al, 2003]. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.

The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ Here, for the sake of illustration, we briefly describe a weighted greedy pruning algorithm that turns an arbitrary scene graph G = (VG, EG) with n vertices and m edges into a planar graph G' = (VG,, EGI) with n vertices and at most m edges.
The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ To further illustrate the flexibility of the graph perspective, we briefly discuss two such aspects.
The Graph based algorithm (Krahmer et al, 2003), for example, searches for the cheapest description for a target, and distinguishes cheap attributes (such as color) from more expensive ones (orientation). $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.

The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ Each graph consists of 4n looping edges (representing properties) and 3n nonlooping edges (representing spatial relations), again with n the number of vertices.
The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ (1) There are many attractive and well-understood algorithms for dealing with graph structures (see, e.g., Gibbons [1985], Cormen, Leiserson, and Rivest [1990], or Chartrand and Oellermann [1993]).
The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ Next we order the remaining edges from the scene graph RG = EG\OG with respect to their costs; the cheapest one comes first, the more expensive ones come later, in order of increasing expense.
The use of vertex facts indicates that the representation is inspired by the Graph approach to referring expression generation [Krahmer et al, 2003]. $$$$$ There is no single property that distinguishes the target object d1 from the distractors {d2, d3, d4}.

We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ This is known as the content determination problem for referring expressions.
We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ Cost functions are used to guide the search process and to give preference to some solutions over others.
We use the Graph-based algorithm of Krahmer et al (2003) for attribute selection. $$$$$ Thanks are also due to Paul Piwek, Mari¨et Theune, Ielka van der Sluis, and the anonymous reviewers for helpful comments on an earlier version of this article.

For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ It means only that type information is, strictly speaking, not necessary to distinguish the intended referent from the distractors.
For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ Optimization has not been the focus of this article, but we came across various heuristic strategies that would speed up the algorithm.
For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ To decide which information to include in a referring expression for an object v E V, we construct a connected directed labeled graph over the set of labels L and an arbitrary set of vertices, but including v. A graph is connected iff there is a path (a list of vertices in which each vertex has an edge from itself to the next vertex) between each pair of vertices.
For attribute selection, we use the graph-based algorithm of Krahmer et al (2003), one of the highest scoring attribute selection methods in the TUNA 2008 Challenge (Gatt et al (2008), table 11). $$$$$ The incremental algorithm considers properties for selection in a predetermined order, based on the idea that human speakers and listeners prefer certain kinds of properties (or attributes) when describing objects from a given domain.

Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ This gives us the freedom to assign edges labeled with a common color value (e.g., brown) a lower cost than edges labeled with obscure type values, such as Polish owczarek nizinny sheepdog.
Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ The algorithm terminates when RG = 0.
Although Krahmer et al claim that their method can handle n-ary relations (Krahmer et al, 2003), they provide node tails. $$$$$ Section 4 contains a sketch of the basic generation algorithm, which is illustrated with a worked example.

A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ We propose to formalize a scene (consisting of a set of objects with various properties and relations) as a labeled directed graph and describe content selection (which properties to include in a referring expression) as a subgraph construction problem.
A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ This graph models the respective spatial relations between the two chihuahuas, between the two doghouses, and between each dog and the nearest doghouse.
A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ The algorithm terminates when RG = 0.
A possible direction would be to enhance the algorithm proposed by Krahmer et al (Krahmer et al., 2003). $$$$$ The presence of a cost function, however, is potentially very useful, since it allows us to avoid eliminating comparatively cheap (and thus more frequently selected) edges.

The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ At this stage in the generation process only graphs with costs lower than five points are worth investigating.
The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ For instance, it is unlikely that the co-occurrence of edges is fully independent; a husky is likely to be white, and a chihuahua is not.
The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ But when considering all pairs of properties the algorithm will find that one such pair rules out all distractors, namely, small and dog; “the small dog” is a successful and minimal distinguishing description for d1.
The graph-based REG algorithm (Krahmer et al, 2003), for example, models preferences in terms of costs, where cheaper is more preferred. $$$$$ The algorithm terminates when RG = 0.

In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ The basic decision problem for subgraph isomorphism (i.e., testing whether a graph H is isomorphic to a subgraph of G) is known to be NP-complete (see, e.g., Garey and Johnson [1979]).
In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ This article describes a new approach to the generation of referring expressions.
In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ This article describes a new approach to the generation of referring expressions.
In the graph-based algorithm (Krahmer et al, 2003), which we refer to as Graph, information about domain objects is represented as a labelled directed graph, and REG is modeled as a graph-search problem. $$$$$ The presence of a cost function, however, is potentially very useful, since it allows us to avoid eliminating comparatively cheap (and thus more frequently selected) edges.
