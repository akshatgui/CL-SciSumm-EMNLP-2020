In our model, we adopted the subtree kernel method for the shortest path dependency kernel (Bunescu and Mooney, 2005). $$$$$ We use this relation kernel in conjunction with SVMs in order to find decision hyperplanes that best separate positive examples from negative examples.We modified the LibSVM1 package for SVM learn ing by plugging in the kernel described above, and used its default one-against-one implementation for multiclass classification.
In our model, we adopted the subtree kernel method for the shortest path dependency kernel (Bunescu and Mooney, 2005). $$$$$ Local and non-local (deep) dependencies are equally important for finding relations.

It has been shown in previous work on relation extraction that the shortest dependency path between any two entities captures the in formation required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ In this paper we tried extracting both types of dependencies using a CCG parser, however another approach is to recover deepdependencies from syntactic parses, as in (Camp bell, 2004; Levy and Manning, 2004).
It has been shown in previous work on relation extraction that the shortest dependency path between any two entities captures the in formation required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ Exper iments on extracting top-level relationsfrom the ACE (Automated Content Ex traction) newspaper corpus show that thenew shortest path dependency kernel outperforms a recent approach based on de pendency tree kernels.
It has been shown in previous work on relation extraction that the shortest dependency path between any two entities captures the in formation required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ The head-modifier dependencies corresponding to the three functor-argument dependencies in Table 4 are:?protesters ? seized?, ?stations ? seized?, and ?sev eral ? stations?.
It has been shown in previous work on relation extraction that the shortest dependency path between any two entities captures the in formation required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ It is therefore important to design the IE system so that the input data is stripped of unnecessary features as much as possible.

The respective dependency parse tree is included through following the shortest dependency path hypothesis (Bunescu and Mooney, 2005), by using the syntactical and dependency information of edges (e) and vertices (v). $$$$$ To each lex 1URL:http://www.csie.ntu.edu.tw/?cjlin/libsvm/ 2URL: http://opennlp.sourceforge.net 728 ical item corresponds a set of syntactic categories specifying its valency and the directionality of itsarguments.
The respective dependency parse tree is included through following the shortest dependency path hypothesis (Bunescu and Mooney, 2005), by using the syntactical and dependency information of edges (e) and vertices (v). $$$$$ 5.2 Extracting dependencies using a CFG.
The respective dependency parse tree is included through following the shortest dependency path hypothesis (Bunescu and Mooney, 2005), by using the syntactical and dependency information of edges (e) and vertices (v). $$$$$ [Local Dependencies] These correspond to local predicate-argument (or head-modifier) constructions such as ?troops ? raided?, or ?pump ing ? stations?
The respective dependency parse tree is included through following the shortest dependency path hypothesis (Bunescu and Mooney, 2005), by using the syntactical and dependency information of edges (e) and vertices (v). $$$$$ Exper iments on extracting top-level relationsfrom the ACE (Automated Content Ex traction) newspaper corpus show that thenew shortest path dependency kernel outperforms a recent approach based on de pendency tree kernels.

It has been shown in previous work on relation extraction that the shortest path between any two entities captures the information required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ We have presented a new kernel for relation extraction based on the shortest-path between the two rela tion entities in the dependency graph.
It has been shown in previous work on relation extraction that the shortest path between any two entities captures the information required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ and ?workers?
It has been shown in previous work on relation extraction that the shortest path between any two entities captures the information required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ We present a novel approach to relation extraction, based on the observation thatthe information required to assert a rela tionship between two named entities in the same sentence is typically capturedby the shortest path between the two entities in the dependency graph.
It has been shown in previous work on relation extraction that the shortest path between any two entities captures the information required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ Method Precision Recall F-measure (S1) SP-CCG 67.5 37.2 48.0 (S1) SP-CFG 71.1 39.2 50.5 (S1) K4 70.3 26.3 38.0 (S2) SP-CCG 63.7 41.4 50.2 (S2) SP-CFG 65.5 43.8 52.5 (S2) K4 67.1 35.0 45.8 Table 5: Extraction Performance on ACE.

It has been shown in previous work on relation extraction that the shortest dependency path between any two entities captures the information required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ Figure 1 shows two sample sentences from ACE, with entity mentions in bold.
It has been shown in previous work on relation extraction that the shortest dependency path between any two entities captures the information required to assert a relationship between them (Bunescu and Mooney, 2005). $$$$$ raided ??

The information in the shortest path between two entities in a dependency tree can be used to assert whether a relationship exists between them (Bunescu and Mooney, 2005). $$$$$ Their corresponding dependency paths are: 1.
The information in the shortest path between two entities in a dependency tree can be used to assert whether a relationship exists between them (Bunescu and Mooney, 2005). $$$$$ Exper iments on extracting top-level relationsfrom the ACE (Automated Content Ex traction) newspaper corpus show that thenew shortest path dependency kernel outperforms a recent approach based on de pendency tree kernels.
The information in the shortest path between two entities in a dependency tree can be used to assert whether a relationship exists between them (Bunescu and Mooney, 2005). $$$$$ Exper iments on extracting top-level relationsfrom the ACE (Automated Content Ex traction) newspaper corpus show that thenew shortest path dependency kernel outperforms a recent approach based on de pendency tree kernels.
The information in the shortest path between two entities in a dependency tree can be used to assert whether a relationship exists between them (Bunescu and Mooney, 2005). $$$$$ In the case of the tree kernels from (Zelenko et al, 2003; Culotta and Sorensen, 2004), the authors reduce each relation example to the smallest subtree in the parse or dependency tree that includes both entities.

 $$$$$ Correspondingly, the first column in Table 1 lists the four relations of typeLOCATED that need to be extracted by the IE sys tem.
 $$$$$ y = [y1 y2 y3 y4 y5 y6 y7], where y1 = {his, PRP, PERSON}, y2 = {?}, y3 = {arrival, NN, Noun}, y4 = {?}, y5 = {in, IN}, y6 = {?}, y7 = {Beijing, NNP, Noun, LOCATION} Based on the formula from Equation 1, the kernel is computed as K(x, y) = 3?1?1?1?2?1?3 = 18.
 $$$$$ For the shortest-path kernels, the semantics is known bydefinition: each path feature corresponds to a dimen sion in the Hilbert space.
 $$$$$ In (Zelenko et al, 2003), the authors do relation extraction using a tree kernel defined over shallow parse tree representations of sentences.
