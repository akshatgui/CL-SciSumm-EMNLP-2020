It is well-known that disjunctive unification is NP complete (Kasper 1987). $$$$$ Disjunction is an essential component of grammatical descriptions in Kay's Functional Unification Grammar [6], and it has been proposed by Karttunen as a linguistically motivated extension to PATR-II [2].
It is well-known that disjunctive unification is NP complete (Kasper 1987). $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
It is well-known that disjunctive unification is NP complete (Kasper 1987). $$$$$ This exemplifies the predominant type of structure building operation needed in a parsing program for Functional Unification Grammar.

The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ A feature-description is conceptually equivalent to a special kind of AND/OR graph, in which the terminal nodes are represented by DG structures.
The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ Thus, in the worst case, CHECKlNDEF requires 0(cen log n) time.
The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ In previous work two methods have been used to handle disjunctive descriptions in parsing and other computational applications.

The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ I would like to thank Bill Rounds, my advisor during graduate studies at the University of Michigan, for his helpful criticism of earlier versions of the algorithm which is presented here.
The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ I would also like to thank Bill Mann for suggestions during its implementation at USC/ISI, and Stuart Shieber for providing help in the use of the PATR-II system.
The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ While the feature-description corresponding to a grammar may have hundreds of disjunctions, the descriptions that result from parsing a sentence usually have only a small number of disjunctions, if any at all.

There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ Feature structures will be represented by DGs, and descriptions of feature structures will be represented by logical formulas of the type described in [4].
There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ In previous work two methods have been used to handle disjunctive descriptions in parsing and other computational applications.
There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ Disjunct (4) is also incompatible, because it has Goal : Person : 3, and the hypothesized description has ri< Subj >,< Goal >1, along with Subj : Person : 2.
There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ In the AND/OR graph representation, each AND-node represents a feature-description.

Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ It simply identifies components of the formula which may be converted into a more efficient representation as DG structures.
Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ The fact that sentences can be parsed at all with a grammar containing this many disjunctions indicates that the algorithm is performing much better than its theoretical worst case time of 0(2d).2 The timings, shown in Table 1, obtained from the experimental parser for systemic grammar also indicate that a dramatic increase in the number of disjunctions in the grammar does not result in an exponential increase in parse time.
Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ Now disjuncts (3) and (4) are checked for compatibility with the definite component of the new description: (3) is no longer compatible, but (4) is compatible.
Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ While the range of speed achieved by a straightforward implementation of this algorithm is acceptable for grammar testing, even greater efficiency would be desirable (and necessary for applications demanding fast real-time performance).

This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ I would also like to thank Bill Mann for suggestions during its implementation at USC/ISI, and Stuart Shieber for providing help in the use of the PATR-II system.
This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ V ... V (uconj.
This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ This research was sponsored in part by the United States Air Force Office of Scientific Research contracts FQ8671-8401007 and F49620-87-C-0005, and in part by the United States Defense Advanced Research Projects Agency under contract MDA903-81-C-0335; the opinions expressed here are solely those of the author.

Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ This method has been used successfully in an experimental parser for a grammar containing several hundred disjunctions in its description.
Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ If new-def = TOP, then return (failure).
Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ The unification method presented here represents a general solution to a seemingly intractable problem.

Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ Therefore, we expect that it can be used as the basis for language processing systems requiring large grammatical descriptions that contain disjunctive information, and refined as necessary and appropriate for specific applications.
Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ This research was sponsored in part by the United States Air Force Office of Scientific Research contracts FQ8671-8401007 and F49620-87-C-0005, and in part by the United States Defense Advanced Research Projects Agency under contract MDA903-81-C-0335; the opinions expressed here are solely those of the author.
Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ I would like to thank Bill Rounds, my advisor during graduate studies at the University of Michigan, for his helpful criticism of earlier versions of the algorithm which is presented here.
Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ This method has been used successfully in an experimental parser for a grammar containing several hundred disjunctions in its description.
