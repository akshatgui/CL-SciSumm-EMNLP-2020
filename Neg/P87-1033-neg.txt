It is well-known that disjunctive unification is NP complete (Kasper 1987). $$$$$ I would also like to thank Bill Mann for suggestions during its implementation at USC/ISI, and Stuart Shieber for providing help in the use of the PATR-II system.
It is well-known that disjunctive unification is NP complete (Kasper 1987). $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
It is well-known that disjunctive unification is NP complete (Kasper 1987). $$$$$ In previous work two methods have been used to handle disjunctive descriptions in parsing and other computational applications.

The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ Since d must be less than n, this complexity function is almost cubic.
The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ I would also like to thank Bill Mann for suggestions during its implementation at USC/ISI, and Stuart Shieber for providing help in the use of the PATR-II system.
The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ This method has been used successfully in an experimental parser for a grammar containing several hundred disjunctions in its description.
The unification of disjunctive feature structures is implemented according to Kasper's algorithm (Kasper, 1987). $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.

The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ In step 2 of the algorithm each of the disjuncts of DES C.INDEFINITE is checked for compatibility with DESC.DEFINITE, using the function CHECK-INDEF.
The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ The pairwise manner of checking compatibility can be generalized to groups of any size by increasing the value of the parameter n. While this third step of the algorithm is necessary in order to insure consistency of disjunctive descriptions, it is not necessary to use it every time a description is built during a parse.
The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ I would like to thank Bill Rounds, my advisor during graduate studies at the University of Michigan, for his helpful criticism of earlier versions of the algorithm which is presented here.
The general problem of unifying two disjunctive feature structures is non-polynomial in the number of disjunctions (Kasper, 1987). $$$$$ The result of unifying two descriptions is a new description, which is satisfied by the intersection of the sets of structures that satisfy the two given descriptions.

There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ This method has been used successfully in an experimental parser for a grammar containing several hundred disjunctions in its description.
There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ Most disjunctions in a systemic grammar represent possible alternative values that some particular feature may have (along with the grammatical consequences entailed by choosing particular values for the feature).
There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ In previous research [4,5] we have shown how descriptions of feature structures can be represented by a certain type of logical formula, and that the consistency problem for disjunctive descriptions is NP-complete.
There is reason to hope that this will often be the case; while disjunction may be widespread in grammar ules and texical entries, Kasper (1987) observes that in his implementation "in the analysis of a particular sentence most features have a unique value, and some features are not present at, all". $$$$$ Although disjunction has been used in several unificationbased grammar formalisms, existing methods of unification have been unsatisfactory for descriptions containing large quantities of disjunction, because they require exponential time.

Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ Therefore, we suggest two types of refinement to this algorithm as topics for future research: using heuristics to determine an opportune ordering of the disjuncts within a description, and using parallel hardware to implement the compatibility tests for different disjunctions.
Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ In this step, NWISE-CONSISTENCY is called at most (d/2) â€” 1 times.
Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
Kasper (1987) describes a technique which, for every set of n conjoined disjunctions, checks the consistency first of single disjuncts against the definite part of the description, then that of pairs and so on up ton-tuples for full consistency. $$$$$ Although disjunction has been used in several unificationbased grammar formalisms, existing methods of unification have been unsatisfactory for descriptions containing large quantities of disjunction, because they require exponential time.

This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ If desc.indefinite = 0, Then return (desc); Else begin; 2.
This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ I would like to thank Bill Rounds, my advisor during graduate studies at the University of Michigan, for his helpful criticism of earlier versions of the algorithm which is presented here.
This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ This paper describes a method of unification by successive approximation, resulting in better average performance.
This variation of the algorithm given in Kasper (1987) is closer to Propane's strategy, but the expansion to full DNF is itself in general an exponential process and will, when many disjunctions remain, be far more expensive than looking for a single realization. $$$$$ Therefore, we suggest two types of refinement to this algorithm as topics for future research: using heuristics to determine an opportune ordering of the disjuncts within a description, and using parallel hardware to implement the compatibility tests for different disjunctions.

Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ Thus, in many practical cases the actual cost of the algorithm is bounded by a polynomial that is at most d2n log it.
Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ Function CHECK-DISJ (disj, cond) Returns disjunction: where disj is a disjunction of feature-descriptions, and cond is a DG. gorithm.
Unification time here is order n log n in the sizes n of the input structures (Kasper, 1987). $$$$$ Therefore, we suggest two types of refinement to this algorithm as topics for future research: using heuristics to determine an opportune ordering of the disjuncts within a description, and using parallel hardware to implement the compatibility tests for different disjunctions.

Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ Note that two feature-descriptions do not become permanently linked when they are unified, unlike unification for DG stuctures.
Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ Disjunction is an essential component of grammatical descriptions in Kay's Functional Unification Grammar [6], and it has been proposed by Karttunen as a linguistically motivated extension to PATR-II [2].
Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ The unification method presented here represents a general solution to a seemingly intractable problem.
Kasper (1987) and Eisele and DSrre (1988) have tackled this problem and proposed unification methods for disjunctive feature descriptions. $$$$$ The example given here is deliberately simple, in order to illustrate how the algorithm works with a minimum amount of detail.
