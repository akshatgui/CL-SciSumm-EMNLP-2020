The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al, 2000) and the POS tags are removed. $$$$$ This work was funded by UK EPSRC project GR/L53175 PSET: Practical Simplification of English Text', and by an EPSRC Advanced Fellowship to the second author.
The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al, 2000) and the POS tags are removed. $$$$$ However, a full form lexicon is unwieldy and inconvenient to update, and a system derived from it cannot cope gracefully with unknown words because it does not contain generalisations about regular or subregular morphological behaviour.
The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al, 2000) and the POS tags are removed. $$$$$ We are following a well-established line of research into the use of finite-state techniques for lexical and shallow syntactic NLP tasks (e.g.

Following Chambers and Jurafsky (2008), we extracted and lemmatized the verbs from the New York Times section of the Gigaword Corpus using the Stanford POS tagger (Toutanova et al, 2004) and the Morphalemmatizer (Minnen et al, 2000). $$$$$ But there are cases where this type of contraction is not permissible.
Following Chambers and Jurafsky (2008), we extracted and lemmatized the verbs from the New York Times section of the Gigaword Corpus using the Stanford POS tagger (Toutanova et al, 2004) and the Morphalemmatizer (Minnen et al, 2000). $$$$$ Minnen and Carroll (Under review) describe in detail how the reversal is performed.
Following Chambers and Jurafsky (2008), we extracted and lemmatized the verbs from the New York Times section of the Gigaword Corpus using the Stanford POS tagger (Toutanova et al, 2004) and the Morphalemmatizer (Minnen et al, 2000). $$$$$ For example, it includes the word form pettifogged,1 whereas it omits many consonant doubled words that are much more common (according to counts from the BNC).
Following Chambers and Jurafsky (2008), we extracted and lemmatized the verbs from the New York Times section of the Gigaword Corpus using the Stanford POS tagger (Toutanova et al, 2004) and the Morphalemmatizer (Minnen et al, 2000). $$$$$ Section 3 outlines how the generator is put to .use in a prototype system for automatic simplification of text, and discusses a number of practical morphological and orthographic issues that we have encountered.

Each word was reduced to its morphological root using the morphological analyser described in (Minnen et al, 2000). $$$$$ This work was funded by UK EPSRC project GR/L53175 PSET: Practical Simplification of English Text', and by an EPSRC Advanced Fellowship to the second author.
Each word was reduced to its morphological root using the morphological analyser described in (Minnen et al, 2000). $$$$$ The morphological generator forms part of a prototype system for automatic simplification of English newspaper text (Carroll et al., 1999).
Each word was reduced to its morphological root using the morphological analyser described in (Minnen et al, 2000). $$$$$ When the Flex rule matches the input address-I-8_1V, for example, the C function np_vord_form (defined elsewhere in the generator) is called to determine the word form corresponding to the input: the function deletes the inflection type and PoS label specifications and the delimiters, removes the last character of the lemma, and finally attaches the characters es; the word form generated is thus addresses.

The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al., 2000) and the POS tags are stripped. $$$$$ The original version of the morphological analyser was kindly provided to us by the University of Sheffield GATE project—Chris -Brew, Dale, Gerdemann • • Adam Kilgarriff and Ehud Reiter have suggested improvements to the analyser/generator.
The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al., 2000) and the POS tags are stripped. $$$$$ Also, a side-effect of the fact that the generator is derived from the analyser is that the two modules have exactly the same coverage and are guaranteed to stay in step with each other.
The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al., 2000) and the POS tags are stripped. $$$$$ In addition, the generalisation-exception architecture can be used to specify----and also override—preferences in cases where a lemma has more than one possible surface word form given a particular inflectional type and PoS label.

Information on lemmatisation, as well as abbreviations and their long forms, is added using the morpha lemmatiser (Minnen et al, 2000) and the ExtractAbbrev script of Schwartz and Hearst (2003), respectively. $$$$$ We are following a well-established line of research into the use of finite-state techniques for lexical and shallow syntactic NLP tasks (e.g.
Information on lemmatisation, as well as abbreviations and their long forms, is added using the morpha lemmatiser (Minnen et al, 2000) and the ExtractAbbrev script of Schwartz and Hearst (2003), respectively. $$$$$ This is incorrect orthographically because the determiner in the final noun phrase should be an, as in an acoustic jam session.
Information on lemmatisation, as well as abbreviations and their long forms, is added using the morpha lemmatiser (Minnen et al, 2000) and the ExtractAbbrev script of Schwartz and Hearst (2003), respectively. $$$$$ In DRAFTER-2 (Power et aL, 1998), an a/an feature can be associated with any lexical entry, and its value is propagated up to the NP level through leftmost rule daughters in the grammar (Power, personal communication).

Heads are extracted from the chunks and lemmatized (Minnen et al, 2000). $$$$$ We have therefore implemented a final orthographic postprocessing stage.
Heads are extracted from the chunks and lemmatized (Minnen et al, 2000). $$$$$ The original version of the morphological analyser was kindly provided to us by the University of Sheffield GATE project—Chris -Brew, Dale, Gerdemann • • Adam Kilgarriff and Ehud Reiter have suggested improvements to the analyser/generator.
Heads are extracted from the chunks and lemmatized (Minnen et al, 2000). $$$$$ Thanks also to the anonymous reviewers for insightful comments.
Heads are extracted from the chunks and lemmatized (Minnen et al, 2000). $$$$$ Thanks also to the anonymous reviewers for insightful comments.

Further linguistic markup is added using the morpha lemmatiser (Minnen et al, 2000) and the C&C named entity tagger (Curran and Clark, 2003) trained on the data from MUC-7. $$$$$ A further benefit is that localising morphological knowledge in a single component facilitates more systematic and reliable updating.
Further linguistic markup is added using the morpha lemmatiser (Minnen et al, 2000) and the C&C named entity tagger (Curran and Clark, 2003) trained on the data from MUC-7. $$$$$ The morphological components of current widely-used NLG systems tend to consist of hard-wired procedural code that is tightly bound to the workings of the rest of the system.
Further linguistic markup is added using the morpha lemmatiser (Minnen et al, 2000) and the C&C named entity tagger (Curran and Clark, 2003) trained on the data from MUC-7. $$$$$ Karttunen et al. (1996)).
Further linguistic markup is added using the morpha lemmatiser (Minnen et al, 2000) and the C&C named entity tagger (Curran and Clark, 2003) trained on the data from MUC-7. $$$$$ We are not aware of any literature describing (practical) NLG systems that generate contractions.

We next lemmatised the data using morpha (Minnen et al, 2000), and chunk parsed the WSJ with TiMBL 4.1 (Daelemans et al, 2001) using the Brown corpus as training data. $$$$$ The generator is packaged up as a Unix filter, making it easy to integrate into applications. speed and portability The generator is based on efficient finite-state techniques, and implemented using the widely available Unix Flex utility. freely available The morphological generator and the orthographic postprocessor are freely available to the NLG research community.
We next lemmatised the data using morpha (Minnen et al, 2000), and chunk parsed the WSJ with TiMBL 4.1 (Daelemans et al, 2001) using the Brown corpus as training data. $$$$$ We present such a component: a fast and robust morphological generator for English based on finite-state techniques that generates a word form given a specification of the lemma, part-of-speech, and the type of inflection required.
We next lemmatised the data using morpha (Minnen et al, 2000), and chunk parsed the WSJ with TiMBL 4.1 (Daelemans et al, 2001) using the Brown corpus as training data. $$$$$ These cannot be dealt with in morphological generation since this works strictly a word at a time.
We next lemmatised the data using morpha (Minnen et al, 2000), and chunk parsed the WSJ with TiMBL 4.1 (Daelemans et al, 2001) using the Brown corpus as training data. $$$$$ The original version of the morphological analyser was kindly provided to us by the University of Sheffield GATE project—Chris -Brew, Dale, Gerdemann • • Adam Kilgarriff and Ehud Reiter have suggested improvements to the analyser/generator.

Tokenisation, species word identification and chunking were implemented in-house using the LTXML2 tools (Grover and Tobin, 2006), whilst abbreviation extraction used the Schwartz and Hearst abbreviation extractor (Schwartz and Hearst, 2003) and lemmatisation used morpha (Minnen et al, 2000). $$$$$ The main features of the generator are: wide coverage and high accuracy It incorporates data from several large corpora and machine readable dictionaries.
Tokenisation, species word identification and chunking were implemented in-house using the LTXML2 tools (Grover and Tobin, 2006), whilst abbreviation extraction used the Schwartz and Hearst abbreviation extractor (Schwartz and Hearst, 2003) and lemmatisation used morpha (Minnen et al, 2000). $$$$$ In this paper we describe a fast and robust generator for the inflectional morphology of English that generates a word form given a specification of a lemma, a part-of-speech (PoS) label, and an inflectional type.
Tokenisation, species word identification and chunking were implemented in-house using the LTXML2 tools (Grover and Tobin, 2006), whilst abbreviation extraction used the Schwartz and Hearst abbreviation extractor (Schwartz and Hearst, 2003) and lemmatisation used morpha (Minnen et al, 2000). $$$$$ Most approaches to natural language generation (NLG) ignore morphological variation during word choice, postponing the computation of the actual word forms to be output to a final stage, sometimes termed clinearisation'.
Tokenisation, species word identification and chunking were implemented in-house using the LTXML2 tools (Grover and Tobin, 2006), whilst abbreviation extraction used the Schwartz and Hearst abbreviation extractor (Schwartz and Hearst, 2003) and lemmatisation used morpha (Minnen et al, 2000). $$$$$ Karttunen et al. (1996)).

We used the morpha lemmatizer (Minnen et al, 2000), which is built into the C&C tools, to match tokens across T and H; and we converted all tokens to lowercase. $$$$$ natural language generation sysit often advantageous to have a separate component that deals purely with morphological processing.
We used the morpha lemmatizer (Minnen et al, 2000), which is built into the C&C tools, to match tokens across T and H; and we converted all tokens to lowercase. $$$$$ However, we are not aware of published research on finite-state morphological generators (1) establishing whether in practice they perform with similar efficiency to morphological analysers, (2) quantifying their type/token accuracy with respect to an independent, extensive 'gold standard', and (3) indicating how easily they can be integrated into Larger systems.
We used the morpha lemmatizer (Minnen et al, 2000), which is built into the C&C tools, to match tokens across T and H; and we converted all tokens to lowercase. $$$$$ natural language generation sysit often advantageous to have a separate component that deals purely with morphological processing.
We used the morpha lemmatizer (Minnen et al, 2000), which is built into the C&C tools, to match tokens across T and H; and we converted all tokens to lowercase. $$$$$ The main features of the generator are: wide coverage and high accuracy It incorporates data from several large corpora and machine readable dictionaries.

Part-of-speech (POS) tagging is done using the C&C tagger (Curran and Clark, 2003a) and lemmatisation is done using morpha (Minnen et al, 2000). $$$$$ In this paper we describe a fast and robust generator for the inflectional morphology of English that generates a word form given a specification of a lemma, a part-of-speech (PoS) label, and an inflectional type.
Part-of-speech (POS) tagging is done using the C&C tagger (Curran and Clark, 2003a) and lemmatisation is done using morpha (Minnen et al, 2000). $$$$$ The generator is packaged up as a Unix 'filter', making it easy to integrate into applications.
Part-of-speech (POS) tagging is done using the C&C tagger (Curran and Clark, 2003a) and lemmatisation is done using morpha (Minnen et al, 2000). $$$$$ We describe how this morphological generator is used in a prototype system for automatic simplification of English newspaper text, and discuss practical morphological and orthographic issues we have encountered in generation of unrestricted text within this application.
Part-of-speech (POS) tagging is done using the C&C tagger (Curran and Clark, 2003a) and lemmatisation is done using morpha (Minnen et al, 2000). $$$$$ Unknown words are very often handled correctly by the generalisations. maintainability and ease of use The organisation into generalisations and exceptions can save development time since addition of new vocabulary that has regular morphology does not require any changes to be made.

The Grefenstette (1994) relation extractor produces context relations that are then lemmatised using the Minnen et al (2000) morphological analyser. $$$$$ Similarly, .the orthography of the .genitive marker cannot be determined without taking context into account, since it depends on the identity of the last letter of the preceding word.
The Grefenstette (1994) relation extractor produces context relations that are then lemmatised using the Minnen et al (2000) morphological analyser. $$$$$ For example, the past participle form of the verb to bear is borne in British English, whereas in American English the preferred word form is born.
The Grefenstette (1994) relation extractor produces context relations that are then lemmatised using the Minnen et al (2000) morphological analyser. $$$$$ Section 4 relates our work to that of others, and we conclude (Section 5) with directions for future work.
The Grefenstette (1994) relation extractor produces context relations that are then lemmatised using the Minnen et al (2000) morphological analyser. $$$$$ A benefit is that since there are no competing claims on the representation framework from other types of linguistic and non-linguistic knowledge, the developer of the morphological generator is free to express morphological information in a perspicuous and elegant manner.

B5: Lemmatize the tokens using morpha, (Minnen et al, 2000). $$$$$ Similarly, .the orthography of the .genitive marker cannot be determined without taking context into account, since it depends on the identity of the last letter of the preceding word.
B5: Lemmatize the tokens using morpha, (Minnen et al, 2000). $$$$$ We present such a component: a fast and robust morphological generator for English based on finite-state techniques that generates a word form given a specification of the lemma, part-of-speech, and the type of inflection required.
B5: Lemmatize the tokens using morpha, (Minnen et al, 2000). $$$$$ Thanks also to the anonymous reviewers for insightful comments.
B5: Lemmatize the tokens using morpha, (Minnen et al, 2000). $$$$$ We achieve this, again using a filter implemented in Flex, with a set of general rules keying off the next word's first letter (having skipped any intervening sentence-internal punctuation), together with a list of exceptions (e.g. heir, unanimous) •-,collected -us ingthe:pronunciabion information in the OALDCE, supplemented by further cases (e.g. unidimensional) found in the BNC.

The tokenisation, sentence boundary detection, head word identification and chunking components were implemented with the lt-xml2tools (Grover and Tobin, 2006), and the lemmatisation used morpha (Minnen et al, 2000). $$$$$ Thanks also to the anonymous reviewers for insightful comments.
The tokenisation, sentence boundary detection, head word identification and chunking components were implemented with the lt-xml2tools (Grover and Tobin, 2006), and the lemmatisation used morpha (Minnen et al, 2000). $$$$$ natural language generation sysit often advantageous to have a separate component that deals purely with morphological processing.
The tokenisation, sentence boundary detection, head word identification and chunking components were implemented with the lt-xml2tools (Grover and Tobin, 2006), and the lemmatisation used morpha (Minnen et al, 2000). $$$$$ The original version of the morphological analyser was kindly provided to us by the University of Sheffield GATE project—Chris -Brew, Dale, Gerdemann • • Adam Kilgarriff and Ehud Reiter have suggested improvements to the analyser/generator.
The tokenisation, sentence boundary detection, head word identification and chunking components were implemented with the lt-xml2tools (Grover and Tobin, 2006), and the lemmatisation used morpha (Minnen et al, 2000). $$$$$ This work was funded by UK EPSRC project GR/L53175 PSET: Practical Simplification of English Text', and by an EPSRC Advanced Fellowship to the second author.

Since MINIPAR performs morphological analysis on the context relations we have added an existing morphological analyser (Minnen et al, 2000) to the other extractors. $$$$$ See <http://www.cogs. susx.ac.uk/lab/nip/carroll/morph.html>.
Since MINIPAR performs morphological analysis on the context relations we have added an existing morphological analyser (Minnen et al, 2000) to the other extractors. $$$$$ See <http://www.cogs. susx.ac.uk/lab/nip/carroll/morph.html>.
Since MINIPAR performs morphological analysis on the context relations we have added an existing morphological analyser (Minnen et al, 2000) to the other extractors. $$$$$ An added benefit is that if a lemma does allow consonant doubling but is not included in the list then the word form generated will still be correct with respect to American English.
Since MINIPAR performs morphological analysis on the context relations we have added an existing morphological analyser (Minnen et al, 2000) to the other extractors. $$$$$ In addition. neither has a mechanism for stating exceptions for whole subclasses of words, for example those starting us followed by a vowel— such as use and usual—which must be preceded by a. KPML appears not to perform this type of processing at all.

For our purposes, we use a Penn tree bank-style tagger custom-built using fnTBL 1.0 (Ngai and Florian, 2001), and further lemmatise the output of the tagger using morph (Minnen et al, 2000). $$$$$ The work that is perhaps the most similar in spirit to ours is that of the LADL group, in their compilation of large lexicons of inflected word forms into finite-state transducers (Mohri, 1996).
For our purposes, we use a Penn tree bank-style tagger custom-built using fnTBL 1.0 (Ngai and Florian, 2001), and further lemmatise the output of the tagger using morph (Minnen et al, 2000). $$$$$ (This is only a partial solution since adjectives, adverbs and more rarely other parts of speech—can follow the indefinite article and thus need the same treatment).
For our purposes, we use a Penn tree bank-style tagger custom-built using fnTBL 1.0 (Ngai and Florian, 2001), and further lemmatise the output of the tagger using morph (Minnen et al, 2000). $$$$$ We present such a component: a fast and robust morphological generator for English based on finite-state techniques that generates a word form given a specification of the lemma, part-of-speech, and the type of inflection required.
For our purposes, we use a Penn tree bank-style tagger custom-built using fnTBL 1.0 (Ngai and Florian, 2001), and further lemmatise the output of the tagger using morph (Minnen et al, 2000). $$$$$ Thanks also to the anonymous reviewers for insightful comments.

We use a morphological tool (Minnen et al, 2000) to obtain the base form from the original verb or noun, so that YAG can generate grammatical sentences. $$$$$ The main features of the generator are: wide coverage and high accuracy It incorporates data from several large corpora and machine readable dictionaries.
We use a morphological tool (Minnen et al, 2000) to obtain the base form from the original verb or noun, so that YAG can generate grammatical sentences. $$$$$ We are following a well-established line of research into the use of finite-state techniques for lexical and shallow syntactic NLP tasks (e.g.
