(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ Sometimes there is not enough information available to choose a form deterministically.
(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ More generally, the backtracking regimen of our implementation of the algorithm may lead to recomputation of results.
(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ In this grammar, a special empty element is defined corresponding to the missing verb.
(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ .

Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ The length of the lists of complements now is not known in advance, and the generator will not terminate.
Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ Furthermore, and again consistent with previous work, we assume that the nonterminals associate to the phrases they describe logical expressions encoding their possible meanings.
Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.

We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ The new algorithm is designed to reflect such a traversal strategy respecting the semantic structure of the string being generated, rather than the string itself.
We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ It is quite simple, general in its applicability to a range of unification-based and logic grammar formalisms, and uniform, in that it places only one restriction (discussed below) on the form of the linguistic analyses allowed by the grammars used in generation.
We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.

The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ We can think of a parsing or generation process as discovering an analysis tree,4 one admitted by the grammar and zag saw Computational Linguistics Volume 16, Number 1, March 1990 33 Shieber et at.
The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ Strzalkowski refers to this problem quite aptly as constituting a deadlock situation.

For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ Finally, to incorporate a general facility for auxiliary conditions in rules, some sort of delayed evaluation triggered by appropriate instantiation (e.g. wait declarations; Naish 1986) would be desirable, as mentioned in Section 3.4.
For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ We can think of a parsing or generation process as discovering an analysis tree,4 one admitted by the grammar and zag saw Computational Linguistics Volume 16, Number 1, March 1990 33 Shieber et at.
For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ The new algorithm is designed to reflect such a traversal strategy respecting the semantic structure of the string being generated, rather than the string itself.

Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ These new constants will not unify with any augmentations to the semantics.
Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ This nondeterminism has been observed in practice.
Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ More generally, the backtracking regimen of our implementation of the algorithm may lead to recomputation of results.

It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ An example in which this is not the case is an analysis of German and Dutch, where the position of the verb in root sentences (the second position) is different from its position in subordinates (the last position).
It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ These infectional rules are applied to the results of the morphological rules.
It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ For efficiency, generation using this Earley deduction method requires an incomplete search strategy, filtering the search space using semantic information.

Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ A subgoal for the generation of a node node(np/NP, Sent-P) will result.
Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ Wedekind (1988) achieves the reordering by first generating nodes that are connected, that is, whose semantics is instantiated.
Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.

The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ The symptom is an ordering paradox in the sorting.
The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ Since the NP is not connected in this sense, but the VP is, the latter will be expanded first.

Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ This is the case if the antecedent is the semantic head of the clause; the anaphor will then be instantiated via top-down information through the chained_nodes predicate.
Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ However, the parameterization is much more broad than for the uniform Earley architecture (Shieber 1988).
Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ The bottom-up Earley-deduction generator does not fall prey to these problems of nontermination in the face of recursion, because lexical information is available immediately.
Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ This much is axiomatic.

In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ However, in the example grammar the antecedent is not necessarily the semantic head of the clause because of the VP modifier rule (12).
In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.

As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ This is the case if the antecedent is the semantic head of the clause; the anaphor will then be instantiated via top-down information through the chained_nodes predicate.
As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

The transformation is straightforward to define in its general form, and the transformed grammars can be readily compiled into efficient generators by standard feature grammar generator-compiler algorithms like Semantic Head-Driven Generation (Shieber et al, 1990). $$$$$ The right-hand-side elements are kept as a Prolog list for easier manipulation by the interpreters we will build.
The transformation is straightforward to define in its general form, and the transformed grammars can be readily compiled into efficient generators by standard feature grammar generator-compiler algorithms like Semantic Head-Driven Generation (Shieber et al, 1990). $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
The transformation is straightforward to define in its general form, and the transformed grammars can be readily compiled into efficient generators by standard feature grammar generator-compiler algorithms like Semantic Head-Driven Generation (Shieber et al, 1990). $$$$$ (We have developed more extensive experimental grammars that can generate relative clauses with gaps and sentences with quantified NPs from quantifled logical forms by using a version of Cooper storage [Cooper, 1983].

One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ They and Moore were supported in this work by a contract with the Nippon Telephone and Telegraph Corporation and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bibliotheekwezen en Informatieverzorgin through the Eurotra project.
One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ Happily, such an augmentation would serve to eliminate the redundancy caused by the linking relation as well.
One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ Semantic Head-Driven Grammar This grammar admits sentences like &quot;John left&quot; and &quot;John's father left&quot; with logical form encodings left(john) and left(mod(father, john)), respectively.

Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ The delay mechanism is useful in the following two general cases: First, the mechanism is useful if an inflectional variant depends on syntatic features that are not yet available.
Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ First, any system making use of a tabular link predicate over complex nonterminals (like the chained_nodes predicate used by the generation algorithm and including the link predicate used in the BUP parser; Matsumoto et al. 1983) is subject to a problem of spurious redundancy in processing if the elements in the link table are not mutually exclusive.
Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ A nonchain rule is applicable if the semantics of the left-hand side of the rule (which is to become the pivot) matches that of the root.
Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ In particular, generation from grammars with recursions whose well-foundedness relies on lexical information will terminate; top-down generation regimes such as those of Wedekind (1988) or Dymetman and Isabelle (1988) lack this property; further discussion can be found in Section 2.1.

The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ During the generation process the results of the morphological grammar are used directly.
The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ Semantic Head-Driven Grammar However, in the lexical-delayed scheme the inflectional and orthographical rules are delayed.
The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ In Dutch the verb second position can not only be filled by lexical verbs but also by a conjunction of verbs.
The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ First, any system making use of a tabular link predicate over complex nonterminals (like the chained_nodes predicate used by the generation algorithm and including the link predicate used in the BUP parser; Matsumoto et al. 1983) is subject to a problem of spurious redundancy in processing if the elements in the link table are not mutually exclusive.

 $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
 $$$$$ In general, this is not a finite process, as the previous Dutch example reveals.
 $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
 $$$$$ The generator is complete if s always subsumes a and coherent if a always subsumes s. The generator defined in Section 3.1 is not coherent or complete in this sense; it requires only that a and s be compatible, that is, unifiable.

Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ From this point of view, a naive top-down parser or generator performs a depth-first, left-to-right traversal of the tree.
Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ Again, this is a general property of backtrack methods and is not particular to our application.

In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work, the Artificial Intelligence Center for their support of the research, and the participants in the MiMo2 project, a research machine translation project of some members of Eurotra-Utrecht.
In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.

Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ The left-to-right traversal order of both of these methods is geared towards the given information in a parsing problem, the string, rather than that of a generation problem, the goal logical form.
Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ Completion steps in Earley's algorithm, whether used for parsing or generation, correspond to a post-order traversal (with prediction acting as a pre-order filter).
Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work, the Artificial Intelligence Center for their support of the research, and the participants in the MiMo2 project, a research machine translation project of some members of Eurotra-Utrecht.
