(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ Further enhancements to the algorithm are envisioned.
(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ For example, the &quot;complements&quot; rule given by Shieber (1985a) in the PATR-II formalism can be encoded as the DCG rule: Top-down generation using this rule will be forced to expand the lower VP before its complement, since LF is uninstantiated initially.
(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ The solution is to test at the end of the generation procedure whether the feature structure that is found is complete with respect to the original feature structure.
(Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms. $$$$$ This perspective purposely abstracts issues of nondeterminism in the parsing or generation process, as it assumes an oracle to provide traversal steps that happen to match the ethereal virtual tree being constructed.

Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ The use of dynamic programming techniques, as in chart parsing, would be an appropriate augmentation to the implementation of the algorithm.
Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ Again, after a chain rule is chosen to move up one node in the tree being constructed, the remaining (nonsemantic-head) children must be generated recursively.
Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ Therefore, the VP complement rule (11) can be applied an unbounded number of times.
Whereas Shieber et al (1990) have discussed similar techniques in the context of semantic head-driven generation, we are concerned here with parsing. $$$$$ First, Martin Kay (1990) has developed a parsing algorithm that seems to be the parsing correlate to the generation algorithm presented here.

We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
We view the linking relation not simply as a filter to increase efficiency within the domain of syntactic analysis; this aspect is stressed by Shieber (1985) and other investigators such as Bouma (1991), but rather as a device for the top-down predictive instantiation of information, as Shieber et al (1990) have shown for semantic-head-driven generation. $$$$$ We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ Beyond these requirements common to logic-based formalisms, the methods are generally applicable.
The previously proposed semantic-head-driven methods run into problems if none of the daughter constituents in the syntactic semantic rule schemata of a grammar fits the definition of a semantic head given in [Shieber et al, 1990]. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
For the phrase structure tree rooted with, there is no leaf which would fulfill the definition of a semantic head given in [Shieber et al, 1990] or [van Noord, 1993]. $$$$$ They and Moore were supported in this work by a contract with the Nippon Telephone and Telegraph Corporation and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bibliotheekwezen en Informatieverzorgin through the Eurotra project.

Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ The technique used here to build the logical forms is well-known in logic grammars.'
Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ Again, this is a general property of backtrack methods and is not particular to our application.
Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ For this category, the pivot (which will turn out to be node [fl) will be defined by the nonchain rule (If there were other forms of the verb, these would be potential candidates, but most would be eliminated by the chained_nodes check, as the semantic head relation requires identity of the verb form of a sentence and its VP head.
Shieber et al (1990) show that a top-down evaluation strategy will fail for rules such as vP-*vp x, irrespective of the order of evaluation of the right-hand side categories in the rule. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.

It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ For ease of exposition, the encoding will be a bit more cumbersome than is typically found in Prolog DCG interpreters.
It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.
It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ Despite the general applicability of the algorithm, we will, for the sake of concreteness, describe it and other generation algorithms in terms of their implementation for definiteclause grammars (DCG).
It is important to compare the generation strategy presented here with Semantic-head-driven generation [Shieber et al 1990, van Noord 1990] which is a direct generation algorithm from logical form encodings. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ As in previous examples, the grammar fragment in Figure 3 uses the infix operator / to separate syntactic and semantic category information, and subcategorization for complements is performed lexically.
Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ Two pieces of evidence point this way.
Unlike deduction-based approaches to natural language generation in computational linguistics (e.g., Shieber et al 1990),. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.

The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ The length of the lists of complements now is not known in advance, and the generator will not terminate.
The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ None of these changes, however, constitutes restructuring of the algorithm; rather, they modify its realization in significant and important ways.
The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
The algorithm in fact follows a head-driven node expansion, or search through the grammar, (as in Shieber et al, 1990), with the head of the most recently expanded node being selected for the next expansion (in step 2 of the algorithm above), until a leaf node is produced. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.

Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ The use of dynamic programming techniques, as in chart parsing, would be an appropriate augmentation to the implementation of the algorithm.
Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ For instance, a single chain rule might be considered to be applicable twice because of the nondeterminism of the call to chained_nodes.
Regular feature grammars can also be compiled into generators using a version of the Semantic Head Driven algorithm (Shieber et al, 1990). $$$$$ We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ The figure shows how inflectional rules, orthographical rules, morphology and syntax are related: orthographical rules are applied to the results of inflectional rules.
In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ They and Moore were supported in this work by a contract with the Nippon Telephone and Telegraph Corporation and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bibliotheekwezen en Informatieverzorgin through the Eurotra project.
In this sense, it is not unlike (Shieber et al, 1990)'s semantic-head-driven generation. $$$$$ We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ The research reported herein was primarily completed while Shieber and Pereira were at the Artificial Intelligence Center, SRI International.
As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ However, the parameterization is much more broad than for the uniform Earley architecture (Shieber 1988).
As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ The use of dynamic programming techniques, as in chart parsing, would be an appropriate augmentation to the implementation of the algorithm.
As shown in detail in (Shieber et al, 1990), top down generators can fail to terminate on certain grammars because they lack the lexical information necessary for their well-foundedness. $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

The transformation is straightforward to define in its general form, and the transformed grammars can be readily compiled into efficient generators by standard feature grammar generator-compiler algorithms like Semantic Head-Driven Generation (Shieber et al, 1990). $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work, the Artificial Intelligence Center for their support of the research, and the participants in the MiMo2 project, a research machine translation project of some members of Eurotra-Utrecht.
The transformation is straightforward to define in its general form, and the transformed grammars can be readily compiled into efficient generators by standard feature grammar generator-compiler algorithms like Semantic Head-Driven Generation (Shieber et al, 1990). $$$$$ The connection of a pivot to the root, as noted before, requires choice of a chain rule whose semantic head matches the pivot, and the recursive generation of the remainder of its right-hand side.
The transformation is straightforward to define in its general form, and the transformed grammars can be readily compiled into efficient generators by standard feature grammar generator-compiler algorithms like Semantic Head-Driven Generation (Shieber et al, 1990). $$$$$ In particular, we developed an architecture inspired by the Earley deduction work of Pereira and Warren (1983), but which generalized that work allowing for its use in both a parsing and generation mode merely by setting the values of a small number of parameters.

One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ Again, this is a general property of backtrack methods and is not particular to our application.
One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ As a method for generating natural language expressions, the Earley deduction method is reasonably successful along certain dimensions.
One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
One standard approach to sentence generation from predicate/argument structure (like the semantic-head-driven generation in (Shieber et al., 1990)) involves a simple algorithm. $$$$$ Such rules can be incorporated in the generator by adding the following clause for connect: connect(Pivot,Root) head_ gap(Pivot,Gap), connect(Gap,Root).

Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ Grammar of syntax and semantics Two-level orthography Paradigmatic inflection Morphological unification grammar for derivations, compounds and lexical rules Lexicon of stems Computational Linguistics Volume 16, Number 1, March 1990 39 Shieber et at.
Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ Its existence might point the way toward a uniform architecture.
Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ They and Moore were supported in this work by a contract with the Nippon Telephone and Telegraph Corporation and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bibliotheekwezen en Informatieverzorgin through the Eurotra project.
Our general method is to take as inputs to the process various communicative goals of the system, expressed as logical forms, and use them to construct a single new logical form to be input to Gemini's Semantic Head-Driven Generation algorithm (Shieber et al, 1990), which produces strings for Festival speech synthesis. $$$$$ For instance, various nondeterministic possibilities for generating a noun phrase (using different cases, say) might be entertained merely because the NP occurs before the verb which would more fully specify, and therefore limit, the options.

The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ The bottom-up base case occurs when the pivot and root are trivially connected because they are one and the same node.
The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ In fact, the only such nonchain rule is We conjecture that the pivot is labeled sentence/ decl(call_up(john,friends)).
The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ We review the problems of both top-down and bottom-up regimes in this section.
The end result of our selection and aggregation module (see section 6.2) is a fully specified logical form which is to be sent to the Semantic-Head Driven Generation component of Gemini (Shieber et al, 1990). $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work, the Artificial Intelligence Center for their support of the research, and the participants in the MiMo2 project, a research machine translation project of some members of Eurotra-Utrecht.

 $$$$$ This problem arises when there are phrases whose semantics are not ground at the description level, but instead subsume the goal logical form or generation.
 $$$$$ They and Moore were supported in this work by a contract with the Nippon Telephone and Telegraph Corporation and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bibliotheekwezen en Informatieverzorgin through the Eurotra project.
 $$$$$ The base case of connect will try to unify that term with the head of the rule above, leading to the attempted unification of X with [np(Agr)/SemIX], an occurs-check failure that would not be caught by the default Prolog unification algorithm.
 $$$$$ We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work, the Artificial Intelligence Center for their support of the research, and the participants in the MiMo2 project, a research machine translation project of some members of Eurotra-Utrecht.

Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ present algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.
Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ However, neither semantic projections in lexical-functional grammar (LFG; Halvorsen and Kaplan 1988) nor definite-clause grammars provide the means for such a sound treatment: logical-form variables or missing arguments of predicates are both encoded as unbound variables (attributes with unspecified values in the LFG semantic projection) at the description level.
Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ Despite the general applicability of the algorithm, we will, for the sake of concreteness, describe it and other generation algorithms in terms of their implementation for definiteclause grammars (DCG).
Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al, 1990). $$$$$ Coherence can be achieved by removing the confusion between object-level and metalevel variables mentioned above; that is, by treating logical-form variables as constants at the description level.

In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ Experiments with particular grammars of Dutch, Spanish, and English have shown that the delay mechanism results in a generator that is faster by a factor of two or three on short sentences.
In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ They and Moore were supported in this work by a contract with the Nippon Telephone and Telegraph Corporation and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bibliotheekwezen en Informatieverzorgin through the Eurotra project.
In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al, 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988). $$$$$ We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.

Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ The use of dynamic programming techniques, as in chart parsing, would be an appropriate augmentation to the implementation of the algorithm.
Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ The pivots chosen during generation and the branches corresponding to the semantic head relation are shown in boldface.
Generation with the resulting grammar can be compared best with head corner generation (Shieber et al, 1990). $$$$$ In particular, unlike a previous bottom-up generator, it allows use of semantically nonmonotonic grammars, yet unlike top-down methods, it also permits left-recursion.
