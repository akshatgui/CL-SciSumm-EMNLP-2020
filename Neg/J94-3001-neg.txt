see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ Either of the tapes can contain an input string, in which case the output will be written on the other.
see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ The relation for a grammar of rules is formed just as for a grammar of parallel automata.
see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ It also makes sense to talk about corresponding substrings, sequences of string pairs whose symbols correspond to each other in some larger string pair.

We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ (4) The compiler consists almost entirely of an implementation of the basic calculus.
We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ Indeed, when we apply this construction to fsts accepting the relations we used to derive the context-free language above, we find that Rel(P) is the empty relation (with no string-pairs at all) instead of the set-theoretic intersection R1 n R2However, if R1 and R2 are accepted by transducers none of whose accepting paths have &containing labels, then a string-pair belonging to both relations will be accepted by identically labeled paths in both transducers.
We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ This allows edge-conditioned string transformations to be encoded in rewriting rules.
We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ The intersection of the two outer relations is therefore also not regular and so cannot be the outer relation of any regular two-level grammar.

Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ We can model this second interpretation by using 0* instead of Dom(r U { E:E}).
Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ The regular relations differ from the regular languages, however, in that they are not closed under intersection and complementation.
Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ The mathematical techniques we develop to analyze rewriting rule systems are not limited just to that particular collection of formal devices.

Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ We have now dealt with the major complexities that surface coercion rules present.
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ Our discussion of two-level rule systems illustrates how we expect such extensions to unfold.
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ We are particularly indebted to Danny Bobrow for helpful discussions in the early stages of the research on rewriting systems.
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ In contrast to obligatory rules, optional rules typically produce many outputs.

(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ We use superscripts for repeated concatenation: Ln contains the concatenation of n members of L, and L* contains strings with arbitrary repetitions of strings in L, including zero.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ The defining properties of the regular languages, regular expressions, and finitestate machines are the basis for proving the well-known Kleene correspondence theorems showing the equivalence of these three string-set characterizations.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ The Leftcontext and Rightcontext operators given above will have exactly this effect when they are applied with the new meanings given to <, >, and m. The Replace operator must again be modified, however, because it alone distinguishes the different roles of the context brackets.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ The boundary symbol # is special in the rule formalism in that it can only appear in the context parts of a rule, never in the input or output patterns, and it never matches an element that appears explicitly in the string.

This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ We can answer this question in the affirmative: Theorem Every regular relation is the set of input/output strings of some noncyclic rewriting grammar with boundary-context rules.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ The intersection of the relations for all the individual rules is constructed as a same-length inner relation.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ This is because every string-pair belonging to the path-relation is accepted by a transducer with a path-string that belongs to the path-languages of both T1 and T2.

The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ We might therefore suspect that the lexical-surface relation for a two-level grammar consisting of transducers Th Tn is the relation n,R(T,).
The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ Clearly, for all languages L, L = Dom (Id(L)) = Range(Id(L)).
The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ To deal with heterogeneous T relations, we separate the epenthetic and nonepenthetic pairs into two distinct and homogeneous subrelations.

This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ Thus the results of inverting this rule must include undecipherable for undecipherable but iNdecipherable for indecipherable so that each of them can match properly against the lexicon.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ The relation then restricts the surface realization of any number of introduced O's.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ As obligatory rules, they must be applied to every substring meeting their conditions.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ The only hope of success in this domain lies in developing an appropriate set of high-level algebraic operators for reasoning about languages and relations and for justifying a corresponding set of operators and automata for computation.

Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ We are particularly indebted to Danny Bobrow for helpful discussions in the early stages of the research on rewriting systems.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ Thus, compared with the rewriting rules from which they are derived, finite-state transducers have the obvious advantage of formal and computational simplicity.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ As Figure 7 shows, the n can be mapped into n by the n:n transition at state 0 or into N by the transition to state 2.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ This analysis provides a common representation of phonological constraints that supports efficient generation and recognition by a single simple interpreter.

 $$$$$ If that state is in F, the corresponding Final subrule will apply to insert $ at the end of the string.
 $$$$$ Although boundary-context rules require distinctive mathematical treatment, we show below that they also denote only regular string relations.
 $$$$$ He showed that phonological grammars under most reasonable modes of application remain within the finite-state paradigm.
 $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.

The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ Ritchie (1992), for example, also proved that the &quot;languages&quot; generated by two-level grammars with regular contexts are closed under intersection, but this result does not hold if a grammar's language is taken to be its outer relation.
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ A similar characterization of two-level rule systems is provided in Section 7.
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.

In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ Our discussion of two-level rule systems illustrates how we expect such extensions to unfold.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ This makes it easy to write, say, a vowel-harmony rule that replaces a vowel that is not specified for backness as a back or front vowel according as the vowel in the immediately preceding syllable is back or front.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ This machine is constructed so that it encodes all the possible ways in which the m-machine and n-machine could interact through a common tape.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ A path-string for any finite-state transducer T is a (possibly empty) sequence of symbol-pairs u1: v1 u2: v2 .

An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ But the rule is in fact obligatory, and this means that there must be no occurrences of N on the second tape.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ The descriptive notations and accepting automata for regular languages can also be generalized to the n-dimensional case.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ When the following symbol is a labial, as in Figure 8, the process blocks.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ For example, if Rule 2 is inverted on the string intractable, there will be two results, intractable and iNtractable.

Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ These exclude all strings where an instance of the relevant context is followed by paired substrings not in r, either because the appropriate number of lexical O's were not (freely) introduced or because those O's correspond to unacceptable surface material.
Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.

Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ If T(R1) = (E, Qi, 61) and T(R2) = (E) (227 q2, F2, 82), the composition R1 oR2 is accepted by the composite fst where ((si , s2) , a, b) -=- f(t11t2) for some c E >,t1 E S(Si, a, c) and t2 E 6(S2,c,b)} In essence, the 6 for the composite machine is formed by canceling out the intermediate tape symbols from corresponding transitions in the component machines.
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ It rejects the tapes if it ends up in the nonfinal state 1, indicating that the second tape is not a valid translation of the first one.

it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ For example, two-level morphology (Koskenniemi 1983), which evolved from our early considerations of rewriting rules, relies for its analysis and implementation on the same algebraic techniques.
it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ Intuitively, these phenomena ought to be cognitively and computationally simpler than the variations and correspondences that appear in natural language syntax and semantics, yet the formal structure of such rules seems to require a complicated interpreter and an extraordinarily large number of processing steps.
it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ For all transitions u : E from a state p to q and all transitions €: v from q to r, we construct a new transition u:v from p to r. Then we remove state q from the machine along with all transitions entering or leaving it.

For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ We used systems of rewriting rules, particularly as formulated in SPE, to give concreteness to our work and to the paper.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ These essential properties carry over in the n-way generalizations, and therefore the correspondence theorems also generalize.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ This is then composed with the 0 introduction and removal relations to form the outer lexical-to-surface map.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ We partition an arbitrary T into the subrelations r° and T° defined as We then recast a rule of the form T 4= A p as the conjunction of the two rules These rules taken together represent the desired interpretation of the original, and each of them is properly modeled by exactly one variant of the Coerce relation.

Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ This analysis provides a common representation of phonological constraints that supports efficient generation and recognition by a single simple interpreter.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ But the rule is in fact obligatory, and this means that there must be no occurrences of N on the second tape.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ In each transition the machine matches the symbol specified for the input tape and writes the one for the output.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ Some grammars may make use of boundary-context rules, in which case a special symbol # can appear in contexts to mark the beginning and end of the strings.

Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ A similar conceptual framework can be established for string relations.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ If al ...an are the local variables in 6 whose values come from the finite sets V, the set of n-tuples represents the collection of all possible value instantiations of those variables.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ The pair can be regarded as performing a transduction between the outer tapes, and it turns out that a single finite-state transducer can be constructed that performs exactly this transduction without incorporating any analog of the intermediate tape.

 $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
 $$$$$ This transducer can be incorporated into efficient computational procedures that are far more economical in both recognition and production than any strategies using ordered rules directly.
 $$$$$ The rule properly applies to rewrite the N because it is bracketed by < and >.
 $$$$$ The existence of a large class of ambiguities that are introduced at one point in the recognition process and eliminated at another has been a major source of difficulty in efficiently reversing the action of linguistically motivated phonological grammars.
