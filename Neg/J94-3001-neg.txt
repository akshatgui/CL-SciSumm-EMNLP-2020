see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ We have shown that every noncyclical rewriting grammar does denote a regular relation.
see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ If X = (x1, x2,... xn) and Y = • • • yn) are n-tuples of strings, then the concatenation of X and Y, written X • Y or simply XY, is defined by That is, the n-way concatenation of two string-tuples is the tuple of strings formed by string concatenation of corresponding elements.
see Kaplan and Kay (1994) for an exposition of the mathematical basis. $$$$$ These exclude all strings where an instance of the relevant context is followed by paired substrings not in r, either because the appropriate number of lexical O's were not (freely) introduced or because those O's correspond to unacceptable surface material.

We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ A similar characterization of two-level rule systems is provided in Section 7.
We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ These are shown schematically in the diagram.
We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (Kaplan and Kay, 1994). $$$$$ Phonologists in the SPE tradition, as well as the structuralists that preceded them, had apparently honored an injunction against rules that rewrite their own output but still allowed the output of a rule to serve as context for a reapplication of that same rule.

Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ Ordering the rules means that the output of the first is taken as the input to the second.
Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ This analysis provides a common representation of phonological constraints that supports efficient generation and recognition by a single simple interpreter.
Two-level formal lists based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al, 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard. $$$$$ An important goal for us was to establish a solid basis for computation in the domain of phonological and orthographic systems.

Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ We might therefore suspect that the lexical-surface relation for a two-level grammar consisting of transducers Th Tn is the relation n,R(T,).
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ Our understanding and analysis of two-level systems is based on very productive discussions with Lauri Karttunen and Kimmo Koskenniemi.
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ These can be modeled with exactly the same technique we outlined for rewriting rules: we compose the additional relation [e:#/d (Em*0 # Em*o) €:#] at the beginning of the four-level cascade and compose its inverse at the end.
Unlike arbitrary regularization, same-length regular n-relations are closed under intersection and complementation , because a theorem tells us that they correspond to regular languages over of symbols (Kaplan and Kay, 1994, p. 342). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.

(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ If the lexical side of such a paired substring belongs to the domain of T, then the surface side must be such that the intervening pair belongs to T. To formalize this interpretation, we first describe the set of string pairs that fail to meet the conditions.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ These obligatory rules always produce exactly one result from a given input.
(Kaplan and Kay, 1994) express CR rules by the relation. $$$$$ Thus Rel(P) is R1 - R2.

This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ Those marks are appropriately constrained so that matching brackets enclose every occurrence of T, and each bracket marks an occurrence of the associated context relation.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ Indeed, speech understanding systems that use phonological rules do not typically invert them on strings but rather apply them to the lexicon to generate a list of all possible word forms (e.g.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371). $$$$$ We, of course, are responsible for any remaining errors.

The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ When the first tape contains the input, the machine models the generative application of the rule; when the second tape contains the input, it models the inversion of the rule.
The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ It rejects the tapes if it ends up in the nonfinal state 1, indicating that the second tape is not a valid translation of the first one.
The Xerox calculus includes the composition, ignore, and substitution operator discussed by Kaplan and Kay (1994) and the priority-union operator of Kaplan and Newman (1997). $$$$$ However, when Rule 2 is inverted on input, it does produce iNput as one of its results.

This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ One transducer may then accept a particular string pair through a sequence of transitions that does not literally match the transition sequence taken by the other on that same pair of strings.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ Let R be an arbitrary regular relation and let T = (E, Q, go, F, 6) be a finite-state transducer that accepts it.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ This transducer models the cascade in which the output of Rule 1 is the input to Rule 2.
This can be seen as an application of the ignore operator of Kaplan and Kay (1994), where E* is being ignored. $$$$$ Reflecting on the way the relation for a rewriting rule is constructed from simpler relations, and on how these are composed to create a single relation for a complete grammar, we come naturally to a consideration of how that relation should comport with the other parts of a larger language-processing system.

Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ When the following symbol is a labial, as in Figure 8, the process blocks.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ It might therefore prove advantageous to seek ways of composing phonology and syntax to produce a new system with the same formal properties as syntax alone.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ This set is not regular, since intersecting it with the regular language b*c* produces the context-free language bnc&quot;.
Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994). $$$$$ Again, given an implementation of the regular calculus, a grammar transducer can be constructed algorithmically from its rules.

 $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.

The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ The relation for a grammar of rules is formed just as for a grammar of parallel automata.
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ This set is not regular, since intersecting it with the regular language b*c* produces the context-free language bnc&quot;.
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
The context-dependent rewrite algorithm used is that of Mohri and Sproat (1996), and see also Kaplan and Kay (1994). $$$$$ Relations with this behavior can be obtained through the use of the ignoring operator defined in Section 3, which is notated by subscripting.

In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ Optional rules and most obligatory rules will produce at least one output string, perhaps just a copy of the input if the conditions for application are nowhere satisfied.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ The class of regular relations is therefore not closed under intersection, and it immediately follows that it is also not closed under complementation: by De Morgan's law, closure under complementation and union would imply closure under intersection.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ The compound forms of these rules are quite easy to model.
In particular, constructing an OT grammar step-by-step as the composition of a set of transducers, akin to rewrite rule com position in (Kaplan and Kay, 1994), has offered the attractive possibility of simultaneously modeling OT parsing and generation as a natural consequence of the bi-directionality of finite-state transducers. $$$$$ This analysis provides a common representation of phonological constraints that supports efficient generation and recognition by a single simple interpreter.

An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ That is why this uses a one-way implication instead of a biconditional.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ First, it can be the start of a rule application, provided it appears in front of an appropriate configuration of 0, and right-context brackets.
An algorithm for compilation into transducers was provided by Kaplan and Kay (1994). $$$$$ We can show, for example, that the result of combining together a list of items that have exceptional phonological behavior with a grammar-derived relation for general patterns is still a regular relation with an associated transducer.

Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ Note that Intro(S)-1 removes all elements of S from a string if S is disjoint from E. The second is the Ignore operator.
Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.
Back referencing has been implicit in previous research, such as in the batch rules of Kaplan and Kay (1994). $$$$$ The automata required to implement even the simplest examples are large and involve considerable subtlety for their construction.

Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ Both suffixes can be used together, and the harmony is illustrated by the different realizations of the abstract vowels in the forms apartmanlArIm and adreslArIm.
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ But it is not immediately obvious that the string relation defined by a whole two-level grammar is regular.
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ (3) The interpreter is constant even under radical changes in the theory and the formalism that informed the compiler.
Previous algorithms for compiling rewrite rules into transducers have followed Kaplan and Kay (1994) by introducing special marker symbols (markers) into strings in order to mark off candidate regions for replacement. $$$$$ This analysis provides a common representation of phonological constraints that supports efficient generation and recognition by a single simple interpreter.

it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ Another approach to solving this computational problem would be to use the reversed cascade of rules during recognition, but to somehow make the filtering information of particular rules available earlier in the process.
it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ In this diagram, the transition label &quot;other&quot; abbreviates the set of labels a:a,b:b, ...z:z, the identity pairs formed from all symbols that belong to the alphabet but are not mentioned explicitly in this particular rule.
it will be helpful to have at our disposal a few general tools, most of which were described already in Kaplan and Kay (1994). $$$$$ As long as care is taken to avoid inappropriate complementations and intersections, all such arrangements will denote regular relations and can be implemented by a uniform finite-state transducer mechanism.

For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ We, of course, are responsible for any remaining errors.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ Finally, we know that many language classes are closed under finitestate transductions or composition with regular relations—the images of context-free languages, for example, are context-free.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ The automata required to implement even the simplest examples are large and involve considerable subtlety for their construction.
For batch context-dependent rules, the context of the application for all rules is determined at once before their application (Kaplan and Kay, 1994). $$$$$ It shows in detail how this framework applies to ordered sets of context-sensitive rewriting rules and also to grammars in Koskenniemi's two-level formalism.

Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ Section 3 summarizes the mathematical tools that we use to analyze both rewriting and two-level systems.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ Figure 6 is a similar representation for the generation of impractical.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ Consider the obligatory rule a b/ab ba as applied to the string abababababa At least three different outcomes are possible, namely: Result (1) is obtained if the first application is at the leftmost eligible position in the string; each successive application applies to the output of any preceding one, and further to the right in the string.
Phonological rewrite-rules (Kaplan and Kay, 1994), two-level rules (Koskenniemi 1983), syntactic disarnbiguation rules (Karlsson et al 1994, Koskenniemi, Tapanainen, and Voutilainen 1992), and part-of-speech assignment rules (Brill 1992, Roche and Schabes 1995) are examples of replacement in context of finite-state grammars. $$$$$ The order of composition depends on whether the rule is specified as applying iteratively from left to right or from right to left.

Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ This representation has a number of remarkable advantages: (1) The program required to interpret this representation is simple almost to the point of triviality, no matter how intricate the original grammars might have been.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ This analysis provides a common representation of phonological constraints that supports efficient generation and recognition by a single simple interpreter.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ Let {R1, , Rn} be the set of regular relations for rules that are to be applied as a batch and construct the relation [UkRk]*.
Kaplan and Kay (1994) describe a general method representing a replacement procedure as finite-state transduction. $$$$$ If E is a relation for a finite list of exceptional input-output pairs and P is the general phonological relation, then the combination is given by E u [Id(Dom(E)) p] This relation is regular because E is regular (as is any finite list of pairs); it suppresses the general mapping provided by P for the exceptional items, allowing outputs for them to come from E only.

 $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
 $$$$$ Under those circumstances it would map the regular language {ab} into the context-free language {ab n 1 1 < n}.
 $$$$$ This paper presents a set of mathematical and computational tools for manipulating and reasoning about regular languages and regular relations and argues that they provide a solid basis for computational phonology.
 $$$$$ This transducer can be incorporated into efficient computational procedures that are far more economical in both recognition and production than any strategies using ordered rules directly.
