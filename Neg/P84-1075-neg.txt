Indeed, we have demonstrated the feasibility (Alshawi et al, 1985) of driving a parsing system directly from the information available in LDOCE by constructing dictionary entries for the PATR-H system (Shieber, 1984). $$$$$ The PATR-TI formalism is our current computer language for encoding linguistic information.
Indeed, we have demonstrated the feasibility (Alshawi et al, 1985) of driving a parsing system directly from the information available in LDOCE by constructing dictionary entries for the PATR-H system (Shieber, 1984). $$$$$ Its positioning at the center of these trends arises, however, not from the admixture of many discrete techniques, but rather from the application of a single simple yet powerful concept to the encoding of linguistic information.
Indeed, we have demonstrated the feasibility (Alshawi et al, 1985) of driving a parsing system directly from the information available in LDOCE by constructing dictionary entries for the PATR-H system (Shieber, 1984). $$$$$ References to papers with more complete descriptions of particular aspects of the project are provided when appropriate.
Indeed, we have demonstrated the feasibility (Alshawi et al, 1985) of driving a parsing system directly from the information available in LDOCE by constructing dictionary entries for the PATR-H system (Shieber, 1984). $$$$$ Its positioning at the center of these trends arises, however, not from the admixture of many discrete techniques, but rather from the application of a single simple yet powerful concept to the encoding of linguistic information.

We borrow the terminology and notation of PATR-II (Shieber, 1984), a minimal constraint-based formalism that extends context-free grammar. $$$$$ It has been the goal of the PATR group at SRI to utilize a relevant portion of this knowledge in implementing tools to facilitate communication of linguistic information to computers.
We borrow the terminology and notation of PATR-II (Shieber, 1984), a minimal constraint-based formalism that extends context-free grammar. $$$$$ The goal of natural-language processing research can be stated quite simply: to endow computers with human language capability.
We borrow the terminology and notation of PATR-II (Shieber, 1984), a minimal constraint-based formalism that extends context-free grammar. $$$$$ PATR-II but with several interesting extensions, including disjunction and negation in the graph structures [Karttunen, 84].
We borrow the terminology and notation of PATR-II (Shieber, 1984), a minimal constraint-based formalism that extends context-free grammar. $$$$$ This paper, a brief overview of that formalism, attempts to explicate our design decisions in terms of a set of properties that effective computer languages should incorporate.

Nearly all existing unification grammars of this kind use either term unification (the kind of unification used in resolution theorem provers, and hence provided as a primitive in PROLOG) or some version of the graph unification proposed by Kay (1985) and Shieber (1984). $$$$$ The author is indebted to Fernando Pereira, Barbara Grosz, and Ray Perrault for their comments on earlier drafts. tics.
Nearly all existing unification grammars of this kind use either term unification (the kind of unification used in resolution theorem provers, and hence provided as a primitive in PROLOG) or some version of the graph unification proposed by Kay (1985) and Shieber (1984). $$$$$ Rules are guaranteed to always mean the same thing, regardless of the environment of other rules in which they are placed.
Nearly all existing unification grammars of this kind use either term unification (the kind of unification used in resolution theorem provers, and hence provided as a primitive in PROLOG) or some version of the graph unification proposed by Kay (1985) and Shieber (1984). $$$$$ The PATR-TI formalism is our current computer language for encoding linguistic information.
Nearly all existing unification grammars of this kind use either term unification (the kind of unification used in resolution theorem provers, and hence provided as a primitive in PROLOG) or some version of the graph unification proposed by Kay (1985) and Shieber (1984). $$$$$ The PATR-II formalism was designed as a computer language for encoding linguistic information.

It is not, unfortunately, possible to keep it close to both FUG and PATR (Shieber 1984), but it should be possible for readers familiar with PATR to see roughly what the relation between the two is. $$$$$ This paper, a brief overview of that formalism, attempts to explicate our design decisions in terms of a set of properties that effective computer languages should incorporate.
It is not, unfortunately, possible to keep it close to both FUG and PATR (Shieber 1984), but it should be possible for readers familiar with PATR to see roughly what the relation between the two is. $$$$$ Similarly, by virtue of the unification associated with the S rule, the NP will have the same agr value as the VP and, consequently, the V. We have thus encoded a form of subject-verb agreement.

 $$$$$ For instance, a modal verb template may use an auxiliary verb template, which in term may be defined using the verb template above.
 $$$$$ A considerable body of accumulated knowledge about the design of languages for communicating information to computers has been derived from the subfields of programming language design and seman0575 with the Naval Electronic Systems Command.
 $$$$$ The variant forms can be derived through lexical rules applied in accordance with the morphology actually found on the verb.

Since formalisms (i) are used in the family of the PATR parsing systems (Shieber, 1984), hereafter they will be called PATR-like formalisms. $$$$$ It has been the goal of the PATR group at SRI to utilize a relevant portion of this knowledge in implementing tools to facilitate communication of linguistic information to computers.
Since formalisms (i) are used in the family of the PATR parsing systems (Shieber, 1984), hereafter they will be called PATR-like formalisms. $$$$$ Nevertheless, a good case could be made for maintaining at lea.st the decidability of determining whether a string is admitted by a PATR-II grammar.
Since formalisms (i) are used in the family of the PATR parsing systems (Shieber, 1984), hereafter they will be called PATR-like formalisms. $$$$$ These extensions will undoubtedly be integrated into the SRI systems and formal semantics for them are being pursued.
Since formalisms (i) are used in the family of the PATR parsing systems (Shieber, 1984), hereafter they will be called PATR-like formalisms. $$$$$ A considerable body of accumulated knowledge about the design of languages for communicating information to computers has been derived from the subfields of programming language design and semantics.
