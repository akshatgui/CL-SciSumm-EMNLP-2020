The method is an extension of the chart based generation algorithm described in Kay (1996). $$$$$ Nothing turns on these details which will differ with differing ontologies, logics, and views of semantic structure.
The method is an extension of the chart based generation algorithm described in Kay (1996). $$$$$ The fruitful interactions that occur here are between ran fast and ran quickly on the one hand, and John on the other.
The method is an extension of the chart based generation algorithm described in Kay (1996). $$$$$ An active edge A(...)IC(c ...) should be thought of as incident from, or accessible through, the index c. The key property of this scheme is that active and inactive edges interact by virtue of indices that they share and, by letting vertices correspond to indices, we collect together sets of edges that could interact.
The method is an extension of the chart based generation algorithm described in Kay (1996). $$$$$ 5 Indexing String positions provide a natural way to index the strings input to the parsing process for the simple reason that there are as many of them as there are words but, for there to be any possibility of interaction between a pair of edges, they must come together at just one index.

Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ This would be similar to allowing a given word to be covered by overlapping phrases in free word-order parsing.
Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ When run is moved, the sequence John ran is considered as a possible phrase on the basis of rule (3).
Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ Efficiency comes from collecting equivalent of phrases into (inactive) constructing edges from edges rather than phrases from phrases. edges. phrases of whatever size can be built by considering existing edges pair-wise if provision is made for partial phrases.
Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ In particular, we will be interested in the extent to which they bring to the generation process advantages comparable to those that make them attractive in parsing.

We will concentrate on a detailed description of these annotations as they are a crucial component of our method and they are the major difference between the current proposal and the one described in Kay (1996). $$$$$ One way to think of it, therefore, is as a parser of structures or logical forms that delivers analyses in the form of strings.
We will concentrate on a detailed description of these annotations as they are a crucial component of our method and they are the major difference between the current proposal and the one described in Kay (1996). $$$$$ Considerations of this kind were, in part, responsible for the recent resurgence of interest in &quot;flat&quot; representations of logical form (Copestake et a/.,I 996) and for the representations used for transfer in Shake-and-Bake translation (Whitelock, 1992).
We will concentrate on a detailed description of these annotations as they are a crucial component of our method and they are the major difference between the current proposal and the one described in Kay (1996). $$$$$ There can now be as many edges as bit-vectors and, not surprisingly, the computational complexity of the parsing process increases accordingly.

(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ In the modified version of the procedure, whenever a new inactive edge is created with label B(b ...). then for all rules of the form in (9), an active edge is also created with label A(...)/C(c ...).
(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ (3) below) show which variables from the two parts are to be identified.
(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ The final interaction is between the first and second edges in (17) which give rise to the edge in (18).
(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ The grammar is consulted only for the purpose of creating active edges and all interactions in the chart are between active and inactive pairs of edges incident from the d the dog np(d) d: dog(d), def(d) saw the vp(s, d)/np(d) s: see(s), past(s), cat argl(s, d), arg2(s, c), cat(c), def(c) c the cat np(c) c: cat(c), def(c) s saw the vp(s, d) s: see(s), past(s), cat argl(s, d), arg2(s, c), cat(c), def(c) Among the edges in (16), there are two interactions, one at vertices c and d. They cause the first and third edges in (17) to be added to the agenda.

The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ A chart parser for languages with free word order would be a minor variant of the standard one.
The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ The label on this edge matches the first item on the right-hand side of rule (12) and the active edge that we show in the second entry is also introduced.
The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ Arguments have been made in favor of a head-driven strategy which would, however, have been marginally more complex (e.g. in Kay (1989), Shieber, et el.
The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ For example, if there were languages with truly free word order, we might attempt to characterize them by rules like those of context-free grammar, but with a somewhat different interpretation.

Kay (1996) identified parsing charts as such an architecture, which led to the development of various chart generation algorithms: Carroll et al (1999) for HPSG, Bangalore et al (2000) for LTAG, Moore (2002) for unification grammars, White and Baldridge (2003) for CCG. $$$$$ Shieber (1988) showed that parsing charts can be also used in generation and raised the question, which we take up again here, of whether they constitute a natural uniform architecture for parsing and generation.
Kay (1996) identified parsing charts as such an architecture, which led to the development of various chart generation algorithms: Carroll et al (1999) for HPSG, Bangalore et al (2000) for LTAG, Moore (2002) for unification grammars, White and Baldridge (2003) for CCG. $$$$$ When the entry for John is moved, no interactions are possible because the chart is empty.
Kay (1996) identified parsing charts as such an architecture, which led to the development of various chart generation algorithms: Carroll et al (1999) for HPSG, Bangalore et al (2000) for LTAG, Moore (2002) for unification grammars, White and Baldridge (2003) for CCG. $$$$$ The fruitful interactions that occur here are between ran fast and ran quickly on the one hand, and John on the other.

In the chart realization tradition (Kay, 1996), the OpenCCG realizer takes logical forms as input and produces strings by combining signs for lexical items. $$$$$ Although the number of structures of a string can grow exponentially with the length of the string, the number of edges that needs to be constructed grows only with the square of the string length and the whole parsing process can be accomplished in cubic time.
In the chart realization tradition (Kay, 1996), the OpenCCG realizer takes logical forms as input and produces strings by combining signs for lexical items. $$$$$ (1989)) and the differences are, in any case, not germane to our current concerns.
In the chart realization tradition (Kay, 1996), the OpenCCG realizer takes logical forms as input and produces strings by combining signs for lexical items. $$$$$ An active edge A(...)IC(c ...) should be thought of as incident from, or accessible through, the index c. The key property of this scheme is that active and inactive edges interact by virtue of indices that they share and, by letting vertices correspond to indices, we collect together sets of edges that could interact.
In the chart realization tradition (Kay, 1996), the OpenCCG realizer takes logical forms as input and produces strings by combining signs for lexical items. $$$$$ The entries in (2), with their variables suitably instantiated, become the initial entries of an agenda and we begin to move them to the chart in accordance with the algorithm schema, say in the order given.

We followed two partial solutions to this problem by Kay (1996). $$$$$ Operationally, the attraction is that the notations can be analyzed largely as free word-order languages in the manner outlined above.
We followed two partial solutions to this problem by Kay (1996). $$$$$ Efficiency comes from collecting equivalent sets of phrases into (inactive) edges and constructing edges from edges rather than phrases from phrases.
We followed two partial solutions to this problem by Kay (1996). $$$$$ With appropriate replacements for variables, this maps onto the subset (4) of the original semantic specification in (1).

The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ Arguments have been made in favor of a head-driven strategy which would, however, have been marginally more complex (e.g. in Kay (1989), Shieber, et el.
The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ The entries in (2), with their variables suitably instantiated, become the initial entries of an agenda and we begin to move them to the chart in accordance with the algorithm schema, say in the order given.
The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ The positions in the string at which phrases begin and end can be used to index edges so that the algorithm schema need consider interactions only between adjacent pairs.
The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ Point 2 will have some importance for us because it will turn out that the indexing scheme we propose will require the use of distinct active and inactive edges, even when the rules are all binary.

It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ In these labels, b and c are (variables representing) the first, or distinguished indices associated with B and C. By analogy with parsing charts, an inactive edge labeled B(b ...) can be thought of as incident from vertex b, which means simply that it is efficiently accessible through the index b.
It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ In particular, we will be interested in the extent to which they bring to the generation process advantages comparable to those that make them attractive in parsing.
It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ An edge would take the form where v is a vector with a bit for every word in the string and showing which of those words the edge covers.

Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ They cannot fill this role in generation because they are not natural properties of the semantic expressions that are the input to the process.
Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ We conclude that, as a matter of principle, no edge should be constructed if the result of doing so would be to make internal an index occurring in part of the input semantics that the new phrase does not subsume.
Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ The final interaction is between the first and second edges in (17) which give rise to the edge in (18).
Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ This represents a phrase of category A that requires a phrase of category Con the right for its completion.

We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ It limits proliferation of the ill effects, however, by allowing only the maximal one to be incorporated in larger phrases.
We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ We concentrate on the phrase tall young Polish athlete which we assumed would be combined with the verb phrase ran fast by the rule (3).
We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ There can now be as many edges as bit-vectors and, not surprisingly, the computational complexity of the parsing process increases accordingly.
We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ We conclude that, as a matter of principle, no edge should be constructed if the result of doing so would be to make internal an index occurring in part of the input semantics that the new phrase does not subsume.

For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ This strategy does not prevent the generation of an exponential number of variants of phrases containing modifiers.
For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ The entries in (2), with their variables suitably instantiated, become the initial entries of an agenda and we begin to move them to the chart in accordance with the algorithm schema, say in the order given.
For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ (3) s(x) —> np(y), vp(x, y).
For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ The positions in the string at which phrases begin and end can be used to index edges so that the algorithm schema need consider interactions only between adjacent pairs.

The tree combining algorithm used after filtering has taken place, is a bottom-up tabular algorithm (Kay, 1996) optimised for TAGs. $$$$$ (11) dog(d), def(d), saw(s), past(s), cat(c), def(c), argl(s. d), arg2(s, c).
The tree combining algorithm used after filtering has taken place, is a bottom-up tabular algorithm (Kay, 1996) optimised for TAGs. $$$$$ 6 Acknowledgments Whatever there may be of value in this paper owes much to the interest, encouragement, and tolerance of my colleagues Marc Dymetman, Ronald Kaplan, John Maxwell, and Hadar Shem Toy.
The tree combining algorithm used after filtering has taken place, is a bottom-up tabular algorithm (Kay, 1996) optimised for TAGs. $$$$$ We conclude that, as a matter of principle, no edge should be constructed if the result of doing so would be to make internal an index occurring in part of the input semantics that the new phrase does not subsume.

The standard solution to this problem (cf. (Kay, 1996)) is to index edges with semantic indices (for instance, the edge with category N/x: dog (x) will be indexed with x) and to restrict edge combination to these edges which have compatible indices. $$$$$ We illustrate the modified procedure with the sentence The procedure will be reminiscent of left-corner parsing.
The standard solution to this problem (cf. (Kay, 1996)) is to index edges with semantic indices (for instance, the edge with category N/x: dog (x) will be indexed with x) and to restrict edge combination to these edges which have compatible indices. $$$$$ This view has the apparent disadvantage of putting insignificant differences in the syntax of a logical forms, such as the relative order of the arguments to symmetric operators, on the same footing as more significant facts about them.

More recently, Carroll and Oepen (2005) present a perfor 1As first noted by Brew (1992) and Kay (1996), given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed, i.e., 2n+1. $$$$$ Chart parsing is not a well defined notion.
More recently, Carroll and Oepen (2005) present a perfor 1As first noted by Brew (1992) and Kay (1996), given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed, i.e., 2n+1. $$$$$ Consider the expression (I) which we will take as a representation of the logical form of the sentences John ran fast and John ran quickly.
More recently, Carroll and Oepen (2005) present a perfor 1As first noted by Brew (1992) and Kay (1996), given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed, i.e., 2n+1. $$$$$ In other words, the semantics of a phrase must contain all predicates from the input specification that refer to any indices internal to it.
More recently, Carroll and Oepen (2005) present a perfor 1As first noted by Brew (1992) and Kay (1996), given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed, i.e., 2n+1. $$$$$ In other words, if the final result has phrases with m and n modifiers respectively, then 2' versions of the first and 211' of the second will be created, but only one of each set will be incorporated into larger phrases and no factor of 2'14-no will be introduced into the cost of the process.

The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ It limits proliferation of the ill effects, however, by allowing only the maximal one to be incorporated in larger phrases.
The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ Regardless of the number of alternative structures for a particular string that a given phrase participates in, it will be constructed once and only once.
The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ The initial agenda, including active edges, and collecting edges by the vertices that they are incident from, is given in (16).

The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ They have made semantic formalisms like those now usually associated with Davison (Davidson, 1980, Parsons, 1990) attractive in artificial intelligence for many years (Hobbs 1985, Kay, 1970).
The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ This view has the apparent disadvantage of putting insignificant differences in the syntax of a logical forms, such as the relative order of the arguments to symmetric operators, on the same footing as more significant facts about them.
The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ Active edges.
The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ This strategy does not prevent the generation of an exponential number of variants of phrases containing modifiers.

The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ The words newspaper and fast can also be deleted independently giving a grand total of 32 strings.
The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ The label on this edge matches the first item on the right-hand side of rule (12) and the active edge that we show in the second entry is also introduced.
The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ Assuming that adverbs modify verb phrases and not sentences, there will be no interactions when the John ran edge is moved to the chart.
The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ This represents a phrase of category A that requires a phrase of category Con the right for its completion.

This results in efficiently treating the well known problem originally described in Kay (1996), where one unnecessarily retains sub-optimal strings. $$$$$ The corresponding natural points of articulation in flat semantic structures are the entities that we have already been referring to as indices.
This results in efficiently treating the well known problem originally described in Kay (1996), where one unnecessarily retains sub-optimal strings. $$$$$ The grammar has access to indices only through the variables that annotate grammatical categories in its rules, so that rules that incorporate this sentence into larger phrases can have no further access to the index p. We therefore say that p is internal to the sentence the tall young Polish athlete ran fast.
This results in efficiently treating the well known problem originally described in Kay (1996), where one unnecessarily retains sub-optimal strings. $$$$$ 4.
