The method is an extension of the chart based generation algorithm described in Kay (1996). $$$$$ Newly created edges are placed on an agenda.
The method is an extension of the chart based generation algorithm described in Kay (1996). $$$$$ The index p would, of course, also be internal to the sentences the young Polish athlete ran fast, the tall Polish athlete ran fast, etc.

Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ These are the natural points of articulation in the domain of strings.
Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ Nothing turns on the fact that it uses a primitive version of event semantics.
Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ Innumerable variants of the basic chart parsing scheme are possible.
Kay (1996) provides a more general view of the chart structure which is designed to provide for generation advantages comparable to those it provides for parsing. $$$$$ The string ran fast constitutes a verb phrase by virtue of rule (5) giving the semantics (6), and the phrase ran quickly with the same semantics is put on the agenda when the quickly edge is move to the chart.

We will concentrate on a detailed description of these annotations as they are a crucial component of our method and they are the major difference between the current proposal and the one described in Kay (1996). $$$$$ They cannot fill this role in generation because they are not natural properties of the semantic expressions that are the input to the process.
We will concentrate on a detailed description of these annotations as they are a crucial component of our method and they are the major difference between the current proposal and the one described in Kay (1996). $$$$$ Several things are noteworthy about the process just outlined.
We will concentrate on a detailed description of these annotations as they are a crucial component of our method and they are the major difference between the current proposal and the one described in Kay (1996). $$$$$ Each is generated in its entirety, though finally rejected because it fails to account for all of the semantic material.

(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ The entries in (2), with their variables suitably instantiated, become the initial entries of an agenda and we begin to move them to the chart in accordance with the algorithm schema, say in the order given.
(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ We proposed eliminating this by means of a bit vector and the same technique applies here.
(Wang, 1980) uses handwritten rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) defines a chart based algorithm which enhances efficiency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based generation algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. $$$$$ Innumerable variants of the basic chart parsing scheme are possible.

The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ The distinguished index of the noun phrase, call it p, is identified with the variable y in the rule, but this variable is not associated with the syntactic category, s, on the left-hand side of the rule.
The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ Considerations of this kind were, in part, responsible for the recent resurgence of interest in &quot;flat&quot; representations of logical form (Copestake et a/.,I 996) and for the representations used for transfer in Shake-and-Bake translation (Whitelock, 1992).
The PCFG-based generation algorithms are implemented in terms of a chart generator (Kay, 1996). $$$$$ While the lexicon may have words to express these predicates, the grammar has no way of associating their referents with the above noun phrases because the variables corresponding to those referents are internal.

Kay (1996) identified parsing charts as such an architecture, which led to the development of various chart generation algorithms $$$$$ Assuming that adverbs modify verb phrases and not sentences, there will be no interactions when the John ran edge is moved to the chart.
Kay (1996) identified parsing charts as such an architecture, which led to the development of various chart generation algorithms $$$$$ Chart parsing is not a well defined notion.

In the chart realization tradition (Kay, 1996), the OpenCCG realizer takes logical forms as input and produces strings by combining signs for lexical items. $$$$$ In the modified version of the procedure, whenever a new inactive edge is created with label B(b ...). then for all rules of the form in (9), an active edge is also created with label A(...)/C(c ...).
In the chart realization tradition (Kay, 1996), the OpenCCG realizer takes logical forms as input and produces strings by combining signs for lexical items. $$$$$ An active edge A(...)IC(c ...) should be thought of as incident from, or accessible through, the index c. The key property of this scheme is that active and inactive edges interact by virtue of indices that they share and, by letting vertices correspond to indices, we collect together sets of edges that could interact.

We followed two partial solutions to this problem by Kay (1996). $$$$$ (3) below) show which variables from the two parts are to be identified.
We followed two partial solutions to this problem by Kay (1996). $$$$$ Interesting interactions occur between pairs of edges whose bit vectors have empty intersections, indicating that they cover disjoint sets of words.
We followed two partial solutions to this problem by Kay (1996). $$$$$ The positions in the string at which phrases begin and end can be used to index edges so that the algorithm schema need consider interactions only between adjacent pairs.

The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ The rules that sanction a phrase (e.g.
The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ The string ran fast constitutes a verb phrase by virtue of rule (5) giving the semantics (6), and the phrase ran quickly with the same semantics is put on the agenda when the quickly edge is move to the chart.
The baseline generation algorithm, following Kay (1996)'s work on chart generation, already contains the hard constraint that when combining two chart edges they must cover disjoint sets of words. $$$$$ However, in these cases, the semantic material remaining to be expressed contains predicates that refer to this internal index, say tall(p)' , and `young(p)'.

It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ Each is generated in its entirety, though finally rejected because it fails to account for all of the semantic material.
It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ The corresponding natural points of articulation in flat semantic structures are the entities that we have already been referring to as indices.
It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ The corresponding natural points of articulation in flat semantic structures are the entities that we have already been referring to as indices.
It is a bottom up, tabular algorithm [Kay, 1996] optimised for TAGs. $$$$$ Both are rejected, however, on the grounds that they would involve using a predicate from the original semantic specification more than once.

Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ Consider the expression (I) which we will take as a representation of the logical form of the sentences John ran fast and John ran quickly.
Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ While the lexicon may have words to express these predicates, the grammar has no way of associating their referents with the above noun phrases because the variables corresponding to those referents are internal.
Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ The first interacts with the active edge originally introduced by the verb &quot;saw&quot; producing the fourth entry in (17).
Following Stone and Doran (1997) and Kay (1996), we enhance this TAG grammar with a syntax-semantics interface in which nonterminal nodes of the elementary trees are equipped with index variables, which can be bound to individuals in the semantic input. $$$$$ There is no longer any notion of adjacency so that there would be no indexing by string position.

We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ In context-free grammar, all phrases of a given category that cover a given part of the string are equivalent for the purposes of constructing larger phrases.
We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ A generator, for our purposes, is the inverse.
We follow a bottom-up chart generation approach (Kay, 1996) for production systems similar to (Varges, 2005). $$$$$ In these labels, b and c are (variables representing) the first, or distinguished indices associated with B and C. By analogy with parsing charts, an inactive edge labeled B(b ...) can be thought of as incident from vertex b, which means simply that it is efficiently accessible through the index b.

For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ The distinguished index of the noun phrase, call it p, is identified with the variable y in the rule, but this variable is not associated with the syntactic category, s, on the left-hand side of the rule.
For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ Each is generated in its entirety, though finally rejected because it fails to account for all of the semantic material.
For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ The index p would, of course, also be internal to the young Polish athlete ran fast, the tall Polish ran fast, However, in these cases, the semantic material remaining to be expressed contains predicates that refer to this internal index, say tall(p)' , and `young(p)'.
For instance, (Kay, 1996) proposes to reduce the number of constituents built during realisation by only considering for combination constituents with non overlapping semantics and compatible indices. $$$$$ 6 Acknowledgments Whatever there may be of value in this paper owes much to the interest, encouragement, and tolerance of my colleagues Marc Dymetman, Ronald Kaplan, John Maxwell, and Hadar Shem Toy.

The tree combining algorithm used after filtering has taken place, is a bottom-up tabular algorithm (Kay, 1996) optimised for TAGs. $$$$$ Consider the expression (I) which we will take as a representation of the logical form of the sentences John ran fast and John ran quickly.
The tree combining algorithm used after filtering has taken place, is a bottom-up tabular algorithm (Kay, 1996) optimised for TAGs. $$$$$ (3) below) show which variables from the two parts are to be identified.
The tree combining algorithm used after filtering has taken place, is a bottom-up tabular algorithm (Kay, 1996) optimised for TAGs. $$$$$ Newly created edges are placed on an agenda.

The standard solution to this problem (cf. (Kay, 1996)) is to index edges with semantic indices (for instance, the edge with category N/x $$$$$ The final interaction is between the first and second edges in (17) which give rise to the edge in (18).
The standard solution to this problem (cf. (Kay, 1996)) is to index edges with semantic indices (for instance, the edge with category N/x $$$$$ The initial agenda, including active edges, and collecting edges by the vertices that they are incident from, is given in (16).

More recently, Carroll and Oepen (2005) present a perfor 1As first noted by Brew (1992) and Kay (1996), given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed, i.e., 2n+1. $$$$$ The distinguished index of the noun phrase, call it p, is identified with the variable y in the rule, but this variable is not associated with the syntactic category, s, on the left-hand side of the rule.
More recently, Carroll and Oepen (2005) present a perfor 1As first noted by Brew (1992) and Kay (1996), given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed, i.e., 2n+1. $$$$$ Edges are moved from the agenda to the chart one by one until none remains to be moved.

The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ Partial phrases are collected into edges that are said to be active because they can be thought of as actively seeking material to complete them.
The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ The predicates that represent the semantics of a phrase will simply be the union of those representing the constituents.
The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ When an edge is moved, all interactions between it and edges already in the chart are considered and any new edges that they give rise to are added to the agenda. positions in the string at which phrases begin and end can be used to index edges so that the algorithm schema need consider interactions only between adjacent pairs.
The work in Kay (1996) and the extension to ambiguous input in Shemtov (1996) and Shemtov (1997) describes a chart based generation process which takes packed representations as input and generates all paraphrases without expanding first into disjunctive normal form. $$$$$ Regardless of the number of alternative structures for a particular string that a given phrase participates in, it will be constructed once and only once.

The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ Assuming that adverbs modify verb phrases and not sentences, there will be no interactions when the John ran edge is moved to the chart.
The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ Interesting interactions occur between pairs of edges whose bit vectors have empty intersections, indicating that they cover disjoint sets of words.
The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ In the modified version of the procedure, whenever a new inactive edge is created with label B(b ...). then for all rules of the form in (9), an active edge is also created with label A(...)/C(c ...).
The basic surface realisation algorithm used is a bot tom up, tabular realisation algorithm (Kay, 1996) optimised for TAGs. $$$$$ Each is generated in its entirety, though finally rejected because it fails to account for all of the semantic material.

The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ This would be similar to allowing a given word to be covered by overlapping phrases in free word-order parsing.
The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ The label on this edge matches the first item on the right-hand side of rule (12) and the active edge that we show in the second entry is also introduced.
The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ With appropriate replacements for variables, this maps onto the subset (4) of the original semantic specification in (1).
The generation algorithm is based on chart generation as first introduced by Kay (1996) with Viterbi-pruning. $$$$$ The predicates that represent the semantics of a phrase will simply be the union of those representing the constituents.

This results in efficiently treating the well known problem originally described in Kay (1996), where one unnecessarily retains sub-optimal strings. $$$$$ This represents a phrase of category A that requires a phrase of category Con the right for its completion.
This results in efficiently treating the well known problem originally described in Kay (1996), where one unnecessarily retains sub-optimal strings. $$$$$ Efficiency comes from collecting equivalent sets of phrases into (inactive) edges and constructing edges from edges rather than phrases from phrases.
This results in efficiently treating the well known problem originally described in Kay (1996), where one unnecessarily retains sub-optimal strings. $$$$$ Partial phrases are collected into edges that are said to be active because they can be thought of as actively seeking material to complete them.
