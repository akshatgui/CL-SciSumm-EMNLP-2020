These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ Figure 2 also shows the final supertag sequence assigned by the supertagger, which picks the best supertag sequence using statistical information (described in Section 6) about individual supertags and their dependencies on other supertags.
These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ In Section 7, we discuss the efficiency gained in performing supertag disambiguation before parsing.
These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ Further, it is necessary to associate each lexical item with as many descriptions as the number of different syntactic contexts in which the lexical item can appear.
These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ They can be broadly categorized under two paradigms—finite-state-grammarbased parsers and statistical parsers.

Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ They combine with elementary trees by the operation of adjunction.
Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ Elementary trees are of two kinds: (a) initial trees and (b) auxiliary trees.
Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ As can be seen, the average reduction in supertag ambiguity is about 50%.
Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ Elementary trees are of two kinds: (a) Initial Trees and (b) Auxiliary Trees.

We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ This constitutes the lexicon.
We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ This makes the number of different descriptions for each lexical item much larger than when the descriptions are less complex, thus increasing the local ambiguity for a parser.
We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ Some of these constraints can be checked locally.
We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ This makes the number of different descriptions for each lexical item much larger than when the descriptions are less complex, thus increasing the local ambiguity for a parser.

Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ These parsers always produce one output, since they use the longestmatch heuristic to resolve cases of ambiguity when more than one regular expression matches the input string at a given position.
Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ The idea of supertagging can also be applied to a grammar in HPSG formalism indirectly, by compiling the HPSG grammar into an LTAG grammar (Kasper et al. 1995).
Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ An example of this is the elimination of supertag that requires a wh+ NP when the input string does not contain wh-words.
Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ This makes the number of different descriptions for each lexical item much larger than when the descriptions are less complex, thus increasing the local ambiguity for a parser.

The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ An elementary tree serves as a complex description of the anchor and provides a domain of locality over which the anchor can specify syntactic and semantic (predicate argument) constraints.
The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ Supertag disambiguation results in a representation that is effectively a parse (an almost parse), and the parser need &quot;only&quot; combine the individual supertags.
The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ It was partially supported by NSF grant NSF-STC SBR 8920230, ARPA grant N00014-94 and ARO grant DAAH04-94-G0426.
The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ A version of the supertagger trained on the WSJ corpus is available under GNU Public License from http: / / www.cis.upenn.edu / —xtag / swrelease.html.

The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ In fact they reduce to typed terms that can be combined by simple term-like unification.
The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ Auxiliary trees, by adjunction to elementary trees, account for the longdistance behavior of these dependencies.
The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ We first employed these ideas in the context of Lexicalized Tree Adjoining grammars (LTAG) in Joshi and Srinivas (1994).
The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ The supertags in LTAG combine both phrase structure information and dependency information in a single representation.

Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ Substitution inserts elementary trees at the substitution nodes of other elementary trees.
Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ Some of these constraints can be checked locally.
Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ The result of combining the elementary trees is the derived tree and the process of combining the elementary trees to yield a parse of the sentence is represented by the derivation tree.

As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ The graph in Figure 3 plots the number of supertags at the sentence level for sentences of length 2 to 50 words with and without the filters.
As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ The supertags are designed such that only those elements on which the lexical item imposes constraints appear within a given supertag.
As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ Note that even when a word has a unique standard part of speech, say a verb (V), there will usually be more than one supertag associated with this word.
As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ There can be many ways of constructing the elementary structures of a grammar so as to possess the EDL property.

Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ This work was done when the first author was at the University of Pennsylvania.
Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ We are currently working on evaluating the performance of this supertagger.
Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ Our thesis is that the computation of linguistic structure can be localized if lexical items are associated with rich descriptions (supertags) that impose complex constraints in a local context.
Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ Each elementary tree is associated with at least one lexical item on its frontier.

We used the supertagger of Bangalore and Joshi (1999). $$$$$ An elementary tree serves as a complex description of the anchor and provides a domain of locality over which the anchor can specify syntactic and semantic (predicate argument) constraints.
We used the supertagger of Bangalore and Joshi (1999). $$$$$ Since that early work, we have improved the performance of the model by incorporating lexical information and sophisticated smoothing techniques, as well as training on larger training sets.
We used the supertagger of Bangalore and Joshi (1999). $$$$$ They combine with elementary trees by the operation of adjunction.

This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ In the next few sections, we present stochastic and rule-based approaches to supertag disambiguation.
This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ But this local ambiguity can be resolved by using statistical distributions of supertag co-occurrences collected from a corpus of parses.
This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ The derivations provide In this section, we define the key properties of LTAGs: lexicalization, Extended Domain of Locality (EDL), and factoring of recursion from the domain of dependency (FRD), and discuss how these properties are realized in natural language grammars written in LTAGs.
This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ Each elementary tree is associated with at least one lexical item on its frontier.

It was first introduced as a means of reducing parser ambiguity by Bangalore and Joshi (1999) in the context of the LTAG formalism, and has since been applied in a similar context within the CCG formalism (Clark and Curran, 2004). $$$$$ Auxiliary trees, by adjunction to elementary trees, account for the longdistance behavior of these dependencies.
It was first introduced as a means of reducing parser ambiguity by Bangalore and Joshi (1999) in the context of the LTAG formalism, and has since been applied in a similar context within the CCG formalism (Clark and Curran, 2004). $$$$$ A more direct approach would be to tag words with feature structures that represent supertags (Kempe 1994).

It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ The contextual probabilities were estimated using the relative frequency estimates of the contexts in the training corpus.
It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ Parsing a sentence in this framework amounts to eliminating as many implausible functional tags as possible for each word, given the context of the sentence.
It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ The supertags are designed such that only those elements on which the lexical item imposes constraints appear within a given supertag.
It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ Since there is only one supertag for each word (assuming there is no global ambiguity) when the parse is complete, an LTAG parser (Schabes, Abeille, and Joshi 1988) needs to search a large space of supertags to select the right one for each word before combining them for the parse of a sentence.

We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ Supertag disambiguation results in a representation that is effectively a parse (an almost parse), and the parser need &quot;only&quot; combine the individual supertags.
We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ Our thesis is that the computation of linguistic structure can be localized if lexical items are associated with rich descriptions (supertags) that impose complex constraints in a local context.
We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ We are currently developing supertaggers for other languages.
We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ They combine with elementary trees by the operation of adjunction.

In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ The node being adjoined to splits, and its top FS unifies with the top FS of the root node of the auxiliary tree, while its bottom FS unifies with the bottom FS of the foot node of the auxiliary tree.
In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ In Section 9, we will discuss the applicability of supertag disambiguation to other lexicalized grammars.
In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ However, by requiring that the constructed elementary structures be &quot;minimal,&quot; the third property of LTAGs namely, factoring of recursion from the domain of dependencies, follows as a corollary of EDL.

Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ We would like to thank Steven Abney, Raman Chandrasekar, Christine Doran, Beth Ann Hockey, Mark Liberman, Mitch Marcus, and Mark Steedman for useful comments and discussions which have helped shape this work.
Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ We briefly present these two paradigms and situate our approach to robust parsing relative to these paradigms.
Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ Elementary trees define the domain for stating dependencies such as agreement, subcategorization, and filler-gap dependencies.
Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ Elementary trees define the domain for stating dependencies such as agreement, subcategorization, and filler-gap dependencies.

The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ We first explored the use of trigram model of supertag disambiguation in Joshi and Srinivas (1994).
The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ Elementary trees are of two kinds: (a) initial trees and (b) auxiliary trees.
The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ We would like to thank Steven Abney, Raman Chandrasekar, Christine Doran, Beth Ann Hockey, Mark Liberman, Mitch Marcus, and Mark Steedman for useful comments and discussions which have helped shape this work.
The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ This makes the number of different descriptions for each lexical item much larger than when the descriptions are less complex, thus increasing the local ambiguity for a parser.

We automatically annotate a user's utterance with super tags (Bangalore and Joshi, 1999). $$$$$ We call the elementary structures associated with each lexical item super parts-of-speech (super POS) or supertags.3 Figure 1 illustrates a few elementary trees associated with each word of the sentence: the purchase price includes two ancillary companies.
We automatically annotate a user's utterance with super tags (Bangalore and Joshi, 1999). $$$$$ Figure 2 also shows the final supertag sequence assigned by the supertagger, which picks the best supertag sequence using statistical information (described in Section 6) about individual supertags and their dependencies on other supertags.

The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ These systems attempt to assign some structure to every input string.
The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ This makes the number of different descriptions for each lexical item much larger than when the descriptions are less complex, thus increasing the local ambiguity for a parser.
The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ The obvious solution is to put the burden of this job entirely on the parser.
The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ In this paper, we have proposed novel methods for robust parsing that integrate the flexibility of linguistically motivated lexical descriptions with the robustness of statistical techniques.

Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ An additional advantage of a grammar possessing FRD and EDL properties is that feature structures in these grammars are extremely simple.
Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ In this paper, we present a robust parsing approach called supertagging that integrates the flexibility of linguistically motivated lexical descriptions with the robustness of statistical techniques.
Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ In this paper, we present vastly improved supertag disambiguation results—from previously published 68% accuracy to 92% accuracy using a larger training corpus and better smoothing techniques.
