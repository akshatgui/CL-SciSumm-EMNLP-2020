These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ The lexical item associated with an elementary tree is called the anchor of that tree.
These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ The corpus was then randomly split into training and test material.
These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ These templates are then instantiated with the appropriate features to obtain transformation rules.
These are much finer grained than Penn Treebank preterminals tags, and more akin to those used in Tree Adjoining Grammar models (Bangalore and Joshi,1999). $$$$$ The derivation tree can also be interpreted as a dependency tree with unlabeled arcs between words of the sentence.

Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ In the second stage, the parser searches the lattice of selected supertags in an attempt to combine them using substitution and adjunction operations so as to yield a derivation that spans the input string.
Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ This reduction in supertag ambiguity speeds up the parser significantly.
Supertags are the elementary structures of Lexicalized Tree Adjoining Grammars (LTAGs) (Bangalore and Joshi, 1999). $$$$$ It produced a correct supertag for 68% of the words in the test set.

We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ In fact they reduce to typed terms that can be combined by simple term-like unification.
We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ This work was done when the first author was at the University of Pennsylvania.
We used the supertagger (Bangalore and Joshi, 1999) to supertag each word in the corpus. $$$$$ In this framework, each word is associated with the set of possible functional tags that it may be assigned in the language.

Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ In a lexicalized grammar such as the Lexicalized Tree Adjoining Grammar (LTAG), each lexical item is associated with at least one elementary structure (tree).
Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ These categories have been used to tag the same training and test corpora used in the supertagging experiments discussed in this paper and a supertagger to disambiguate the CCG categories has been developed.
Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ The graph in Figure 4 shows the percentage drop in supertag ambiguity due to filtering for sentences of length 2 to 50 words.
Insertion of further information such as supertags (Bangalore and Joshi, 1999) or word stems can also be beneficial for further processing. $$$$$ The idea of supertagging can also be applied to a grammar in HPSG formalism indirectly, by compiling the HPSG grammar into an LTAG grammar (Kasper et al. 1995).

The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ We are presently analyzing the performance of the supertagger using the LTAG trees and the CCG categories.
The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ Each elementary tree is associated with at least one lexical item on its frontier.
The process is quite similar to supertagging (Bangalore and Joshi, 1999), which assigns rich descriptions (supertags) that impose complex constraints in a local context. $$$$$ In this framework, each word is associated with the set of possible functional tags that it may be assigned in the language.

The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ We would like to thank Steven Abney, Raman Chandrasekar, Christine Doran, Beth Ann Hockey, Mark Liberman, Mitch Marcus, and Mark Steedman for useful comments and discussions which have helped shape this work.
The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ In this framework, each word is associated with the set of possible functional tags that it may be assigned in the language.
The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ As in standard part-of-speech disambiguation, we can use local statistical information in the form of n-gram models based on the distribution of supertags in an LTAG parsed corpus.
The notions of a supertag as a lexical category and the process of supertagging are both crucial here (Bangalore and Joshi, 1999). $$$$$ LTAGs, by virtue of possessing the Extended Domain of Locality (EDL) property,' associate with each lexical item, one elementary tree for each syntactic environment that an Noun Phrase companies have not been profitable the lexical item may appear in.

Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ In Section 9, we will discuss the applicability of supertag disambiguation to other lexicalized grammars.
Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ Figure 2 also shows the final supertag sequence assigned by the supertagger, which picks the best supertag sequence using statistical information (described in Section 6) about individual supertags and their dependencies on other supertags.
Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ In this paper, we present a robust parsing approach called supertagging that integrates the flexibility of linguistically motivated lexical descriptions with the robustness of statistical techniques.
Bangalore and Joshi (1999) indicated that, correct disambiguation with supertagging, i.e., assignment of lexical entries before parsing, enabled effective LTAG (Lexicalized Tree-Adjoining Grammar) parsing. $$$$$ The resultant set of rules are not linguistically transparent and are not easily modifiable.

As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ After supertag disambiguation, we would have effectively completed the parse and the parser need &quot;only&quot; combine the individual structures; hence the term &quot;almost parsing.&quot; This method can also be used to associate a structure to sentence fragments and in cases where the supertag sequence after disambiguation may not combine into a single structure.
As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ Each elementary tree is associated with at least one lexical item on its frontier.
As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ In an FB-LTAG grammar for natural language, initial trees are phrase structure trees of simple sentences containing no recursion, while recursive structures are represented by auxiliary trees.
As methodologies deriving well-formedness of a sentence we use super tagging (Bangalore and Joshi, 1999) with lightweight dependency analysis (LDA) (Bangalore, 2000), link grammars (Sleator and Temperley, 1993) and a maximum entropy (ME) based chunk parser (Bender et al, 2003). $$$$$ This is also true for the IBM Manual corpus, although to a lesser extent.

Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ As can be seen from the graph, the supertag ambiguity is significantly lower when the filters are used.
Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ The idea is to locally check the constraints that are associated with the descriptions of lexical items to filter out incompatible descriptions.1 During this disambiguation, the system can also exploit statistical information that can be associated with the descriptions based on their distribution in a corpus of parses.
Supertagging (Bangalore and Joshi, 1999) uses the Lexicalized Tree Adjoining Grammar formalism (LTAG). $$$$$ In this paper, we have proposed novel methods for robust parsing that integrate the flexibility of linguistically motivated lexical descriptions with the robustness of statistical techniques.

We used the supertagger of Bangalore and Joshi (1999). $$$$$ In LTAGs, recursive constructs are represented as auxiliary trees.
We used the supertagger of Bangalore and Joshi (1999). $$$$$ Each elementary tree is associated with at least one lexical item on its frontier.
We used the supertagger of Bangalore and Joshi (1999). $$$$$ 7.
We used the supertagger of Bangalore and Joshi (1999). $$$$$ An approach that is closely related to supertagging is the reductionist approach to parsing that is being carried out under the Constraint Grammar framework (Karlsson et al. 1994; Voutilainen 1994; Tapanainen and Jarvinen 1994).

This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ Notice that the elements appearing in the tree are only those that serve as arguments to the anchor and nothing else.
This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ The lexical item associated with an elementary tree is called the anchor of that tree.
This is a variant of the approach above, but using super tags (Bangalore and Joshi, 1999) instead of PoS tags. $$$$$ We first employed these ideas in the context of Lexicalized Tree Adjoining grammars (LTAG) in Joshi and Srinivas (1994).

It was first introduced as a means of reducing parser ambiguity by Bangalore and Joshi (1999) in the context of the LTAG formalism, and has since been applied in a similar context within the CCG formalism (Clark and Curran, 2004). $$$$$ We would like to thank Steven Abney, Raman Chandrasekar, Christine Doran, Beth Ann Hockey, Mark Liberman, Mitch Marcus, and Mark Steedman for useful comments and discussions which have helped shape this work.
It was first introduced as a means of reducing parser ambiguity by Bangalore and Joshi (1999) in the context of the LTAG formalism, and has since been applied in a similar context within the CCG formalism (Clark and Curran, 2004). $$$$$ The supertags are designed such that only those elements on which the lexical item imposes constraints appear within a given supertag.
It was first introduced as a means of reducing parser ambiguity by Bangalore and Joshi (1999) in the context of the LTAG formalism, and has since been applied in a similar context within the CCG formalism (Clark and Curran, 2004). $$$$$ We also thank the reviewers for their insightful comments and suggestions to improve an earlier version of this paper.
It was first introduced as a means of reducing parser ambiguity by Bangalore and Joshi (1999) in the context of the LTAG formalism, and has since been applied in a similar context within the CCG formalism (Clark and Curran, 2004). $$$$$ Supertag disambiguation results in a representation that is effectively a parse (an almost parse), and the parser need &quot;only&quot; combine the individual supertags.

It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ We also thank the reviewers for their insightful comments and suggestions to improve an earlier version of this paper.
It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ The supertags in LTAG combine both phrase structure information and dependency information in a single representation.
It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ Further, each lexical item is associated with as many supertags as the number of different syntactic contexts in which the lexical item can appear.
It was first proposed for lexicalized tree adjoining grammar (LTAG) (Bangalore and Joshi, 1999). $$$$$ This reduction in supertag ambiguity speeds up the parser significantly.

We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ They combine with elementary trees by the operation of adjunction.
We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ Although this extension would increase the load on the parser, it would certainly improve the chances of arriving at a parse for a sentence.
We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ Auxiliary trees, by adjunction to elementary trees, account for the longdistance behavior of these dependencies.
We condition prosody not only on word strings and their parts-of-speech but also on richer syntactic information encapsulated in the form of Supertags (Bangalore and Joshi, 1999). $$$$$ But this local ambiguity can be resolved by using statistical distributions of supertag co-occurrences collected from a corpus of parses.

In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ As is well known, these taggers are quite successful.
In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ Auxiliary trees, by adjunction to elementary trees, account for the longdistance behavior of these dependencies.
In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ The derivation tree can also be interpreted as a dependency tree with unlabeled arcs between words of the sentence, as shown in Figure 8(c).
In addition to the POS tags, we also annotate the utterance with Supertags (Bangalore and Joshi, 1999). $$$$$ This method of parsing can also be used to parse sentence fragments such as in spoken utterances where the disambiguated supertag sequence may not combine into a single structure.

Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ We also thank the reviewers for their insightful comments and suggestions to improve an earlier version of this paper.
Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ Lexicalizatiort provides a clean interface for combining the syntactic and semantic information in the lexicon.
Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ The graph in Figure 3 plots the number of supertags at the sentence level for sentences of length 2 to 50 words with and without the filters.
Supertags have been successfully applied to guide parsing in symbolic frameworks such as Lexicalised Tree-Adjoning grammar (Bangalore and Joshi, 1999). $$$$$ Supertags with the built-in lexical item by, that represent passive constructions are typically eliminated from being considered during the parse of an active sentence.

The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ In LTAGs, recursive constructs are represented as auxiliary trees.
The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ Further, it is necessary to associate each lexical item with as many descriptions as the number of different syntactic contexts in which the lexical item can appear.
The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ Lexicalizatiort provides a clean interface for combining the syntactic and semantic information in the lexicon.
The parser uses a two-stage system, first employing a super tagger (Bangalore and Joshi, 1999) to propose lexical categories for each word, and then applying the CKY chart parsing algorithm. $$$$$ In fact they reduce to typed terms that can be combined by simple term-like unification.

We automatically annotate a user's utterance with super tags (Bangalore and Joshi, 1999). $$$$$ Lexical and structural ambiguity is resolved using probability information that is encoded in the rules.
We automatically annotate a user's utterance with super tags (Bangalore and Joshi, 1999). $$$$$ An approach that is closely related to supertagging is the reductionist approach to parsing that is being carried out under the Constraint Grammar framework (Karlsson et al. 1994; Voutilainen 1994; Tapanainen and Jarvinen 1994).
We automatically annotate a user's utterance with super tags (Bangalore and Joshi, 1999). $$$$$ The supertags in LTAG combine both phrase structure information and dependency information in a single representation.
We automatically annotate a user's utterance with super tags (Bangalore and Joshi, 1999). $$$$$ We have explored these ideas in the context of the Lexicalized Tree-Adjoining Grammar (LTAG) framework.

The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ This work was done when the first author was at the University of Pennsylvania.
The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ The primitive elements of FB-LTAGs are called elementary trees.
The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ Supertags with the built-in lexical item by, that represent passive constructions are typically eliminated from being considered during the parse of an active sentence.
The second direction concerns experiments on supertagging (Bangalore and Joshi, 1999) followed by a parsing stage the tagging stage associates to each word a supertag. $$$$$ However, this local ambiguity can be resolved by using statistical distributions of supertag co-occurrences collected from a corpus of parses.

Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ The supertags in LTAG combine both phrase structure information and dependency information in a single representation.
Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ Note that even when a word has a unique standard part of speech, say a verb (V), there will usually be more than one supertag associated with this word.
Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ This work was done when the first author was at the University of Pennsylvania.
Bangalore and Joshi (1999), Clark and Curran (2004) and Matsuzaki et al (2007) show that by using a supertagger before (CCG and HPSG) parsing, the space required for discriminative training is drastically reduced. $$$$$ Since the recursion has been factored out of the domain of dependency, and since the domain is large enough for agreement, subcategorization, and filler-gap dependencies, feature structures in such systems do not involve any recursion.
