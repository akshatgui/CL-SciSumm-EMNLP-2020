col1,col2
An efficient bit-vector-based CKY-style parser for context-free parsing is presented.,Introduction
The parser computes a compact parse forest representation of the complete set of possible analyses forlarge treebank grammars and long input sen tences.,Introduction
The parser uses bit-vector operations to parallelise the basic parsing operations.,Introduction
The parser is particularly useful when all analyses are needed rather than just the most probable one.,Introduction
"Large context-free grammars extracted from tree banks achieve high coverage and accuracy, but they are difficult to parse with because of their massive ambiguity.",Results/Conclusion
"The application of standard chart-parsing techniques often fails due to excessive memory and runtime requirements.Treebank grammars are mostly used as probabilis tic grammars and users are usually only interested in the best analysis, the Viterbi parse.",Results/Conclusion
"To speed up Viterbi parsing, sophisticated search strategies havebeen developed which find the most probable anal ysis without examining the whole set of possible analyses (Charniak et al, 1998; Klein and Manning,2003a).",Results/Conclusion
"These methods reduce the number of gener ated edges, but increase the amount of time needed for each edge.",Results/Conclusion
"The parser described in this paper follows a contrary approach: instead of reducing the number of edges, it minimises the costs of building edges in terms of memory and runtime.The new parser, called BitPar, is based on a bit vector implementation (cf.",Results/Conclusion
"(Graham et al, 1980)) of the well-known Cocke-Younger-Kasami (CKY) algorithm (Kasami, 1965; Younger, 1967).",Results/Conclusion
It buildsa compact ?parse forest?,Results/Conclusion
representation of all anal yses in two steps.,Results/Conclusion
"In the first step, a CKY-style recogniser fills the chart with constituents.",Results/Conclusion
"In the second step, the parse forest is built top-down from the chart.",Results/Conclusion
Viterbi parses are computed in four steps.,Results/Conclusion
"Again, the first step is a CKY recogniser which is followed by a top-down filtering of the chart, the bottom-up computation of the Viterbi probabilities, and the top-down extraction of the best parse.The rest of the paper is organised as follows: Sec tion 2 explains the transformation of the grammar to Chomsky normal form.",Results/Conclusion
The following sectionsdescribe the recogniser algorithm (Sec.,Results/Conclusion
"3), improvements of the recogniser by means of bit-vector op erations (Sec.",Results/Conclusion
"4), and the generation of parse forests(Sec.",Results/Conclusion
"5), and Viterbi parses (Sec.",Results/Conclusion
6).,Results/Conclusion
"Section 7 discusses the advantages of the new architecture, Sec tion 8 describes experimental results, and Section 9 summarises the paper.",Results/Conclusion
The CKY algorithm requires a grammar in Chom sky normal form where the right-hand side of eachrule either consists of two non-terminals or a single terminal symbol.,Results/Conclusion
BitPar uses a modified ver sion of the CKY algorithm allowing also chain rules (rules with a single non-terminal on the right-handside).,Results/Conclusion
BitPar expects that the input grammar is al ready epsilon-free and that terminal symbols onlyoccur in unary rules.,Results/Conclusion
Rules with more than 2 non terminals on the right-hand side are split into binaryrules by applying a transformation algorithm pro posed by Andreas Eisele1.,Results/Conclusion
It is a greedy algorithm which tries to minimise the number of binarised rules by combining frequently cooccurring symbols first.,Results/Conclusion
The algorithm consists of the following twosteps which are iterated until all rules are either bi nary or unary.,Results/Conclusion
1.,Results/Conclusion
Compute the frequencies of the pairs of neigh-.,Results/Conclusion
boring symbols on the right-hand sides of rules.,Results/Conclusion
(The rule A ,Results/Conclusion
