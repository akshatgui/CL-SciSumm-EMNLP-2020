col1,col2
"Natural language parsing has typically been done with small sets of discrete categories such as NP and VP, but this representation does not capture the full syntactic nor semantic richness of linguistic phrases, and attempts to improve on this by lexicalizing phrases or splitting categories only partly address the problem at the cost of huge feature spaces and sparseness.",{}
"Instead, we introduce a Compositional Vector Grammar (CVG), which combines PCFGs with a syntactically untied recursive neural network that learns syntactico-semantic, compositional vector representations.",{}
The CVG improves the PCFG of the Stanford Parser by 3.8% to obtain an F1 score of 90.4%.,{}
It is fast to train and implemented approximately as an efficient reranker it is about 20% faster than the current Stanford factored parser.,{}
The CVG learns a soft notion of head words and improves performance on the types of ambiguities that require semantic information such as PP attachments.,{}
Syntactic parsing is a central task in natural language processing because of its importance in mediating between linguistic expression and meaning.,"{'title': '1 Introduction', 'number': '1'}"
"For example, much work has shown the usefulness of syntactic representations for subsequent tasks such as relation extraction, semantic role labeling (Gildea and Palmer, 2002) and paraphrase detection (Callison-Burch, 2008).","{'title': '1 Introduction', 'number': '1'}"
Syntactic descriptions standardly use coarse discrete categories such as NP for noun phrases or PP for prepositional phrases.,"{'title': '1 Introduction', 'number': '1'}"
"However, recent work has shown that parsing results can be greatly improved by defining more fine-grained syntactic gory,vector) representations at each node.","{'title': '1 Introduction', 'number': '1'}"
"The vectors for nonterminals are computed via a new type of recursive neural network which is conditioned on syntactic categories from a PCFG. categories, which better capture phrases with similar behavior, whether through manual feature engineering (Klein and Manning, 2003a) or automatic learning (Petrov et al., 2006).","{'title': '1 Introduction', 'number': '1'}"
"However, subdividing a category like NP into 30 or 60 subcategories can only provide a very limited representation of phrase meaning and semantic similarity.","{'title': '1 Introduction', 'number': '1'}"
Two strands of work therefore attempt to go further.,"{'title': '1 Introduction', 'number': '1'}"
"First, recent work in discriminative parsing has shown gains from careful engineering of features (Taskar et al., 2004; Finkel et al., 2008).","{'title': '1 Introduction', 'number': '1'}"
Features in such parsers can be seen as defining effective dimensions of similarity between categories.,"{'title': '1 Introduction', 'number': '1'}"
"Second, lexicalized parsers (Collins, 2003; Charniak, 2000) associate each category with a lexical item.","{'title': '1 Introduction', 'number': '1'}"
"This gives a fine-grained notion of semantic similarity, which is useful for tackling problems like ambiguous attachment decisions.","{'title': '1 Introduction', 'number': '1'}"
"However, this approach necessitates complex shrinkage estimation schemes to deal with the sparsity of observations of the lexicalized categories.","{'title': '1 Introduction', 'number': '1'}"
"In many natural language systems, single words and n-grams are usefully described by their distributional similarities (Brown et al., 1992), among many others.","{'title': '1 Introduction', 'number': '1'}"
"But, even with large corpora, many n-grams will never be seen during training, especially when n is large.","{'title': '1 Introduction', 'number': '1'}"
"In these cases, one cannot simply use distributional similarities to represent unseen phrases.","{'title': '1 Introduction', 'number': '1'}"
"In this work, we present a new solution to learn features and phrase representations even for very long, unseen n-grams.","{'title': '1 Introduction', 'number': '1'}"
We introduce a Compositional Vector Grammar Parser (CVG) for structure prediction.,"{'title': '1 Introduction', 'number': '1'}"
"Like the above work on parsing, the model addresses the problem of representing phrases and categories.","{'title': '1 Introduction', 'number': '1'}"
"Unlike them, it jointly learns how to parse and how to represent phrases as both discrete categories and continuous vectors as illustrated in Fig.","{'title': '1 Introduction', 'number': '1'}"
1.,"{'title': '1 Introduction', 'number': '1'}"
CVGs combine the advantages of standard probabilistic context free grammars (PCFG) with those of recursive neural networks (RNNs).,"{'title': '1 Introduction', 'number': '1'}"
The former can capture the discrete categorization of phrases into NP or PP while the latter can capture fine-grained syntactic and compositional-semantic information on phrases and words.,"{'title': '1 Introduction', 'number': '1'}"
"This information can help in cases where syntactic ambiguity can only be resolved with semantic information, such as in the PP attachment of the two sentences: They ate udon with forks. vs.","{'title': '1 Introduction', 'number': '1'}"
They ate udon with chicken.,"{'title': '1 Introduction', 'number': '1'}"
"Previous RNN-based parsers used the same (tied) weights at all nodes to compute the vector representing a constituent (Socher et al., 2011b).","{'title': '1 Introduction', 'number': '1'}"
"This requires the composition function to be extremely powerful, since it has to combine phrases with different syntactic head words, and it is hard to optimize since the parameters form a very deep neural network.","{'title': '1 Introduction', 'number': '1'}"
We generalize the fully tied RNN to one with syntactically untied weights.,"{'title': '1 Introduction', 'number': '1'}"
The weights at each node are conditionally dependent on the categories of the child constituents.,"{'title': '1 Introduction', 'number': '1'}"
This allows different composition functions when combining different types of phrases and is shown to result in a large improvement in parsing accuracy.,"{'title': '1 Introduction', 'number': '1'}"
Our compositional distributed representation allows a CVG parser to make accurate parsing decisions and capture similarities between phrases and sentences.,"{'title': '1 Introduction', 'number': '1'}"
Any PCFG-based parser can be improved with an RNN.,"{'title': '1 Introduction', 'number': '1'}"
"We use a simplified version of the Stanford Parser (Klein and Manning, 2003a) as the base PCFG and improve its accuracy from 86.56 to 90.44% labeled F1 on all sentences of the WSJ section 23.","{'title': '1 Introduction', 'number': '1'}"
The code of our parser is available at nlp.stanford.edu.,"{'title': '1 Introduction', 'number': '1'}"
The CVG is inspired by two lines of research: Enriching PCFG parsers through more diverse sets of discrete states and recursive deep learning models that jointly learn classifiers and continuous feature representations for variable-sized inputs.,"{'title': '2 Related Work', 'number': '2'}"
"As mentioned in the introduction, there are several approaches to improving discrete representations for parsing.","{'title': '2 Related Work', 'number': '2'}"
"Klein and Manning (2003a) use manual feature engineering, while Petrov et al. (2006) use a learning algorithm that splits and merges the syntactic categories in order to maximize likelihood on the treebank.","{'title': '2 Related Work', 'number': '2'}"
Their approach splits categories into several dozen subcategories.,"{'title': '2 Related Work', 'number': '2'}"
"Another approach is lexicalized parsers (Collins, 2003; Charniak, 2000) that describe each category with a lexical item, usually the head word.","{'title': '2 Related Work', 'number': '2'}"
"More recently, Hall and Klein (2012) combine several such annotation schemes in a factored parser.","{'title': '2 Related Work', 'number': '2'}"
We extend the above ideas from discrete representations to richer continuous ones.,"{'title': '2 Related Work', 'number': '2'}"
The CVG can be seen as factoring discrete and continuous parsing in one model.,"{'title': '2 Related Work', 'number': '2'}"
"Another different approach to the above generative models is to learn discriminative parsers using many well designed features (Taskar et al., 2004; Finkel et al., 2008).","{'title': '2 Related Work', 'number': '2'}"
We also borrow ideas from this line of research in that our parser combines the generative PCFG model with discriminatively learned RNNs.,"{'title': '2 Related Work', 'number': '2'}"
"Deep Learning and Recursive Deep Learning Early attempts at using neural networks to describe phrases include Elman (1991), who used recurrent neural networks to create representations of sentences from a simple toy grammar and to analyze the linguistic expressiveness of the resulting representations.","{'title': '2 Related Work', 'number': '2'}"
"Words were represented as one-on vectors, which was feasible since the grammar only included a handful of words.","{'title': '2 Related Work', 'number': '2'}"
Collobert and Weston (2008) showed that neural networks can perform well on sequence labeling language processing tasks while also learning appropriate features.,"{'title': '2 Related Work', 'number': '2'}"
"However, their model is lacking in that it cannot represent the recursive structure inherent in natural language.","{'title': '2 Related Work', 'number': '2'}"
They partially circumvent this problem by using either independent window-based classifiers or a convolutional layer.,"{'title': '2 Related Work', 'number': '2'}"
"RNN-specific training was introduced by Goller and KÂ¨uchler (1996) to learn distributed representations of given, structured objects such as logical terms.","{'title': '2 Related Work', 'number': '2'}"
"In contrast, our model both predicts the structure and its representation.","{'title': '2 Related Work', 'number': '2'}"
Henderson (2003) was the first to show that neural networks can be successfully used for large scale parsing.,"{'title': '2 Related Work', 'number': '2'}"
He introduced a left-corner parser to estimate the probabilities of parsing decisions conditioned on the parsing history.,"{'title': '2 Related Work', 'number': '2'}"
The input to Hendersonâs model consists of pairs of frequent words and their part-of-speech (POS) tags.,"{'title': '2 Related Work', 'number': '2'}"
"Both the original parsing system and its probabilistic interpretation (Titov and Henderson, 2007) learn features that represent the parsing history and do not provide a principled linguistic representation like our phrase representations.","{'title': '2 Related Work', 'number': '2'}"
"Other related work includes (Henderson, 2004), who discriminatively trains a parser based on synchrony networks and (Titov and Henderson, 2006), who use an SVM to adapt a generative parser to different domains.","{'title': '2 Related Work', 'number': '2'}"
Costa et al. (2003) apply recursive neural networks to re-rank possible phrase attachments in an incremental parser.,"{'title': '2 Related Work', 'number': '2'}"
"Their work is the first to show that RNNs can capture enough information to make correct parsing decisions, but they only test on a subset of 2000 sentences.","{'title': '2 Related Work', 'number': '2'}"
Menchetti et al. (2005) use RNNs to re-rank different parses.,"{'title': '2 Related Work', 'number': '2'}"
"For their results on full sentence parsing, they rerank candidate trees created by the Collins parser (Collins, 2003).","{'title': '2 Related Work', 'number': '2'}"
"Similar to their work, we use the idea of letting discrete categories reduce the search space during inference.","{'title': '2 Related Work', 'number': '2'}"
We compare to fully tied RNNs in which the same weights are used at every node.,"{'title': '2 Related Work', 'number': '2'}"
Our syntactically untied RNNs outperform them by a significant margin.,"{'title': '2 Related Work', 'number': '2'}"
"The idea of untying has also been successfully used in deep learning applied to vision (Le et al., 2010).","{'title': '2 Related Work', 'number': '2'}"
"This paper uses several ideas of (Socher et al., 2011b).","{'title': '2 Related Work', 'number': '2'}"
"The main differences are (i) the dual representation of nodes as discrete categories and vectors, (ii) the combination with a PCFG, and (iii) the syntactic untying of weights based on child categories.","{'title': '2 Related Work', 'number': '2'}"
We directly compare models with fully tied and untied weights.,"{'title': '2 Related Work', 'number': '2'}"
"Another work that represents phrases with a dual discrete-continuous representation is (Kartsaklis et al., 2012).","{'title': '2 Related Work', 'number': '2'}"
"This section introduces Compositional Vector Grammars (CVGs), a model to jointly find syntactic structure and capture compositional semantic information.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
CVGs build on two observations.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Firstly, that a lot of the structure and regularity in languages can be captured by well-designed syntactic patterns.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Hence, the CVG builds on top of a standard PCFG parser.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"However, many parsing decisions show fine-grained semantic factors at work.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Therefore we combine syntactic and semantic information by giving the parser access to rich syntacticosemantic information in the form of distributional word vectors and compute compositional semantic vector representations for longer phrases (Costa et al., 2003; Menchetti et al., 2005; Socher et al., 2011b).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The CVG model merges ideas from both generative models that assume discrete syntactic categories and discriminative models that are trained using continuous vectors.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"We will first briefly introduce single word vector representations and then describe the CVG objective function, tree scoring and inference.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"In most systems that use a vector representation for words, such vectors are based on cooccurrence statistics of each word and its context (Turney and Pantel, 2010).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Another line of research to learn distributional word vectors is based on neural language models (Bengio et al., 2003) which jointly learn an embedding of words into an n-dimensional feature space and use these embeddings to predict how suitable a word is in its context.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"These vector representations capture interesting linear relationships (up to some accuracy), such as kingâman+woman â queen (Mikolov et al., 2013).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Collobert and Weston (2008) introduced a new model to compute such an embedding.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The idea is to construct a neural network that outputs high scores for windows that occur in a large unlabeled corpus and low scores for windows where one word is replaced by a random word.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
When such a network is optimized via gradient ascent the derivatives backpropagate into the word embedding matrix X.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
In order to predict correct scores the vectors in the matrix capture co-occurrence statistics.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For further details and evaluations of these embeddings, see (Turian et al., 2010; Huang et al., 2012).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The resulting X matrix is used as follows.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Assume we are given a sentence as an ordered list of m words.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Each word w has an index [w] = i into the columns of the embedding matrix.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This index is used to retrieve the wordâs vector representation a,,, using a simple multiplication with a binary vector e, which is zero everywhere, except at the ith index.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
So aw = Lei E Rn.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Henceforth, after mapping each word to its vector, we represent a sentence S as an ordered list of (word,vector) pairs: x = ((w1, aw1), ... , (wm, awm)).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Now that we have discrete and continuous representations for all words, we can continue with the approach for computing tree structures and vectors for nonterminal nodes.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The goal of supervised parsing is to learn a function g : X -+ Y, where X is the set of sentences and Y is the set of all possible labeled binary parse trees.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The set of all possible trees for a given sentence xi is defined as Y (xi) and the correct tree for a sentence is yi.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"We first define a structured margin loss A(yi, Ëy) for predicting a tree yË for a given correct tree.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The loss increases the more incorrect the proposed parse tree is (Goodman, 1998).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The discrepancy between trees is measured by counting the number of nodes N(y) with an incorrect span (or label) in the proposed tree: We set Îº = 0.1 in all experiments.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For a given set of training instances (xi, yi), we search for the function gÎ¸, parameterized by Î¸, with the smallest expected loss on a new sentence.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
It has the following form: where the tree is found by the Compositional Vector Grammar (CVG) introduced below and then scored via the function s. The higher the score of a tree the more confident the algorithm is that its structure is correct.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This max-margin, structureprediction objective (Taskar et al., 2004; Ratliff et al., 2007; Socher et al., 2011b) trains the CVG so that the highest scoring tree will be the correct tree: gÎ¸(xi) = yi and its score will be larger up to a margin to other possible trees yË E Y(xi): s(CVG(Î¸, xi, yi)) >â s(CVG(Î¸, xi, Ëy)) + A(yi, Ëy).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This leads to the regularized risk function for m Intuitively, to minimize this objective, the score of the correct tree yi is increased and the score of the highest scoring incorrect tree yË is decreased.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For ease of exposition, we first describe how to score an existing fully labeled tree with a standard RNN and then with a CVG.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The subsequent section will then describe a bottom-up beam search and its approximation for finding the optimal tree.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Assume, for now, we are given a labeled parse tree as shown in Fig.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
2.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"We define the word representations as (vector, POS) pairs: ((a, A), (b, B), (c, C)), where the vectors are defined as in Sec.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
3.1 and the POS tags come from a PCFG.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The standard RNN essentially ignores all POS tags and syntactic categories and each nonterminal node is associated with the same neural network (i.e., the weights across nodes are fully tied).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
We can represent the binary tree in Fig.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
2 in the form of branching triplets (p -+ c1c2).,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Each such triplet denotes that a parent node p has two children and each ck can be either a word vector or a non-terminal node in the tree.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
For the example in Fig.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"2, we would get the triples ((p1 -+ bc), (p2 -+ ap1)).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Note that in order to replicate the neural network and compute node representations in a bottom up fashion, the parent must have the same dimensionality as the children: p E Rn.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Given this tree structure, we can now compute activations for each node from the bottom up.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
We begin by computing the activation for p1 using the childrenâs word vectors.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"We first concatenate the childrenâs representations b, c E Rnx1 into a E R2nx1.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Then the composition function multiplies this vector by the parameter weights of the RNN W E Rnx2n and applies an element-wise nonlinearity function f = tanh to the output vector.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The resulting output p(1) is then given as input to compute p(2).,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
In order to compute a score of how plausible of a syntactic constituent a parent is the RNN uses a single-unit linear layer for all i: where v â Rn is a vector of parameters that need to be trained.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
This score will be used to find the highest scoring tree.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For more details on how standard RNNs can be used for parsing, see Socher et al. (2011b).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The standard RNN requires a single composition function to capture all types of compositions: adjectives and nouns, verbs and nouns, adverbs and adjectives, etc.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Even though this function is a powerful one, we find a single neural network weight matrix cannot fully capture the richness of compositionality.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Several extensions are possible: A two-layered RNN would provide more expressive power, however, it is much harder to train because the resulting neural network becomes very deep and suffers from vanishing gradient problems.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Socher et al. (2012) proposed to give every single word a matrix and a vector.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The matrix is then applied to the sibling nodeâs vector during the composition.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"While this results in a powerful composition function that essentially depends on the words being combined, the number of model parameters explodes and the composition functions do not capture the syntactic commonalities between similar POS tags or syntactic categories.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Based on the above considerations, we propose the Compositional Vector Grammar (CVG) that conditions the composition function at each node on discrete syntactic categories extracted from a Figure 3: Example of a syntactically untied RNN in which the function to compute a parent vector depends on the syntactic categories of its children which we assume are given for now.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
PCFG.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Hence, CVGs combine discrete, syntactic rule probabilities and continuous vector compositions.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The idea is that the syntactic categories of the children determine what composition function to use for computing the vector of their parents.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"While not perfect, a dedicated composition function for each rule RHS can well capture common composition processes such as adjective or adverb modification versus noun or clausal complementation.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For instance, it could learn that an NP should be similar to its head noun and little influenced by a determiner, whereas in an adjective modification both words considerably determine the meaning of a phrase.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The original RNN is parameterized by a single weight matrix W. In contrast, the CVG uses a syntactically untied RNN (SU-RNN) which has a set of such weights.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The size of this set depends on the number of sibling category combinations in the PCFG.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Fig.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
3 shows an example SU-RNN that computes parent vectors with syntactically untied weights.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The CVG computes the first parent vector via the SU-RNN: where W(B,C) â RnÃ2n is now a matrix that depends on the categories of the two children.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"In this bottom up procedure, the score for each node consists of summing two elements: First, a single linear unit that scores the parent vector and second, the log probability of the PCFG for the rule that combines these two children: where P(P1 -+ B C) comes from the PCFG.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This can be interpreted as the log probability of a discrete-continuous rule application with the following factorization: Note, however, that due to the continuous nature of the word vectors, the probability of such a CVG rule application is not comparable to probabilities provided by a PCFG since the latter sum to 1 for all children.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Assuming that node p1 has syntactic category P1, we compute the second parent vector via: The score of the last parent in this trigram is computed via: The above scores (Eq.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
4) are used in the search for the correct tree for a sentence.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The goodness of a tree is measured in terms of its score and the CVG score of a complete tree is the sum of the scores at each node: ï¿½ ï¿½pdï¿½ s(CVG(Î¸, x, Ëy)) = s .","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
(6) dâN(Ëy) The main objective function in Eq.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
3 includes a maximization over all possible trees maxËyâY (x).,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Finding the global maximum, however, cannot be done efficiently for longer sentences nor can we use dynamic programming.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
This is due to the fact that the vectors break the independence assumptions of the base PCFG.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"A (category, vector) node representation is dependent on all the words in its span and hence to find the true global optimum, we would have to compute the scores for all binary trees.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For a sentence of length n, there are Catalan(n) many possible binary trees which is very large even for moderately long sentences.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"One could use a bottom-up beam search, keeping a k-best list at every cell of the chart, possibly for each syntactic category.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This beam search inference procedure is still considerably slower than using only the simplified base PCFG, especially since it has a small state space (see next section for details).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Since each probability look-up is cheap but computing SU-RNN scores requires a matrix product, we would like to reduce the number of SU-RNN score computations to only those trees that require semantic information.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
We note that labeled F1 of the Stanford PCFG parser on the test set is 86.17%.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"However, if one used an oracle to select the best tree from the top 200 trees that it produces, one could get an F1 of 95.46%.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
We use this knowledge to speed up inference via two bottom-up passes through the parsing chart.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"During the first one, we use only the base PCFG to run CKY dynamic programming through the tree.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"The k = 200-best parses at the top cell of the chart are calculated using the efficient algorithm of (Huang and Chiang, 2005).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Then, the second pass is a beam search with the full CVG model (including the more expensive matrix multiplications of the SU-RNN).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
This beam search only considers phrases that appear in the top 200 parses.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This is similar to a re-ranking setup but with one main difference: the SU-RNN rule score computation at each node still only has access to its child vectors, not the whole tree or other global features.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
This allows the second pass to be very fast.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
We use this setup in our experiments below.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The full CVG model is trained in two stages.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
First the base PCFG is trained and its top trees are cached and then used for training the SU-RNN conditioned on the PCFG.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The SU-RNN is trained using the objective in Eq.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
3 and the scores as exemplified by Eq.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
6.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For each sentence, we use the method described above to efficiently find an approximation for the optimal tree.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
To minimize the objective we want to increase the scores of the correct treeâs constituents and decrease the score of those in the highest scoring incorrect tree.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Derivatives are computed via backpropagation through structure (BTS) (Goller and KÂ¨uchler, 1996).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The derivative of tree i has to be taken with respect to all parameter matrices W (AB) that appear in it.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The main difference between backpropagation in standard RNNs and SURNNs is that the derivatives at each node only add to the overall derivative of the specific matrix at that node.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For more details on backpropagation through RNNs, see Socher et al. (2010) The objective function is not differentiable due to the hinge loss.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Therefore, we generalize gradient ascent via the subgradient method (Ratliff et al., 2007) which computes a gradient-like direction.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Let Î¸ = (X, W(Â·Â·), v(Â·Â·)) E RM be a vector of all M model parameters, where we denote W(Â·Â·) as the set of matrices that appear in the training set.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The subgradient of Eq.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
3 becomes: where Ëymax is the tree with the highest score.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"To minimize the objective, we use the diagonal variant of AdaGrad (Duchi et al., 2011) with minibatches.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"For our parameter updates, we first define gT E RMÃ1 to be the subgradient at time step Ï and Gt = Et T=1 gTgTT .","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The parameter update at time step t then becomes: where Î± is the learning rate.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Since we use the diagonal of Gt, we only have to store M values and the update becomes fast to compute: At time step t, the update for the iâth parameter Î¸t,i is: Hence, the learning rate is adapting differently for each parameter and rare parameters get larger updates than frequently occurring parameters.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
This is helpful in our setting since some W matrices appear in only a few training trees.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"This procedure found much better optima (by Pz3% labeled F1 on the dev set), and converged more quickly than L-BFGS which we used previously in RNN training (Socher et al., 2011a).","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
Training time is roughly 4 hours on a single machine.,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"In the absence of any knowledge on how to combine two categories, our prior for combining two vectors is to average them instead of performing a completely random projection.","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"Hence, we initialize the binary W matrices with: where we include the bias in the last column and the random variable is uniformly distributed: E â U[-0.001, 0.001].","{'title': '3 Compositional Vector Grammars', 'number': '3'}"
The first block is multiplied by the left child and the second by the right child:,"{'title': '3 Compositional Vector Grammars', 'number': '3'}"
"We evaluate the CVG in two ways: First, by a standard parsing evaluation on Penn Treebank WSJ and then by analyzing the model errors in detail.","{'title': '4 Experiments', 'number': '4'}"
We used the first 20 files of WSJ section 22 to cross-validate several model and optimization choices.,"{'title': '4 Experiments', 'number': '4'}"
"The base PCFG uses simplified categories of the Stanford PCFG Parser (Klein and Manning, 2003a).","{'title': '4 Experiments', 'number': '4'}"
We decreased the state splitting of the PCFG grammar (which helps both by making it less sparse and by reducing the number of parameters in the SU-RNN) by adding the following options to training: â-noRightRec dominatesV 0 -baseNP 0â.,"{'title': '4 Experiments', 'number': '4'}"
"This reduces the number of states from 15,276 to 12,061 states and 602 POS tags.","{'title': '4 Experiments', 'number': '4'}"
"These include split categories, such as parent annotation categories like VPËS.","{'title': '4 Experiments', 'number': '4'}"
"Furthermore, we ignore all category splits for the SURNN weights, resulting in 66 unary and 882 binary child pairs.","{'title': '4 Experiments', 'number': '4'}"
"Hence, the SU-RNN has 66+882 transformation matrices and scoring vectors.","{'title': '4 Experiments', 'number': '4'}"
"Note that any PCFG, including latent annotation PCFGs (Matsuzaki et al., 2005) could be used.","{'title': '4 Experiments', 'number': '4'}"
"However, since the vectors will capture lexical and semantic information, even simple base PCFGs can be substantially improved.","{'title': '4 Experiments', 'number': '4'}"
"Since the computational complexity of PCFGs depends on the number of states, a base PCFG with fewer states is much faster.","{'title': '4 Experiments', 'number': '4'}"
"Testing on the full WSJ section 22 dev set (1700 sentences) takes roughly 470 seconds with the simple base PCFG, 1320 seconds with our new CVG and 1600 seconds with the currently published Stanford factored parser.","{'title': '4 Experiments', 'number': '4'}"
"Hence, increased performance comes also with a speed improvement of approximately 20%.","{'title': '4 Experiments', 'number': '4'}"
We fix the same regularization of Î» = 10â4 for all parameters.,"{'title': '4 Experiments', 'number': '4'}"
The minibatch size was set to 20.,"{'title': '4 Experiments', 'number': '4'}"
We also cross-validated on AdaGradâs learning rate which was eventually set to Î± = 0.1 and word vector size.,"{'title': '4 Experiments', 'number': '4'}"
"The 25-dimensional vectors provided by Turian et al. (2010) provided the best performance and were faster than 50-,100- or 200dimensional ones.","{'title': '4 Experiments', 'number': '4'}"
"We hypothesize that the larger word vector sizes, while capturing more semantic knowledge, result in too many SU-RNN matrix parameters to train and hence perform worse.","{'title': '4 Experiments', 'number': '4'}"
The dev set accuracy of the best model is 90.93% labeled F1 on all sentences.,"{'title': '4 Experiments', 'number': '4'}"
This model resulted in 90.44% on the final test set (WSJ section 23).,"{'title': '4 Experiments', 'number': '4'}"
"Table 1 compares our results to the two Stanford parser variants (the unlexicalized PCFG (Klein and Manning, 2003a) and the factored parser (Klein and Manning, 2003b)) and other parsers that use richer state representations: the Berkeley parser (Petrov and Klein, 2007), Collins parser (Collins, 1997), SSN: a statistical neural network parser (Henderson, 2004), Factored PCFGs (Hall and Klein, 2012), CharniakSelfTrain: the self-training approach of McClosky et al. (2006), which bootstraps and parses additional large corpora multiple times, Charniak-RS: the state of the art self-trained and discriminatively re-ranked Charniak-Johnson parser combining (Charniak, 2000; McClosky et al., 2006; Charniak and Johnson, 2005).","{'title': '4 Experiments', 'number': '4'}"
See Kummerfeld et al. (2012) for more comparisons.,"{'title': '4 Experiments', 'number': '4'}"
We compare also to a standard RNN âCVG (RNN)â and to the proposed CVG with SU-RNNs.,"{'title': '4 Experiments', 'number': '4'}"
Analysis of Error Types.,"{'title': '4 Experiments', 'number': '4'}"
Table 2 shows a detailed comparison of different errors.,"{'title': '4 Experiments', 'number': '4'}"
We use the code provided by Kummerfeld et al. (2012) and compare to the previous version of the Stanford factored parser as well as to the Berkeley and Charniak-reranked-self-trained parsers (defined above).,"{'title': '4 Experiments', 'number': '4'}"
See Kummerfeld et al. (2012) for details and comparisons to other parsers.,"{'title': '4 Experiments', 'number': '4'}"
One of the largest sources of improved performance over the original Stanford factored parser is in the correct placement of PP phrases.,"{'title': '4 Experiments', 'number': '4'}"
"When measuring only the F1 of parse nodes that include at least one PP child, the CVG improves the Stanford parser by 6.2% to an F1 of 77.54%.","{'title': '4 Experiments', 'number': '4'}"
This is a 0.23 reduction in the average number of bracket errors per sentence.,"{'title': '4 Experiments', 'number': '4'}"
"The âOtherâ category includes VP, PRN and other attachments, appositives and internal structures of modifiers and QPs.","{'title': '4 Experiments', 'number': '4'}"
Analysis of Composition Matrices.,"{'title': '4 Experiments', 'number': '4'}"
"An analysis of the norms of the binary matrices reveals that the model learns a soft vectorized notion of head words: Head words are given larger weights and importance when computing the parent vector: For the matrices combining siblings with categories VP:PP, VP:NP and VP:PRT, the weights in the part of the matrix which is multiplied with the VP child vector dominates.","{'title': '4 Experiments', 'number': '4'}"
Similarly NPs dominate DTs.,"{'title': '4 Experiments', 'number': '4'}"
Fig.,"{'title': '4 Experiments', 'number': '4'}"
5 shows example matrices.,"{'title': '4 Experiments', 'number': '4'}"
The two strong diagonals are due to the initialization described in Sec.,"{'title': '4 Experiments', 'number': '4'}"
3.7.,"{'title': '4 Experiments', 'number': '4'}"
Semantic Transfer for PP Attachments.,"{'title': '4 Experiments', 'number': '4'}"
"In this small model analysis, we use two pairs of sentences that the original Stanford parser and the CVG did not parse correctly after training on the WSJ.","{'title': '4 Experiments', 'number': '4'}"
We then continue to train both parsers on two similar sentences and then analyze if the parsers correctly transferred the knowledge.,"{'title': '4 Experiments', 'number': '4'}"
The training sentences are He eats spaghetti with a fork. and She eats spaghetti with pork.,"{'title': '4 Experiments', 'number': '4'}"
The very similar test sentences are He eats spaghetti with a spoon. and He eats spaghetti with meat.,"{'title': '4 Experiments', 'number': '4'}"
"Initially, both parsers incorrectly attach the PP to the verb in both test sentences.","{'title': '4 Experiments', 'number': '4'}"
"After training, the CVG parses both correctly, while the factored Stanford parser incorrectly attaches both PPs to spaghetti.","{'title': '4 Experiments', 'number': '4'}"
The CVGâs ability to transfer the correct PP attachments is due to the semantic word vector similarity between the words in the sentences.,"{'title': '4 Experiments', 'number': '4'}"
Fig.,"{'title': '4 Experiments', 'number': '4'}"
4 shows the outputs of the two parsers. showing that head words dominate the composition.,"{'title': '4 Experiments', 'number': '4'}"
The model learns to not give determiners much importance.,"{'title': '4 Experiments', 'number': '4'}"
"The two diagonals show clearly the two blocks that are multiplied with the left and right children, respectively.","{'title': '4 Experiments', 'number': '4'}"
"We introduced Compositional Vector Grammars (CVGs), a parsing model that combines the speed of small-state PCFGs with the semantic richness of neural word representations and compositional phrase vectors.","{'title': '5 Conclusion', 'number': '5'}"
The compositional vectors are learned with a new syntactically untied recursive neural network.,"{'title': '5 Conclusion', 'number': '5'}"
This model is linguistically more plausible since it chooses different composition functions for a parent node based on the syntactic categories of its children.,"{'title': '5 Conclusion', 'number': '5'}"
The CVG obtains 90.44% labeled F1 on the full WSJ test set and is 20% faster than the previous Stanford parser.,"{'title': '5 Conclusion', 'number': '5'}"
We thank Percy Liang for chats about the paper.,"{'title': 'Acknowledgments', 'number': '6'}"
Richard is supported by a Microsoft Research PhD fellowship.,"{'title': 'Acknowledgments', 'number': '6'}"
The authors gratefully acknowledge the support of the Defense Advanced Research Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) prime contract no.,"{'title': 'Acknowledgments', 'number': '6'}"
"FA8750-13-2-0040, and the DARPA Deep Learning program under contract number FA8650-10C-7020.","{'title': 'Acknowledgments', 'number': '6'}"
"Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA, AFRL, or the US government.","{'title': 'Acknowledgments', 'number': '6'}"
