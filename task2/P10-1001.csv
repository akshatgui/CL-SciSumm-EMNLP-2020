col1,col2
"We present algorithms for higher-order dependency parsing that are “third-order” in the sense that they can evaluate substructures containing three dependencies, and “efficient” in the sense that they reonly Importantly, our new parsers can utilize both sibling-style and grandchild-style interactions.",{}
"We evaluate our parsers on the Penn Treebank and Prague Dependency Treebank, achieving unlabeled attachment scores of 93.04% and 87.38%, respectively.",{}
"Dependency grammar has proven to be a very useful syntactic formalism, due in no small part to the development of efficient parsing algorithms (Eisner, 2000; McDonald et al., 2005b; McDonald and Pereira, 2006; Carreras, 2007), which can be leveraged for a wide variety of learning methods, such as feature-rich discriminative models (Lafferty et al., 2001; Collins, 2002; Taskar et al., 2003).","{'title': '1 Introduction', 'number': '1'}"
These parsing algorithms share an important characteristic: they factor dependency trees into sets of parts that have limited interactions.,"{'title': '1 Introduction', 'number': '1'}"
"By exploiting the additional constraints arising from the factorization, maximizations or summations over the set of possible dependency trees can be performed efficiently and exactly.","{'title': '1 Introduction', 'number': '1'}"
"A crucial limitation of factored parsing algorithms is that the associated parts are typically quite small, losing much of the contextual information within the dependency tree.","{'title': '1 Introduction', 'number': '1'}"
"For the purposes of improving parsing performance, it is desirable to increase the size and variety of the parts used by the factorization.1 At the same time, the need for more expressive factorizations 1For examples of how performance varies with the degree of the parser’s factorization see, e.g., McDonald and Pereira (2006, Tables 1 and 2), Carreras (2007, Table 2), Koo et al. (2008, Tables 2 and 4), or Suzuki et al.","{'title': '1 Introduction', 'number': '1'}"
"(2009, Tables 3–6). must be balanced against any resulting increase in the computational cost of the parsing algorithm.","{'title': '1 Introduction', 'number': '1'}"
"Consequently, recent work in dependency parsing has been restricted to applications of secondorder parsers, the most powerful of which (Carreras, 2007) requires O(n4) time and O(n3) space, while being limited to second-order parts.","{'title': '1 Introduction', 'number': '1'}"
"In this paper, we present new third-order parsing algorithms that increase both the size and variety of the parts participating in the factorization, while simultaneously maintaining computational requirements of O(n4) time and O(n3) space.","{'title': '1 Introduction', 'number': '1'}"
"We evaluate our parsers on the Penn WSJ Treebank (Marcus et al., 1993) and Prague Dependency Treebank (Hajiˇc et al., 2001), achieving unlabeled attachment scores of 93.04% and 87.38%.","{'title': '1 Introduction', 'number': '1'}"
"In summary, we make three main contributions: The remainder of this paper is divided as follows: Sections 2 and 3 give background, Sections 4 and 5 describe our new parsing algorithms, Section 6 discusses related work, Section 7 presents our experimental results, and Section 8 concludes.","{'title': '1 Introduction', 'number': '1'}"
"In dependency grammar, syntactic relationships are represented as head-modifier dependencies: directed arcs between a head, which is the more “essential” word in the relationship, and a modifier, which supplements the meaning of the head.","{'title': '2 Dependency parsing', 'number': '2'}"
"For example, Figure 1 contains a dependency between the verb “report” (the head) and its object “sales” (the modifier).","{'title': '2 Dependency parsing', 'number': '2'}"
"A complete analysis of a sentence is given by a dependency tree: a set of dependencies that forms a rooted, directed tree spanning the words of the sentence.","{'title': '2 Dependency parsing', 'number': '2'}"
"Every dependency tree is rooted at a special “*” token, allowing the selection of the sentential head to be modeled as if it were a dependency.","{'title': '2 Dependency parsing', 'number': '2'}"
"For a sentence x, we define dependency parsing as a search for the highest-scoring analysis of x: Here, y(x) is the set of all trees compatible with x and SCORE(x, y) evaluates the event that tree y is the analysis of sentence x.","{'title': '2 Dependency parsing', 'number': '2'}"
"Since the cardinality of y(x) grows exponentially with the length of the sentence, directly solving Eq.","{'title': '2 Dependency parsing', 'number': '2'}"
1 is impractical.,"{'title': '2 Dependency parsing', 'number': '2'}"
"A common strategy, and one which forms the focus of this paper, is to factor each dependency tree into small parts, which can be scored in isolation.","{'title': '2 Dependency parsing', 'number': '2'}"
"Factored parsing can be formalized as follows: That is, we treat the dependency tree y as a set of parts p, each of which makes a separate contribution to the score of y.","{'title': '2 Dependency parsing', 'number': '2'}"
"For certain factorizations, efficient parsing algorithms exist for solving Eq.","{'title': '2 Dependency parsing', 'number': '2'}"
1.,"{'title': '2 Dependency parsing', 'number': '2'}"
"We define the order of a part according to the number of dependencies it contains, with analogous terminology for factorizations and parsing algorithms.","{'title': '2 Dependency parsing', 'number': '2'}"
"In the remainder of this paper, we focus on factorizations utilizing the following parts: Specifically, Sections 4.1, 4.2, and 4.3 describe parsers that, respectively, factor trees into grandchild parts, grand-sibling parts, and a mixture of grand-sibling and tri-sibling parts.","{'title': '2 Dependency parsing', 'number': '2'}"
Our new third-order dependency parsers build on ideas from existing parsing algorithms.,"{'title': '3 Existing parsing algorithms', 'number': '3'}"
"In this section, we provide background on two relevant parsers from previous work.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"The first type of parser we describe uses a “firstorder” factorization, which decomposes a dependency tree into its individual dependencies.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Eisner (2000) introduced a widely-used dynamicprogramming algorithm for first-order parsing; as it is the basis for many parsers, including our new algorithms, we summarize its design here.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"The Eisner (2000) algorithm is based on two interrelated types of dynamic-programming structures: complete spans, which consist of a headword and its descendents on one side, and incomplete spans, which consist of a dependency and the region between the head and modifier.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Formally, we denote a complete span as Ch,e where h and a are the indices of the span’s headword and endpoint.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"An incomplete span is denoted as Ih,,,t where h and m are the index of the head and modifier of a dependency.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Intuitively, a complete span represents a “half-constituent” headed by h, whereas an incomplete span is only a partial half-constituent, since the constituent can be extended by adding more modifiers to m. Each type of span is created by recursively combining two smaller, adjacent spans; the constructions are specified graphically in Figure 2.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"An incomplete span is constructed from a pair of complete spans, indicating the division of the range [h, m] into constituents headed by h and m. A complete span is created by “completing” an incomplete span with the other half of m’s constituent.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"The point of concatenation in each construction—m in Figure 2(a) or r in Figure 2(b)—is the split point, a free index that must be enumerated to find the optimal construction.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"In order to parse a sentence x, it suffices to find optimal constructions for all complete and incomplete spans defined on x.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"This can be accomplished by adapting standard chart-parsing techniques (Cocke and Schwartz, 1970; Younger, 1967; Kasami, 1965) to the recursive derivations defined in Figure 2.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Since each derivation is defined by two fixed indices (the boundaries of the span) and a third free index (the split point), the parsing algorithm requires O(n3) time and O(n2) space (Eisner, 1996; McAllester, 1999).","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"As remarked by Eisner (1996) and McDonald and Pereira (2006), it is possible to rearrange the dynamic-programming structures to conform to an improved factorization that decomposes each tree into sibling parts—pairs of dependencies with a shared head.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Specifically, a sibling part consists of a triple of indices (h, m, s) where (h, m) and (h, s) are dependencies, and where s and m are successive modifiers to the same side of h. In order to parse this factorization, the secondorder parser introduces a third type of dynamicprogramming structure: sibling spans, which represent the region between successive modifiers of some head.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Formally, we denote a sibling span as S,,,,, where s and m are a pair of modifiers involved in a sibling relationship.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
Modified versions of sibling spans will play an important role in the new parsing algorithms described in Section 4.,"{'title': '3 Existing parsing algorithms', 'number': '3'}"
Figure 3 provides a graphical specification of the second-order parsing algorithm.,"{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Note that incomplete spans are constructed in a new way: the second-order parser combines a smaller incomplete span, representing the next-innermost dependency, with a sibling span that covers the region between the two modifiers.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Sibling parts (h, m, s) can thus be obtained from Figure 3(b).","{'title': '3 Existing parsing algorithms', 'number': '3'}"
"Despite the use of second-order parts, each derivation is still defined by a span and split point, so the parser requires O(n3) time and O(n2) space.","{'title': '3 Existing parsing algorithms', 'number': '3'}"
In this section we describe our new third-order dependency parsing algorithms.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Our overall method is characterized by the augmentation of each span with a “grandparent” index: an index external to the span whose role will be made clear below.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"This section presents three parsing algorithms based on this idea: Model 0, a second-order parser, and Models 1 and 2, which are third-order parsers.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The first parser, Model 0, factors each dependency tree into a set of grandchild parts—pairs of dependencies connected head-to-tail.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Specifically, a grandchild part is a triple of indices (g, h, m) where (g, h) and (h, m) are dependencies.3 In order to parse this factorization, we augment both complete and incomplete spans with grandparent indices; for brevity, we refer to these augmented structures as g-spans.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Formally, we denote a complete g-span as Ch,e, where Ch,e is a normal complete span and g is an index lying outside the range [h, e], with the implication that (g, h) is a dependency.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Incomplete g-spans are defined analogously and are denoted as Ih,..","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Figure 4 depicts complete and incomplete gspans and provides a graphical specification of the SCOREG is the scoring function for grandchild parts.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"We use the g-span identities as shorthand for their chart entries (e.g., Igi,j refers to the entry containing the maximum score of that g-span).","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Model 0 dynamic-programming algorithm.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The algorithm resembles the first-order parser, except that every recursive construction must also set the grandparent indices of the smaller g-spans; fortunately, this can be done deterministically in all cases.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"For example, Figure 4(a) depicts the decomposition of Cgh,e into an incomplete half and a complete half.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The grandparent of the incomplete half is copied from Cgh,e while the grandparent of the complete half is set to h, the head of m as defined by the construction.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Clearly, grandchild parts (g, h, m) can be read off of the incomplete g-spans in Figure 4(b,d).","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Moreover, since each derivation copies the grandparent index g into successively smaller g-spans, grandchild parts will be produced for all grandchildren of g. Model 0 can be parsed by adapting standard top-down or bottom-up chart parsing techniques.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"For concreteness, Figure 5 provides a pseudocode sketch of a bottom-up chart parser for Model 0; although the sketch omits many details, it suffices for the purposes of illustration.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The algorithm progresses from small widths to large in the usual manner, but after defining the endpoints (i, j) there is an additional loop that enumerates all possible grandparents.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Since each derivation is defined by three fixed indices (the g-span) and one free index (the split point), the complexity of the algorithm is O(n4) time and O(n3) space.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Note that the grandparent indices cause each gspan to have non-contiguous structure.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"For example, in Figure 4(a) the words between g and h will be controlled by some other g-span.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Due to these discontinuities, the correctness of the Model 0 dynamic-programming algorithm may not be immediately obvious.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"While a full proof of correctness is beyond the scope of this paper, we note that each structure on the right-hand side of Figure 4 lies completely within the structure on the left-hand side.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"This nesting of structures implies, in turn, that the usual properties required to ensure the correctness of dynamic programming hold.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
We now describe our first third-order parsing algorithm.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Model 1 decomposes each tree into a set of grand-sibling parts—combinations of sibling parts and grandchild parts.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Specifically, a grand-sibling is a 4-tuple of indices (g, h, m, s) where (h, m, s) is a sibling part and (g, h, m) and (g, h, s) are grandchild parts.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"For example, in Figure 1, the words “must,” “report,” “sales,” and “immediately” form a grand-sibling part.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"In order to parse this factorization, we introduce sibling g-spans Shm,s, which are composed of a normal sibling span Sm,s and an external index h, with the implication that (h, m, s) forms a valid sibling part.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Figure 6 provides a graphical specification of the dynamic-programming algorithm for Model 1.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The overall structure of the algorithm resembles the second-order sibling parser, with the addition of grandparent indices; as in Model 0, the grandparent indices can be set deterministically in all cases.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Note that the sibling g-spans are crucial: they allow grand-sibling parts (g, h, m, s) to be read off of Figure 6(b), while simultaneously propagating grandparent indices to smaller g-spans.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Like Model 0, Model 1 can be parsed via adaptations of standard chart-parsing techniques; we omit the details for brevity.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Despite the move to third-order parts, each derivation is still defined by a g-span and a split point, so that parsing requires only O(n4) time and O(n3) space.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Higher-order parsing algorithms have been proposed which extend the second-order sibling factorization to parts containing multiple siblings (McDonald and Pereira, 2006, also see Section 6 for discussion).","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"In this section, we show how our g-span-based techniques can be combined with a third-order sibling parser, resulting in a parser that captures both grand-sibling parts and tri-sibling parts—4-tuples of indices (h, m, s, t) such that both (h, m, s) and (h, s, t) are sibling parts.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"In order to parse this factorization, we introduce a new type of dynamic-programming structure: sibling-augmented spans, or s-spans.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Formally, we denote an incomplete s-span as Ih,m,s where Ih,m is a normal incomplete span and s is an index lying in the strict interior of the range [h, m], such that (h, m, s) forms a valid sibling part.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
Figure 7 provides a graphical specification of the Model 2 parsing algorithm.,"{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"An incomplete s-span is constructed by combining a smaller incomplete s-span, representing the next-innermost pair of modifiers, with a sibling g-span, covering the region between the outer two modifiers.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"As in Model 1, sibling g-spans are crucial for propagating grandparent indices, while allowing the recovery of tri-sibling parts (h, m, s, t).","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Figure 7(b) shows how an incomplete s-span can be converted into an incomplete g-span by exchanging the internal sibling index for an external grandparent index; in the process, grand-sibling parts (g, h, m, s) are enumerated.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Since every derivation is defined by an augmented span and a split point, Model 2 can be parsed in O(n4) time and O(n3) space.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"It should be noted that unlike Model 1, Model 2 produces grand-sibling parts only for the outermost pair of grandchildren,4 similar to the behavior of the Carreras (2007) parser.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"In fact, the resemblance is more than passing, as Model 2 can emulate the Carreras (2007) algorithm by “demoting” each third-order part into a second-order part: SCOREGS(x, g, h, m, s) = SCOREG(x, g, h, m) SCORETS(x, h, m, s, t) = SCORES(x, h, m, s) where SCOREG, SCORES, SCOREGS and SCORETS are the scoring functions for grandchildren, siblings, grand-siblings and tri-siblings, respectively.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The emulated version has the same computational complexity as the original, so there is no practical reason to prefer it over the original.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Nevertheless, the relationship illustrated above highlights the efficiency of our approach: we are able to recover third-order parts in place of second-order parts, at no additional cost.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The technique of grandparent-index augmentation has proven fruitful, as it allows us to parse expressive third-order factorizations while retaining an efficient O(n4) runtime.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"In fact, our thirdorder parsing algorithms are “optimally” efficient in an asymptotic sense.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Since each third-order part is composed of four separate indices, there are 0(n4) distinct parts.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Any third-order parsing algorithm must at least consider the score of each part, hence third-order parsing is Q(n4) and it follows that the asymptotic complexity of Models 1 and 2 cannot be improved.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"The key to the efficiency of our approach is a fundamental asymmetry in the structure of a directed tree: a head can have any number of modifiers, while a modifier always has exactly one head.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Factorizations like that of Carreras (2007) obtain grandchild parts by augmenting spans with the indices of modifiers, leading to limitations on the grandchildren that can participate in the factorization.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Our method, by “inverting” the modifier indices into grandparent indices, exploits the structural asymmetry.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"As a final note, the parsing algorithms described in this section fall into the category of projective dependency parsers, which forbid crossing dependencies.","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"If crossing dependencies are allowed, it is possible to parse a first-order factorization by finding the maximum directed spanning tree (Chu and Liu, 1965; Edmonds, 1967; McDonald et al., 2005b).","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
"Unfortunately, designing efficient higherorder non-projective parsers is likely to be challenging, based on recent hardness results (McDonald and Pereira, 2006; McDonald and Satta, 2007).","{'title': '4 New third-order parsing algorithms', 'number': '4'}"
We briefly outline a few extensions to our algorithms; we hope to explore these in future work.,"{'title': '5 Extensions', 'number': '5'}"
Many statistical modeling techniques are based on partition functions and marginals—summations over the set of possible trees y(x).,"{'title': '5 Extensions', 'number': '5'}"
"Straightforward adaptations of the inside-outside algorithm (Baker, 1979) to our dynamic-programming structures would suffice to compute these quantities.","{'title': '5 Extensions', 'number': '5'}"
Our parsers are easily extended to labeled dependencies.,"{'title': '5 Extensions', 'number': '5'}"
"Direct integration of labels into Models 1 and 2 would result in third-order parts composed of three labeled dependencies, at the cost of increasing the time and space complexities by factors of O(L3) and O(L2), respectively, where L bounds the number of labels per dependency.","{'title': '5 Extensions', 'number': '5'}"
"If each word in x has a set of possible “senses,” our parsers can be modified to recover the best joint assignment of syntax and senses for x, by adapting methods in Eisner (2000).","{'title': '5 Extensions', 'number': '5'}"
"Complexity would increase by factors of O(54) time and O(53) space, where 5 bounds the number of senses per word.","{'title': '5 Extensions', 'number': '5'}"
"If more vertical context is desired, the dynamicprogramming structures can be extended with additional ancestor indices, resulting in a “spine” of ancestors above each span.","{'title': '5 Extensions', 'number': '5'}"
"Each additional ancestor lengthens the vertical scope of the factorization (e.g., from grand-siblings to “great-grandsiblings”), while increasing complexity by a factor of O(n).","{'title': '5 Extensions', 'number': '5'}"
"Horizontal context can also be increased by adding internal sibling indices; each additional sibling widens the scope of the factorization (e.g., from grand-siblings to “grand-tri-siblings”), while increasing complexity by a factor of O(n).","{'title': '5 Extensions', 'number': '5'}"
"Our method augments each span with the index of the head that governs that span, in a manner superficially similar to parent annotation in CFGs (Johnson, 1998).","{'title': '6 Related work', 'number': '6'}"
"However, parent annotation is a grammar transformation that is independent of any particular sentence, whereas our method annotates spans with indices into the current sentence.","{'title': '6 Related work', 'number': '6'}"
"These indices allow the use of arbitrary features predicated on the position of the grandparent (e.g., word identity, POS tag, contextual POS tags) without affecting the asymptotic complexity of the parsing algorithm.","{'title': '6 Related work', 'number': '6'}"
Efficiently encoding this kind of information into a sentence-independent grammar transformation would be challenging at best.,"{'title': '6 Related work', 'number': '6'}"
Eisner (2000) defines dependency parsing models where each word has a set of possible “senses” and the parser recovers the best joint assignment of syntax and senses.,"{'title': '6 Related work', 'number': '6'}"
Our new parsing algorithms could be implemented by defining the “sense” of each word as the index of its head.,"{'title': '6 Related work', 'number': '6'}"
"However, when parsing with senses, the complexity of the Eisner (2000) parser increases by factors of O(53) time and O(52) space (ibid., Section 4.2).","{'title': '6 Related work', 'number': '6'}"
"Since each word has n potential heads, a direct application of the word-sense parser leads to time and space complexities of O(n6) and O(n4), respectively, in contrast to our O(n4) and O(n3).5 Eisner (2000) also uses head automata to score or recognize the dependents of each head.","{'title': '6 Related work', 'number': '6'}"
An interesting question is whether these automata could be coerced into modeling the grandparent indices used in our parsing algorithms.,"{'title': '6 Related work', 'number': '6'}"
"However, note that the head automata are defined in a sentenceindependent manner, with two automata per word in the vocabulary (ibid., Section 2).","{'title': '6 Related work', 'number': '6'}"
The automata are thus analogous to the rules of a CFG and attempts to use them to model grandparent indices would face difficulties similar to those already described for grammar transformations in CFGs.,"{'title': '6 Related work', 'number': '6'}"
"It should be noted that third-order parsers have previously been proposed by McDonald and Pereira (2006), who remarked that their secondorder sibling parser (see Figure 3) could easily be extended to capture m > 1 successive modifiers in O(nm+1) time (ibid., Section 2.2).","{'title': '6 Related work', 'number': '6'}"
"To our knowledge, however, Models 1 and 2 are the first third-order parsing algorithms capable of modeling grandchild parts.","{'title': '6 Related work', 'number': '6'}"
"In our experiments, we find that grandchild interactions make important contributions to parsing performance (see Table 3).","{'title': '6 Related work', 'number': '6'}"
"Carreras (2007) presents a second-order parser that can score both sibling and grandchild parts, with complexities of O(n4) time and O(n3) space.","{'title': '6 Related work', 'number': '6'}"
"An important limitation of the parser’s factorization is that it only defines grandchild parts for outermost grandchildren: (g, h, m) is scored only when m is the outermost modifier of h in some direction.","{'title': '6 Related work', 'number': '6'}"
"Note that Models 1 and 2 have the same complexity as Carreras (2007), but strictly greater expressiveness: for each sibling or grandchild part used in the Carreras (2007) factorization, Model 1 defines an enclosing grand-sibling, while Model 2 defines an enclosing tri-sibling or grand-sibling.","{'title': '6 Related work', 'number': '6'}"
"The factored parsing approach we focus on is sometimes referred to as “graph-based” parsing; a popular alternative is “transition-based” parsing, in which trees are constructed by making a series of incremental decisions (Yamada and Matsumoto, 2003; Attardi, 2006; Nivre et al., 2006; McDonald and Nivre, 2007).","{'title': '6 Related work', 'number': '6'}"
"Transition-based parsers do not impose factorizations, so they can define arbitrary features on the tree as it is being built.","{'title': '6 Related work', 'number': '6'}"
"As a result, however, they rely on greedy or approximate search algorithms to solve Eq.","{'title': '6 Related work', 'number': '6'}"
1.,"{'title': '6 Related work', 'number': '6'}"
"In order to evaluate the effectiveness of our parsers in practice, we apply them to the Penn WSJ Treebank (Marcus et al., 1993) and the Prague Dependency Treebank (Hajiˇc et al., 2001; Hajiˇc, 1998).6 We use standard training, validation, and test splits7 to facilitate comparisons.","{'title': '7 Parsing experiments', 'number': '7'}"
Accuracy is measured with unlabeled attachment score (UAS): the percentage of words with the correct head.8,"{'title': '7 Parsing experiments', 'number': '7'}"
"Our parsing algorithms can be applied to scores originating from any source, but in our experiments we chose to use the framework of structured linear models, deriving our scores as: SCOREPART(x, p) = w · f(x, p) Here, f is a feature-vector mapping and w is a vector of associated parameters.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Following standard practice for higher-order dependency parsing (McDonald and Pereira, 2006; Carreras, 2007), Models 1 and 2 evaluate not only the relevant third-order parts, but also the lower-order parts that are implicit in their third-order factorizations.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"For example, Model 1 defines feature mappings for dependencies, siblings, grandchildren, and grand-siblings, so that the score of a dependency parse is given by: Above, y is simultaneously decomposed into several different types of parts; trivial modifications to the Model 1 parser allow it to evaluate all of the necessary parts in an interleaved fashion.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"A similar treatment of Model 2 yields five feature mappings: the four above plus ftsib(x, h, m, s, t), which represents tri-sibling parts.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"The lower-order feature mappings fdep, fsib, and fgch are based on feature sets from previous work (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras, 2007), to which we added lexicalized versions of several features.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"For example, fdep contains lexicalized “in-between” features that depend on the head and modifier words as well as a word lying in between the two; in contrast, previous work has generally defined in-between features for POS tags only.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"As another example, our second-order mappings fsib and fgch define lexical trigram features, while previous work has generally used POS trigrams only.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
Our third-order feature mappings fgsib and ftsib consist of four types of features.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"First, we define 4-gram features that characterize the four relevant indices using words and POS tags; examples include POS 4-grams and mixed 4-grams with one word and three POS tags.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Second, we define 4gram context features consisting of POS 4-grams augmented with adjacent POS tags: for example, fgsib(x, g, h, m, s) includes POS 7-grams for the tags at positions (g, h, m, s, g+1, h+1, m+1).","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Third, we define backed-offfeatures that track bigram and trigram interactions which are absent in the lower-order feature mappings: for example, ftsib(x, h, m, s, t) contains features predicated on the trigram (m, s, t) and the bigram (m, t), neither of which exist in any lower-order part.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Fourth, noting that coordinations are typically annotated as grand-siblings (e.g., “report purchases and sales” in Figure 1), we define coordination features for certain grand-sibling parts.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"For example, fgsib(x, g, h, m, s) contains features examining the implicit head-modifier relationship (g, m) that are only activated when the POS tag of s is a coordinating conjunction.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Finally, we make two brief remarks regarding the use of POS tags.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"First, we assume that input sentences have been automatically tagged in a preprocessing step.9 Second, for any feature that depends on POS tags, we include two copies of the feature: one using normal POS tags and another using coarsened versions10 of the POS tags.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"There are a wide variety of parameter estimation methods for structured linear models, such as log-linear models (Lafferty et al., 2001) and max-margin models (Taskar et al., 2003).","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"We chose the averaged structured perceptron (Freund and Schapire, 1999; Collins, 2002) as it combines highly competitive performance with fast training times, typically converging in 5–10 iterations.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
We train each parser for 10 iterations and select paon English parsing.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"For each beam value, parsers were trained on the English training set and evaluated on the English validation set; the same beam value was applied to both training and validation data.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Pass = %dependencies surviving the beam in training data, Orac = maximum achievable UAS on validation data, Acc1/Acc2 = UAS of Models 1/2 on validation data, and Time1/Time2 = minutes per perceptron training iteration for Models 1/2, averaged over all 10 iterations.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"For perspective, the English training set has a total of 39,832 sentences and 950,028 words.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
A beam of 0.0001 was used in all experiments outside this table. rameters from the iteration that achieves the best score on the validation set.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"In order to decrease training times, we follow Carreras et al. (2008) and eliminate unlikely dependencies using a form of coarse-to-fine pruning (Charniak and Johnson, 2005; Petrov and Klein, 2007).","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"In brief, we train a log-linear first-order parser11 and for every sentence x in training, validation, and test data we compute the marginal probability P(h, m  |x) of each dependency.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Our parsers are then modified to ignore any dependency (h, m) whose marginal probability is below 0.0001xmaxh' P(h', m  |x).","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
Table 1 provides information on the behavior of the pruning method.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Table 2 lists the accuracy of Models 1 and 2 on the English and Czech test sets, together with some relevant results from related work.12 The models marked “†” are not directly comparable to our work as they depend on additional sources of information that our models are trained without— unlabeled data in the case of Koo et al. (2008) and relevant results from related work.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
Note that Koo et al. (2008) is listed with standard features and semi-supervised features.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
†: see main text.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
Suzuki et al. (2009) and phrase-structure annotations in the case of Carreras et al.,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
(2008).,"{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"All three of the “†” models are based on versions of the Carreras (2007) parser, so modifying these methods to work with our new third-order parsing algorithms would be an interesting topic for future research.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"For example, Models 1 and 2 obtain results comparable to the semi-supervised parsers of Koo et al. (2008), and additive gains might be realized by applying their cluster-based feature sets to our enriched factorizations.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"In order to better understand the contributions of the various feature types, we ran additional ablation experiments; the results are listed in Table 3, in addition to the scores of Model 0 and the emulated Carreras (2007) parser (see Section 4.3).","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"Interestingly, grandchild interactions appear to provide important information: for example, when Model 2 is used without grandchild-based features (“Model 2, no-G” in Table 3), its accuracy suffers noticeably.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"In addition, it seems that grandchild interactions are particularly useful in Czech, while sibling interactions are less important: consider that Model 0, a second-order grandchild parser with no sibling-based features, can easily outperform “Model 2, no-G,” a third-order sibling parser with no grandchild-based features.","{'title': '7.1 Features for third-order parsing', 'number': '8'}"
"We have presented new parsing algorithms that are capable of efficiently parsing third-order factorizations, including both grandchild and sibling interactions.","{'title': '8 Conclusion', 'number': '9'}"
"Due to space restrictions, we have been necessarily brief at some points in this paper; some additional details can be found in Koo (2010). on validation data.","{'title': '8 Conclusion', 'number': '9'}"
"The term no-3rd indicates a parser that was trained and tested with the thirdorder feature mappings fgsib and ftsib deactivated, though lower-order features were retained; note that “Model 2, no-3rd” is not identical to the Carreras (2007) parser as it defines grandchild parts for the pair of grandchildren.","{'title': '8 Conclusion', 'number': '9'}"
"The term no-G indicates a parser that was trained and tested with the grandchild-based feature mappings fgch and fgsib deactivated; note that “Model 2, no-G” emulates the third-order sibling parser proposed by McDonald and Pereira (2006).","{'title': '8 Conclusion', 'number': '9'}"
There are several possibilities for further research involving our third-order parsing algorithms.,"{'title': '8 Conclusion', 'number': '9'}"
"One idea would be to consider extensions and modifications of our parsers, some of which have been suggested in Sections 5 and 7.4.","{'title': '8 Conclusion', 'number': '9'}"
A second area for future work lies in applications of dependency parsing.,"{'title': '8 Conclusion', 'number': '9'}"
"While we have evaluated our new algorithms on standard parsing benchmarks, there are a wide variety of tasks that may benefit from the extended context offered by our thirdorder factorizations; for example, the 4-gram substructures enabled by our approach may be useful for dependency-based language modeling in machine translation (Shen et al., 2008).","{'title': '8 Conclusion', 'number': '9'}"
"Finally, in the hopes that others in the NLP community may find our parsers useful, we provide a free distribution of our implementation.2","{'title': '8 Conclusion', 'number': '9'}"
We would like to thank the anonymous reviewers for their helpful comments and suggestions.,"{'title': 'Acknowledgments', 'number': '10'}"
We also thank Regina Barzilay and Alexander Rush for their much-appreciated input during the writing process.,"{'title': 'Acknowledgments', 'number': '10'}"
"The authors gratefully acknowledge the following sources of support: Terry Koo and Michael Collins were both funded by a DARPA subcontract under SRI (#27-001343), and Michael Collins was additionally supported by NTT (Agmt. dtd.","{'title': 'Acknowledgments', 'number': '10'}"
06/21/98).,"{'title': 'Acknowledgments', 'number': '10'}"
