col1,col2
"The noisy channel model has been applied to a wide range of problems, including spelling correction.",Introduction
These models consist of two components: a source model and a channel model.,Introduction
Very little research has gone into improving the channel model for spelling correction.,Introduction
"This paper describes a new channel model for spelling correction, based on generic string to string edits.",Introduction
Using this model gives significant performance improvements compared to previously proposed models.,Introduction
"The noisy channel model (Shannon 1948) has been successfully applied to a wide range of problems, including spelling correction.",Experiment/Discussion
These models consist of two components: a source model and a channel model.,Experiment/Discussion
"For many applications, people have devoted considerable energy to improving both components, with resulting improvements in overall system accuracy.",Experiment/Discussion
"However, relatively little research has gone into improving the channel model for spelling correction.",Experiment/Discussion
"This paper describes an improvement to noisy channel spelling correction via a more powerful model of spelling errors, be they typing mistakes or cognitive errors, than has previously been employed.",Experiment/Discussion
"Our model works by learning generic string to string edits, along with the probabilities of each of these edits.",Experiment/Discussion
This more powerful model gives significant improvements in accuracy over previous approaches to noisy channel spelling correction.,Experiment/Discussion
"This paper will address the problem of automatically training a system to correct generic single word spelling errors.1 We do not address the problem of correcting specific word set confusions such as {to,too,two} (see (Golding and Roth 1999)).",Experiment/Discussion
"We will define the spelling correction problem abstractly as follows: Given an alphabet Σ , a dictionary D consisting of strings in Σ * and a string s, where s ∉ D and s ∈ Σ *, find the word w∈ D that is most likely to have been erroneously input as s. The requirement that s ∉ D can be dropped, but it only makes sense to do so in the context of a sufficiently powerful language model.",Experiment/Discussion
"In a probabilistic system, we want to find argmaxw P(w  |s) .",Experiment/Discussion
"Applying Bayes’ Rule and dropping the constant denominator, we get the unnormalized posterior: argmaxw P(s  |w)*P(w) .",Experiment/Discussion
"We now have a noisy channel model for spelling correction, with two components, the source model P(w) and the channel model P(s  |w).",Experiment/Discussion
"The model assumes that natural language text is generated as follows: First a person chooses a word to output, according to the probability distribution P(w).",Experiment/Discussion
"Then the person attempts to output the word w, but the noisy channel induces the person to output string s instead, according to the distribution P(s  |w).",Experiment/Discussion
"For instance, under typical circumstances we would expect P(the  |the) to be very high, P(teh  |the) to be relatively high and P(hippopotamus  |the) to be extremely low.",Experiment/Discussion
"In this paper, we will refer to the channel model as the error model.",Experiment/Discussion
Two seminal papers first posed a noisy channel model solution to the spelling correction problem.,Experiment/Discussion
"In (Mayes, Damerau et al. 1991), word bigrams are used for the source model.",Experiment/Discussion
"For the error model, they first define the confusion set of a string s to include s, along with all words w in the dictionary D such that s can be derived from w by a single application of one of the four edit operations: Let C be the number of words in the confusion set of d. Then they define the error model, for all s in the confusion set of d, as: This is a very simple error model, where is the prior on a typed word being correct, and the remaining probability mass is distributed evenly among all other words in the confusion set.",Experiment/Discussion
Church and Gale (1991) propose a more sophisticated error model.,Experiment/Discussion
"Like Mayes, Damerau, et al. (1991), they consider as candidate source words only those words that are a single basic edit away from s, using the same edit set as above.",Experiment/Discussion
"However, two improvements are made.",Experiment/Discussion
"First, instead of weighing all edits equally, each unique edit has a probability associated with it.",Experiment/Discussion
"Second, insertion and deletion probabilities are conditioned on context.",Experiment/Discussion
The probability of inserting or deleting a character is conditioned on the letter appearing immediately to the left of that character.,Experiment/Discussion
The error probabilities are derived by first assuming all edits are equiprobable.,Experiment/Discussion
"They use as a training corpus a set of spacedelimited strings that were found in a large collection of text, and that (a) do not appear in their dictionary and (b) are no more than one edit away from a word that does appear in the dictionary.",Experiment/Discussion
"They iteratively run the spell checker over the training corpus to find corrections, then use these corrections to update the edit probabilities.",Experiment/Discussion
"Ristad and Yianilos (1997) present another algorithm for deriving these edit probabilities from a training corpus, and show that for the problem of word pronunciation, using the learned string edit distance gives one fourth the error rate compared to using unweighted edits.",Experiment/Discussion
"Previous error models have all been based on Damerau-Levenshtein distance measures (Damerau 1964; Levenshtein 1966), where the distance between two strings is the minimum number of single character insertions, substitutions and deletions (and in some cases, character pair transpositions) necessary to derive one string from another.",Experiment/Discussion
Improvements have been made by associating probabilities with individual edit operations.,Experiment/Discussion
We propose a much more generic error model.,Experiment/Discussion
Let be an alphabet.,Experiment/Discussion
"Our model allows all edit operations of the form 4 , where , E E * .",Experiment/Discussion
P( 4 ) is the probability that when users intends to type the string they type instead.,Experiment/Discussion
"Note that the edit operations allowed in Church and Gale (1991), Mayes, Damerau et al. (1991) and Ristad and Yianilos (1997), are properly subsumed by our generic string to string substitutions.",Experiment/Discussion
"In addition, we condition on the position in the string that the edit occurs in, P( 4 1 PSN), where PSN = {start of word, middle of word, end of word}.2 The position is determined by the location of substring in the source (dictionary) word.",Experiment/Discussion
Positional information is a powerful conditioning feature for rich edit operations.,Experiment/Discussion
"For instance, P(e  |a) does not vary greatly between the three positions mentioned above.",Experiment/Discussion
"However, P(ent  |ant) is highly dependent upon position.",Experiment/Discussion
"People rarely mistype antler as entler, but often mistype reluctant as reluctent.",Experiment/Discussion
"Within the noisy channel framework, we can informally think of our error model as follows.",Experiment/Discussion
"First, a person picks a word to generate.",Experiment/Discussion
Then she picks a partition of the characters of that word.,Experiment/Discussion
"Then she types each partition, possibly erroneously.",Experiment/Discussion
"For example, a person might choose to generate the word physical.",Experiment/Discussion
"She would then pick a partition from the set of all possible partitions, say: ph y s i c al. Then she would generate each partition, possibly with errors.",Experiment/Discussion
"After choosing this particular word and partition, the probability of generating the string fisikle with the partition f i s i k le would be P(f  |ph) *P(i  |y) * P(s  |s) *P(i  |i) * P(k  |c) *P(le  |al).3 The above example points to advantages of our model compared to previous models based on weighted Damerau-Levenshtein distance.",Experiment/Discussion
Note that neither P(f  |ph) nor P(le  |al) are modeled directly in the previous approaches to error modeling.,Experiment/Discussion
"A number of studies have pointed out that a high percentage of misspelled words are wrong due to a single letter insertion, substitution, or deletion, or from a letter pair transposition (Damerau 1964; Peterson 1986).",Experiment/Discussion
"However, even if this is the case, it does not imply that nothing is to be gained by modeling more powerful edit operations.",Experiment/Discussion
"If somebody types the string confidant, we do not really want to model this error as P(a  |e), but rather P(ant | ent).",Experiment/Discussion
"And anticedent can more accurately be modeled by P(anti  |ante), rather than P(i  |e).",Experiment/Discussion
"By taking a more generic approach to error modeling, we can more accurately model the errors people make.",Experiment/Discussion
A formal presentation of our model follows.,Experiment/Discussion
Let Part(w) be the set of all possible ways of partitioning string w into adjacent (possibly null) substrings.,Experiment/Discussion
"For a particular partition R∈Part(w), where |R|=j (R consists of j contiguous segments), let Ri be the ith segment.",Experiment/Discussion
"Under our model, One particular pair of alignments for s and w induces a set of edits that derive s from w. By only considering the best partitioning of s and w, we can simplify this to: We do not yet have a good way to derive P(R  |w), and in running experiments we determined that poorly modeling this distribution gave slightly worse performance than not modeling it at all, so in practice we drop this term.",Experiment/Discussion
"To train the model, we need a training set consisting of {si, wi} string pairs, representing spelling errors si paired with the correct spelling of the word wi.",Experiment/Discussion
"We begin by aligning the letters in si with those in wi based on minimizing the edit distance between si and wi, based on single character insertions, deletions and substitutions.",Experiment/Discussion
"For instance, given the training pair <akgsual, actual>, this could be aligned as: This corresponds to the sequence of edit operations: a4a c4k 4g t4s u4u a4a l4l To allow for richer contextual information, we expand each nonmatch substitution to incorporate up to N additional adjacent edits.",Experiment/Discussion
"For example, for the first nonmatch edit in the example above, with N=2, we would generate the following substitutions: c 4 k ac 4 ak c 4 kg ac 4 akg ct 4 kgs We would do similarly for the other nonmatch edits, and give each of these substitutions a fractional count.",Experiment/Discussion
We can then calculate the probability of each substitution 4 as count( 4 )/count( ). count( 4 ) is simply the sum of the counts derived from our training data as explained above.,Experiment/Discussion
Estimating count( ) is a bit tricky.,Experiment/Discussion
"If we took a text corpus, then extracted all the spelling errors found in the corpus and then used those errors for training, count( ) would simply be the number of times substring occurs in the text corpus.",Experiment/Discussion
"But if we are training from a set of {si, wi} tuples and not given an associated corpus, we can do the following: (a) From a large collection of representative text, count the number of occurrences of .",Experiment/Discussion
"Since the rate of errors varies widely and is difficult to measure, we can only crudely approximate it.",Experiment/Discussion
"Fortunately, we have found empirically that the results are not very sensitive to the value chosen.",Experiment/Discussion
"Essentially, we are doing one iteration of the Expectation-Maximization algorithm (Dempster, Laird et al. 1977).",Experiment/Discussion
"The idea is that contexts that are useful will accumulate fractional counts across multiple instances, whereas contexts that are noise will not accumulate significant counts.",Experiment/Discussion
"Given a string s, where s o D , we want to return argmaxw P(w  |s)P(w  |context) .",Experiment/Discussion
"Our approach will be to return an n-best list of candidates according to the error model, and then rescore these candidates by taking into account the source probabilities.",Experiment/Discussion
"We are given a dictionary D and a set of parameters P, where each parameter is P( 4 ) for some , E E * , meaning the probability that if a string is intended, the noisy channel will produce instead.",Experiment/Discussion
"First note that for a particular pair of strings {s, w} we can use the standard dynamic programming algorithm for finding edit distance by filling a |s|*|w |weight matrix (Wagner and Fisher 1974; Hall and Dowling 1980), with only minor changes.",Experiment/Discussion
"For computing the Damerau-Levenshtein distance between two strings, this can be done in O(|s|*|w|) time.",Experiment/Discussion
"When we allow generic edit operations, the complexity increases to O(|s|2*|w|2).",Experiment/Discussion
"In filling in a cell (i,j) in the matrix for computing DamerauLevenshtein distance we need only examine cells (i,j-1), (i-1,j) and (i-1,j-1).",Experiment/Discussion
"With generic edits, we have to examine all cells (a,b) where a<_ i and b <_ j.",Experiment/Discussion
"We first precompile the dictionary into a trie, with each node in the trie corresponding to a vector of weights.",Experiment/Discussion
"If we think of the x-axis of the standard weight matrix for computing edit distance as corresponding to w (a word in the dictionary), then the vector at each node in the trie corresponds to a column in the weight matrix associated with computing the distance between s and the string prefix ending at that trie node.",Experiment/Discussion
We store the 4 parameters as a trie of tries.,Experiment/Discussion
We have one trie corresponding to all strings that appear on the left hand side of some substitution in our parameter set.,Experiment/Discussion
"At every node in this trie, corresponding to a string , we point to a trie consisting of all strings that appear on the right hand side of a substitution in our parameter set with on the left hand side.",Experiment/Discussion
We store the substitution probabilities at the terminal nodes of the tries.,Experiment/Discussion
"By storing both and strings in reverse order, we can efficiently compute edit distance over the entire dictionary.",Experiment/Discussion
"We process the dictionary trie from the root downwards, filling in the weight vector at each node.",Experiment/Discussion
"To find the substitution parameters that are applicable, given a particular node in the trie and a particular position in the input string s (this corresponds to filling in one cell in one vector of a dictionary trie node) we trace up from the node to the root, while tracing down the trie from the root.",Experiment/Discussion
"As we trace down the trie, if we encounter a terminal node, we follow the pointer to the corresponding trie, and then trace backwards from the position in s while tracing down the trie.",Experiment/Discussion
Note that searching through a static dictionary D is not a requirement of our error model.,Experiment/Discussion
"It is possible that with a different search technique, we could apply our model to languages such as Turkish for which a static dictionary is inappropriate (Oflazer 1994).",Experiment/Discussion
"Given a 200,000-word dictionary, and using our best error model, we are able to spell check strings not in the dictionary in approximately 50 milliseconds on average, running on a Dell 610 500mhz Pentium III workstation.",Experiment/Discussion
"We ran experiments using a 10,000word corpus of common English spelling errors, paired with their correct spelling.",Results/Conclusion
We used 80% of this corpus for training and 20% for evaluation.,Results/Conclusion
"Our dictionary contained approximately 200,000 entries, including all words in the test set.",Results/Conclusion
The results in this section are obtained with a language model that assigns uniform probability to all words in the dictionary.,Results/Conclusion
"In Table 1 we show K-best results for different maximum context window sizes, without using positional information.",Results/Conclusion
"For instance, the 2-best accuracy is the percentage of time the correct answer is one of the top two answers returned by the system.",Results/Conclusion
"Note that a maximum window of zero corresponds to the set of single character insertion, deletion and substitution edits, weighted with their probabilities.",Results/Conclusion
"We see that, up to a point, additional context provides us with more accurate spelling correction and beyond that, additional context neither helps nor hurts.",Results/Conclusion
"In Table 1, the row labelled CG shows the results when we allow the equivalent set of edit operations to those used in (Church and Gale 1991).",Results/Conclusion
This is a proper superset of the set of edits where the maximum window is zero and a proper subset of the edits where the maximum window is one.,Results/Conclusion
"The CG model is essentially equivalent to the Church and Gale error model, except (a) the models above can posit an arbitrary number of edits and (b) we did not do parameter reestimation (see below).",Results/Conclusion
"Next, we measured how much we gain by conditioning on the position of the edit relative to the source word.",Results/Conclusion
These results are shown in Table 2.,Results/Conclusion
"As we expected, positional information helps more when using a richer edit set than when using only single character edits.",Results/Conclusion
"For a maximum window size of 0, using positional information gives a 13% relative improvement in 1-best accuracy, whereas for a maximum window size of 4, the gain is 22%.",Results/Conclusion
Our full strength model gives a 52% relative error reduction on 1-best accuracy compared to the CG model (95.0% compared to 89.5%).,Results/Conclusion
"We experimented with iteratively reestimating parameters, as was done in the original formulation in (Church and Gale 1991).",Results/Conclusion
Doing so resulted in a slight degradation in performance.,Results/Conclusion
The data we are using is much cleaner than that used in (Church and Gale 1991) which probably explains why reestimation benefited them in their experiments and did not give any benefit to the error models in our experiments.,Results/Conclusion
"Next, we explore what happens to our results as we add a language model.",Results/Conclusion
"In order to get errors in context, we took the Brown Corpus and found all occurrences of all words in our test set.",Results/Conclusion
"Then we mapped these words to the incorrect spellings they were paired with in the test set, and ran our spell checker to correct the misspellings.",Results/Conclusion
We used two language models.,Results/Conclusion
"The first assumed all words are equally likely, i.e. the null language model used above.",Results/Conclusion
The second used a trigram language model derived from a large collection of on-line text (not including the Brown Corpus).,Results/Conclusion
"Because a spell checker is typically applied right after a word is typed, the language model only used left context.",Results/Conclusion
"We show the results in Figure 1, where we used the error model with positional information and with a maximum context window of four, and used the language model to rescore the 5 best word candidates returned by the error model.",Results/Conclusion
"Note that for the case of no language model, the results are lower than the results quoted above (e.g. a 1-best score above of 95.0%, compared to 93.9% in the graph).",Results/Conclusion
"This is because the results on the Brown Corpus are computed per token, whereas above we were computing results per type.",Results/Conclusion
One question we wanted to ask is whether using a good language model would obviate the need for a good error model.,Results/Conclusion
"In Figure 2, we applied the trigram model to resort the 5-best results of the CG model.",Results/Conclusion
"We see that while a language model improves results, using the better error model (Figure 1) still gives significantly better results.",Results/Conclusion
Using a language model with our best error model gives a 73.6% error reduction compared to using a language model with the CG error model.,Results/Conclusion
Rescoring the 20-best output of the CG model instead of the 5-best only improves the 1-best accuracy from 90.9% to 91.0%.,Results/Conclusion
"We have presented a new error model for noisy channel spelling correction based on generic string to string edits, and have demonstrated that it results in a significant improvement in performance compared to previous approaches.",Results/Conclusion
"Without a language model, our error model gives a 52% reduction in spelling correction error rate compared to the weighted DamerauLevenshtein distance technique of Church and Gale.",Results/Conclusion
"With a language model, our model gives a 74% reduction in error.",Results/Conclusion
One exciting future line of research is to explore error models that adapt to an individual or subpopulation.,Results/Conclusion
"With a rich set of edits, we hope highly accurate individualized spell checking can soon become a reality.",Results/Conclusion
