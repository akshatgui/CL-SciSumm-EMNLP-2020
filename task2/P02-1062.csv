col1,col2
"This paper describes algorithms which rerank the top N hypotheses from a maximum-entropy tagger, the application being the recovery of named-entity boundaries in a corpus of web data.",Introduction
The first approach uses a boosting algorithm for ranking problems.,Introduction
The second approach uses the voted perceptron algorithm.,Introduction
"Both algorithms give comparable, significant improvements over the maximum-entropy baseline.",Introduction
"The voted perceptron algorithm can be considerably more efficient to train, at some cost in computation on test examples.",Introduction
Recent work in statistical approaches to parsing and tagging has begun to consider methods which incorporate global features of candidate structures.,Experiment/Discussion
Examples of such techniques are Markov Random Fields (Abney 1997; Della Pietra et al. 1997; Johnson et al.,Experiment/Discussion
"1999), and boosting algorithms (Freund et al. 1998; Collins 2000; Walker et al.",Experiment/Discussion
2001).,Experiment/Discussion
One appeal of these methods is their flexibility in incorporating features into a model: essentially any features which might be useful in discriminating good from bad structures can be included.,Experiment/Discussion
"A second appeal of these methods is that their training criterion is often discriminative, attempting to explicitly push the score or probability of the correct structure for each training sentence above the score of competing structures.",Experiment/Discussion
"This discriminative property is shared by the methods of (Johnson et al. 1999; Collins 2000), and also the Conditional Random Field methods of (Lafferty et al.",Experiment/Discussion
2001).,Experiment/Discussion
"In a previous paper (Collins 2000), a boosting algorithm was used to rerank the output from an existing statistical parser, giving significant improvements in parsing accuracy on Wall Street Journal data.",Experiment/Discussion
"Similar boosting algorithms have been applied to natural language generation, with good results, in (Walker et al. 2001).",Experiment/Discussion
In this paper we apply reranking methods to named-entity extraction.,Experiment/Discussion
"A state-ofthe-art (maximum-entropy) tagger is used to generate 20 possible segmentations for each input sentence, along with their probabilities.",Experiment/Discussion
We describe a number of additional global features of these candidate segmentations.,Experiment/Discussion
These additional features are used as evidence in reranking the hypotheses from the max-ent tagger.,Experiment/Discussion
"We describe two learning algorithms: the boosting method of (Collins 2000), and a variant of the voted perceptron algorithm, which was initially described in (Freund & Schapire 1999).",Experiment/Discussion
We applied the methods to a corpus of over one million words of tagged web data.,Experiment/Discussion
"The methods give significant improvements over the maximum-entropy tagger (a 17.7% relative reduction in error-rate for the voted perceptron, and a 15.6% relative improvement for the boosting method).",Experiment/Discussion
"One contribution of this paper is to show that existing reranking methods are useful for a new domain, named-entity tagging, and to suggest global features which give improvements on this task.",Experiment/Discussion
"We should stress that another contribution is to show that a new algorithm, the voted perceptron, gives very credible results on a natural language task.",Experiment/Discussion
"It is an extremely simple algorithm to implement, and is very fast to train (the testing phase is slower, but by no means sluggish).",Experiment/Discussion
It should be a viable alternative to methods such as the boosting or Markov Random Field algorithms described in previous work.,Experiment/Discussion
Over a period of a year or so we have had over one million words of named-entity data annotated.,Experiment/Discussion
"The data is drawn from web pages, the aim being to support a question-answering system over web data.",Experiment/Discussion
"A number of categories are annotated: the usual people, organization and location categories, as well as less frequent categories such as brand-names, scientific terms, event titles (such as concerts) and so on.",Experiment/Discussion
"From this data we created a training set of 53,609 sentences (1,047,491 words), and a test set of 14,717 sentences (291,898 words).",Experiment/Discussion
The task we consider is to recover named-entity boundaries.,Experiment/Discussion
We leave the recovery of the categories of entities to a separate stage of processing.1 We evaluate different methods on the task through precision and recall.,Experiment/Discussion
"If a method proposes entities on the test set, and of these are correct (i.e., an entity is marked by the annotator with exactly the same span as that proposed) then the precision of a method is .",Experiment/Discussion
"Similarly, if is the total number of entities in the human annotated version of the test set, then the recall is .",Experiment/Discussion
"The problem can be framed as a tagging task – to tag each word as being either the start of an entity, a continuation of an entity, or not to be part of an entity at all (we will use the tags S, C and N respectively for these three cases).",Experiment/Discussion
"As a baseline model we used a maximum entropy tagger, very similar to the ones described in (Ratnaparkhi 1996; Borthwick et.",Experiment/Discussion
al 1998; McCallum et al. 2000).,Experiment/Discussion
"Max-ent taggers have been shown to be highly competitive on a number of tagging tasks, such as part-of-speech tagging (Ratnaparkhi 1996), named-entity recognition (Borthwick et.",Experiment/Discussion
"al 1998), and information extraction tasks (McCallum et al. 2000).",Experiment/Discussion
Thus the maximumentropy tagger we used represents a serious baseline for the task.,Experiment/Discussion
"We used the following features (several of the features were inspired by the approach of (Bikel et. al 1999), an HMM model which gives excellent results on named entity extraction): The word being tagged, the previous word, and the next word.",Experiment/Discussion
"The previous tag, and the previous two tags (bigram and trigram features).",Experiment/Discussion
A compound feature of three fields: (a) Is the word at the start of a sentence?,Experiment/Discussion
; (b) does the word occur in a list of words which occur more frequently as lower case rather than upper case words in a large corpus of text?,Experiment/Discussion
"(c) the type of the first letter of the word, where is defined as ‘A’ if is a capitalized letter, ‘a’ if is a lower-case letter, ‘0’ if is a digit, and otherwise.",Experiment/Discussion
"For example, if the word Animal is seen at the start of a sentence, and it occurs in the list of frequent lower-cased words, then it would be mapped to the feature 1-1-A.",Experiment/Discussion
The word with each character mapped to its .,Experiment/Discussion
"For example, G.M. would be mapped to A.A., and Animal would be mapped to Aaaaaa.",Experiment/Discussion
"The word with each character mapped to its type, but repeated consecutive character types are not repeated in the mapped string.",Experiment/Discussion
"For example, Animal would be mapped to Aa, G.M. would again be mapped to A.A..",Experiment/Discussion
The tagger was applied and trained in the same way as described in (Ratnaparkhi 1996).,Experiment/Discussion
"The feature templates described above are used to create a set of binary features , where is the tag, and is the “history”, or context.",Experiment/Discussion
"An example is if t = S and the word being tagged = “Mr.” otherwise , defining a conditional distribution over the tags given a history as The parameters are trained using Generalized Iterative Scaling.",Experiment/Discussion
"Following (Ratnaparkhi 1996), we only include features which occur 5 times or more in training data.",Experiment/Discussion
"In decoding, we use a beam search to recover 20 candidate tag sequences for each sentence (the sentence is decoded from left to right, with the top 20 most probable hypotheses being stored at each point).",Experiment/Discussion
"As a baseline we trained a model on the full 53,609 sentences of training data, and decoded the 14,717 sentences of test data.",Experiment/Discussion
"This gave 20 candidates per The parameters of the model are for test sentence, along with their probabilities.",Experiment/Discussion
"The baseline method is to take the most probable candidate for each test data sentence, and then to calculate precision and recall figures.",Experiment/Discussion
"Our aim is to come up with strategies for reranking the test data candidates, in such a way that precision and recall is improved.",Experiment/Discussion
"In developing a reranking strategy, the 53,609 sentences of training data were split into a 41,992 sentence training portion, and a 11,617 sentence development set.",Experiment/Discussion
"The training portion was split into 5 sections, and in each case the maximum-entropy tagger was trained on 4/5 of the data, then used to decode the remaining 1/5.",Experiment/Discussion
"The top 20 hypotheses under a beam search, together with their log probabilities, were recovered for each training sentence.",Experiment/Discussion
"In a similar way, a model trained on the 41,992 sentence set was used to produce 20 hypotheses for each sentence in the development set. generator, and hashes them to integers.",Experiment/Discussion
"For example, suppose the three strings WE=Gen Xer, WE=The Day They Shot John Lennon, WE=Dougherty Arts Center were hashed to 100, 250, and 500 respectively.",Experiment/Discussion
"Conceptually, the candidate is represented by a large number of features for where is the number of distinct feature strings in training data.",Experiment/Discussion
"In this example, only take the value, all other features being zero.",Experiment/Discussion
We now introduce some notation with which to describe the full set of global features.,Experiment/Discussion
"First, we assume the following primitives of an input candidate: for is the’th tag in the tagged sequence.",Experiment/Discussion
The module we describe in this section generates global features for each candidate tagged sequence.,Experiment/Discussion
"As input it takes a sentence, along with a proposed segmentation (i.e., an assignment of a tag for each word in the sentence).",Experiment/Discussion
"As output, it produces a set of feature strings.",Experiment/Discussion
We will use the following tagged sentence as a running example in this section: An example feature type is simply to list the full strings of entities that appear in the tagged input.,Experiment/Discussion
"In this example, this would give the three features WE=Gen Xer WE=The Day They Shot John Lennon WE=Dougherty Arts Center Here WE stands for “whole entity”.",Experiment/Discussion
"Throughout this section, we will write the features in this format.",Experiment/Discussion
"The start of the feature string indicates the feature type (in this case WE), followed by =.",Experiment/Discussion
"Following the type, there are generally 1 or more words or other symbols, which we will separate with the symbol .",Experiment/Discussion
"A seperate module in our implementation takes the strings produced by the global-feature for is if begins with a lowercase letter, otherwise. for is a transformation of , where the transformation is applied in the same way as the final feature type in the maximum entropy tagger.",Experiment/Discussion
"Each character in the word is mapped to its , but repeated consecutive character types are not repeated in the mapped string.",Experiment/Discussion
"For example, Animal would be mapped to Aa in this feature, G.M. would again be mapped to A.A.. for is the same as , but has an additional flag appended.",Experiment/Discussion
The flag indicates whether or not the word appears in a dictionary of words which appeared more often lower-cased than capitalized in a large corpus of text.,Experiment/Discussion
"In our example, Animal appears in the lexicon, but G.M. does not, so the two values for would be Aa1 and A.A.0 respectively.",Experiment/Discussion
"In addition, and are all defined to be NULL if or .",Experiment/Discussion
Most of the features we describe are anchored on entity boundaries in the candidate segmentation.,Experiment/Discussion
We will use “feature templates” to describe the features that we used.,Experiment/Discussion
"As an example, suppose that an entity seen in a candidate.",Experiment/Discussion
We take the entity to span words inclusive in the candidate. is seen from words to inclusive in a segmentation.,Experiment/Discussion
Then the WE feature described in the previous section can be generated by the template WE= Applying this template to the three entities in the running example generates the three feature strings described in the previous section.,Experiment/Discussion
"As another example, consider the template FF= .",Experiment/Discussion
"This will generate a feature string for each of the entities in a candidate, this time using the values rather than .",Experiment/Discussion
"For the full set of feature templates that are anchored around entities, see figure 1.",Experiment/Discussion
A second set of feature templates is anchored around quotation marks.,Experiment/Discussion
"In our corpus, entities (typically with long names) are often seen surrounded by quotes.",Experiment/Discussion
"For example, “The Day They Shot John Lennon”, the name of a band, appears in the running example.",Experiment/Discussion
"Define to be the index of any double quotation marks in the candidate, to be the index of the next (matching) double quotation marks if they appear in the candidate.",Experiment/Discussion
"Additionally, define to be the index of the last word beginning with a lower case letter, upper case letter, or digit within the quotation marks.",Experiment/Discussion
"The first set of feature templates tracks the values of for the words within quotes:2 Q= Q2= 2We only included these features if , to prevent an explosion in the length of feature strings.",Experiment/Discussion
", , and .",Experiment/Discussion
"The values for and would be and (these features are derived from The and Lennon, which respectively do and don’t appear in the capitalization lexicon).",Experiment/Discussion
This would give QF= and QF2= .,Experiment/Discussion
"At this point, we have fully described the representation used as input to the reranking algorithms.",Experiment/Discussion
The maximum-entropy tagger gives 20 proposed segmentations for each input sentence.,Experiment/Discussion
"Each candidate is represented by the log probability from the tagger, as well as the values of the global features for .",Experiment/Discussion
"In the next section we describe algorithms which blend these two sources of information, the aim being to improve upon a strategy which just takes the candidate from The next set of feature templates are sensitive to whether the entire sequence between quotes is tagged as a named entity.",Experiment/Discussion
"Define to be if S, and =C for (i.e., if the sequence of words within the quotes is tagged as a single entity).",Experiment/Discussion
"Also define to be the number of upper cased words within the quotes, to be the number of lower case words, and to be if , otherwise.",Experiment/Discussion
Then two other templates are: QF= QF2= In the “The Day They Shot John Lennon” example we would have provided that the entire sequence within quotes was tagged as an entity.,Experiment/Discussion
"Additionally,",Experiment/Discussion
This section introduces notation for the reranking task.,Experiment/Discussion
The framework is derived by the transformation from ranking problems to a margin-based classification problem in (Freund et al. 1998).,Experiment/Discussion
"It is also related to the Markov Random Field methods for parsing suggested in (Johnson et al. 1999), and the boosting methods for parsing in (Collins 2000).",Experiment/Discussion
We consider the following set-up: Training data is a set of example input/output pairs.,Experiment/Discussion
In tagging we would have training examples where each is a sentence and each is the correct sequence of tags for that sentence.,Experiment/Discussion
We assume some way of enumerating a set of candidates for a particular sentence.,Experiment/Discussion
"We use to denote the’th candidate for the’th sentence in training data, and to denote the set of candidates for .",Experiment/Discussion
"In this paper, the top outputs from a maximum entropy tagger are used as the set of candidates.",Experiment/Discussion
"Without loss of generality we take to be the candidate for which has the most correct tags, i.e., is closest to being correct.3 is the probability that the base model assigns to .",Experiment/Discussion
"We define We assume a set of additional features, for .",Experiment/Discussion
The features could be arbitrary functions of the candidates; our hope is to include features which help in discriminating good candidates from bad ones.,Experiment/Discussion
"Finally, the parameters of the model are a vector of parameters, ranking function is defined as This function assigns a real-valued number to a candidate .",Experiment/Discussion
"It will be taken to be a measure of the plausibility of a candidate, higher scores meaning higher plausibility.",Experiment/Discussion
"As such, it assigns a ranking to different candidate structures for the same sentence, 3In the event that multiple candidates get the same, highest score, the candidate with the highest value of log-likelihood under the baseline model is taken as . and in particular the output on a training or test example is .",Experiment/Discussion
"In this paper we take the features to be fixed, the learning problem being to choose a good setting for the parameters .",Experiment/Discussion
In some parts of this paper we will use vector notation.,Experiment/Discussion
Define to be the vector .,Experiment/Discussion
Then the ranking score can also be written as where is the dot product between vectors and .,Experiment/Discussion
The first algorithm we consider is the boosting algorithm for ranking described in (Collins 2000).,Experiment/Discussion
The algorithm is a modification of the method in (Freund et al. 1998).,Experiment/Discussion
"The method can be considered to be a greedy algorithm for finding the parameters that minimize the loss function where as before, .",Experiment/Discussion
The theoretical motivation for this algorithm goes back to the PAC model of learning.,Experiment/Discussion
"Intuitively, it is useful to note that this loss function is an upper bound on the number of “ranking errors”, a ranking error being a case where an incorrect candidate gets a higher value for than a correct candidate.",Experiment/Discussion
"This follows because for all , , where we define to be for , and otherwise.",Experiment/Discussion
Hence where .,Experiment/Discussion
Note that the number of ranking errors is .,Experiment/Discussion
"As an initial step, is set to be and all other parameters for are set to be zero.",Experiment/Discussion
The algorithm then proceeds for iterations ( is usually chosen by cross validation on a development set).,Experiment/Discussion
"At each iteration, a single feature is chosen, and its weight is updated.",Experiment/Discussion
"Suppose the current parameter values are , and a single feature is chosen, its weight being updated through an increment, i.e., .",Experiment/Discussion
"Then the new loss, after this parameter update, will be the tagger with the highest score for .",Experiment/Discussion
.,Experiment/Discussion
.,Experiment/Discussion
The where .,Experiment/Discussion
"The boosting algorithm chooses the feature/update pair which is optimal in terms of minimizing the loss function, i.e., and then makes the update .",Experiment/Discussion
Figure 2 shows an algorithm which implements this greedy procedure.,Experiment/Discussion
"See (Collins 2000) for a full description of the method, including justification that the algorithm does in fact implement the update in Eq.",Experiment/Discussion
"1 at each iteration.4 The algorithm relies on the following arrays: Thus is an index from features to correct/incorrect candidate pairs where the ’th feature takes value on the correct candidate, and value on the incorrect candidate.",Experiment/Discussion
The array is a similar index from features to examples.,Experiment/Discussion
The arrays and are reverse indices from training examples to features.,Experiment/Discussion
"Figure 3 shows the training phase of the perceptron algorithm, originally introduced in (Rosenblatt 1958).",Experiment/Discussion
"The algorithm maintains a parameter vector , which is initially set to be all zeros.",Experiment/Discussion
"The algorithm then makes a pass over the training set, at each training example storing a parameter vector for .",Experiment/Discussion
The parameter vector is only modified when a mistake is made on an example.,Experiment/Discussion
"In this case the update is very simple, involving adding the difference of the offending examples’ representations ( in the figure).",Experiment/Discussion
"See (Cristianini and Shawe-Taylor 2000) chapter 2 for discussion of the perceptron algorithm, and theory justifying this method for setting the parameters.",Experiment/Discussion
"In the most basic form of the perceptron, the parameter values are taken as the final parameter settings, and the output on a new test example with for is simply the highest .",Experiment/Discussion
"Input: A set of candidates for , A sequence of parameter vectors for Initialization: Set for ( stores the number of votes for ) scoring candidate under these parameter values, i.e., where .",Experiment/Discussion
"(Freund & Schapire 1999) describe a refinement of the perceptron, the voted perceptron.",Experiment/Discussion
The training phase is identical to that in figure 3.,Experiment/Discussion
"Note, however, that all parameter vectors for are stored.",Experiment/Discussion
Thus the training phase can be thought of as a way of constructing different parameter settings.,Experiment/Discussion
"Each of these parameter settings will have its own highest ranking candidate, where .",Experiment/Discussion
"The idea behind the voted perceptron is to take each of the parameter settings to “vote” for a candidate, and the candidate which gets the most votes is returned as the most likely candidate.",Experiment/Discussion
See figure 4 for the algorithm.5,Experiment/Discussion
We applied the voted perceptron and boosting algorithms to the data described in section 2.3.,Experiment/Discussion
Only features occurring on 5 or more distinct training sentences were included in the model.,Experiment/Discussion
"This resulted precision, recall, F-measure.",Experiment/Discussion
Figures in parantheses are relative improvements in error rate over the maximum-entropy model.,Experiment/Discussion
"All figures are percentages. in 93,777 distinct features.",Experiment/Discussion
"The two methods were trained on the training portion (41,992 sentences) of the training set.",Experiment/Discussion
We used the development set to pick the best values for tunable parameters in each algorithm.,Experiment/Discussion
"For boosting, the main parameter to pick is the number of rounds, .",Experiment/Discussion
"We ran the algorithm for a total of 300,000 rounds, and found that the optimal value for F-measure on the development set occurred after 83,233 rounds.",Experiment/Discussion
"For the voted perceptron, the representation was taken to be a vector where is a parameter that influences the relative contribution of the log-likelihood term versus the other features.",Experiment/Discussion
A value of was found to give the best results on the development set.,Experiment/Discussion
Figure 5 shows the results for the three methods on the test set.,Experiment/Discussion
"Both of the reranking algorithms show significant improvements over the baseline: a 15.6% relative reduction in error for boosting, and a 17.7% relative error reduction for the voted perceptron.",Experiment/Discussion
"In our experiments we found the voted perceptron algorithm to be considerably more efficient in training, at some cost in computation on test examples.",Experiment/Discussion
"Another attractive property of the voted perceptron is that it can be used with kernels, for example the kernels over parse trees described in (Collins and Duffy 2001; Collins and Duffy 2002).",Experiment/Discussion
"(Collins and Duffy 2002) describe the voted perceptron applied to the named-entity data in this paper, but using kernel-based features rather than the explicit features described in this paper.",Experiment/Discussion
"See (Collins 2002) for additional work using perceptron algorithms to train tagging models, and a more thorough description of the theory underlying the perceptron algorithm applied to ranking problems.",Experiment/Discussion
"A question regarding the approaches in this paper is whether the features we have described could be incorporated in a maximum-entropy tagger, giving similar improvements in accuracy.",Results/Conclusion
This section discusses why this is unlikely to be the case.,Results/Conclusion
The problem described here is closely related to the label bias problem described in (Lafferty et al. 2001).,Results/Conclusion
One straightforward way to incorporate global features into the maximum-entropy model would be to introduce new features which indicated whether the tagging decision in the history creates a particular global feature.,Results/Conclusion
"For example, we could introduce a feature if t = N and this decision creates an LWLC=1 feature otherwise As an example, this would take the value if its was tagged as N in the following context,",Results/Conclusion
"because tagging its as N in this context would create an entity whose last word was not capitalized, i.e., University for.",Results/Conclusion
Similar features could be created for all of the global features introduced in this paper.,Results/Conclusion
This example also illustrates why this approach is unlikely to improve the performance of the maximum-entropy tagger.,Results/Conclusion
The parameter associated with this new feature can only affect the score for a proposed sequence by modifying at the point at which .,Results/Conclusion
"In the example, this means that the LWLC=1 feature can only lower the score for the segmentation by lowering the probability of tagging its as N. But its has almost probably of not appearing as part of an entity, so should be almost whether is or in this context!",Results/Conclusion
"The decision which effectively created the entity University for was the decision to tag for as C, and this has already been made.",Results/Conclusion
The independence assumptions in maximum-entropy taggers of this form often lead points of local ambiguity (in this example the tag for the word for) to create globally implausible structures with unreasonably high scores.,Results/Conclusion
See (Collins 1999) section 8.4.2 for a discussion of this problem in the context of parsing.,Results/Conclusion
Acknowledgements Many thanks to Jack Minisi for annotating the named-entity data used in the experiments.,Results/Conclusion
"Thanks also to Nigel Duffy, Rob Schapire and Yoram Singer for several useful discussions.",Results/Conclusion
