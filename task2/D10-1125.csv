col1,col2
This paper introduces algorithms for nonparsing based on decomposi- We focus on parsing algorithms for nonhead a generalization of head-automata models to non-projective structures.,Introduction
"The dual decomposition algorithms are simple and efficient, relying on standard dynamic programming and minimum spanning tree algorithms.",Introduction
They provably solve an LP relaxation of the non-projective parsing problem.,Introduction
"Empirically the LP relaxation is very often tight: for many languages, exact solutions are achieved on over 98% of test sentences.",Introduction
The accuracy of our models is higher than previous work on a broad range of datasets.,Introduction
Non-projective dependency parsing is useful for many languages that exhibit non-projective syntactic structures.,Experiment/Discussion
"Unfortunately, the non-projective parsing problem is known to be NP-hard for all but the simplest models (McDonald and Satta, 2007).",Experiment/Discussion
"There has been a long history in combinatorial optimization of methods that exploit structure in complex problems, using methods such as dual decomposition or Lagrangian relaxation (Lemar´echal, 2001).",Experiment/Discussion
"Thus far, however, these methods are not widely used in NLP.",Experiment/Discussion
This paper introduces algorithms for nonprojective parsing based on dual decomposition.,Experiment/Discussion
"We focus on parsing algorithms for non-projective head automata, a generalization of the head-automata models of Eisner (2000) and Alshawi (1996) to nonprojective structures.",Experiment/Discussion
"These models include nonprojective dependency parsing models with higherorder (e.g., sibling and/or grandparent) dependency relations as a special case.",Experiment/Discussion
"Although decoding of full parse structures with non-projective head automata is intractable, we leverage the observation that key components of the decoding can be efficiently computed using combinatorial algorithms.",Experiment/Discussion
"In particular, In this paper we first give the definition for nonprojective head automata, and describe the parsing algorithm.",Experiment/Discussion
"The algorithm can be viewed as an instance of Lagrangian relaxation; we describe this connection, and give convergence guarantees for the method.",Experiment/Discussion
We describe a generalization to models that include grandparent dependencies.,Experiment/Discussion
We then introduce a perceptron-driven training algorithm that makes use of point 1 above.,Experiment/Discussion
"We describe experiments on non-projective parsing for a number of languages, and in particular compare the dual decomposition algorithm to approaches based on general-purpose linear programming (LP) or integer linear programming (ILP) solvers (Martins et al., 2009).",Experiment/Discussion
The accuracy of our models is higher than previous work on a broad range of datasets.,Experiment/Discussion
"The method gives exact solutions to the decoding problem, together with a certificate of optimality, on over 98% of test examples for many of the test languages, with parsing times ranging between 0.021 seconds/sentence for the most simple languages/models, to 0.295 seconds/sentence for the most complex settings.",Experiment/Discussion
"The method compares favorably to previous work using LP/ILP formulations, both in terms of efficiency, and also in terms of the percentage of exact solutions returned.",Experiment/Discussion
"While the focus of the current paper is on nonprojective dependency parsing, the approach opens up new ways of thinking about parsing algorithms for lexicalized formalisms such as TAG (Joshi and Schabes, 1997), CCG (Steedman, 2000), and projective head automata.",Experiment/Discussion
McDonald et al. (2005) describe MST-based parsing for non-projective dependency parsing models with arc-factored decompositions; McDonald and Pereira (2006) make use of an approximate (hill-climbing) algorithm for parsing with more complex models.,Experiment/Discussion
"McDonald and Pereira (2006) and McDonald and Satta (2007) describe complexity results for nonprojective parsing, showing that parsing for a variety of models is NP-hard.",Experiment/Discussion
Riedel and Clarke (2006) describe ILP methods for the problem; Martins et al. (2009) recently introduced alternative LP and ILP formulations.,Experiment/Discussion
"Our algorithm differs in that we do not use general-purpose LP or ILP solvers, instead using an MST solver in combination with dynamic programming; thus we leverage the underlying structure of the problem, thereby deriving more efficient decoding algorithms.",Experiment/Discussion
Both dual decomposition and Lagrangian relaxation have a long history in combinatorial optimization.,Experiment/Discussion
"Our work was originally inspired by recent work on dual decomposition for inference in graphical models (Wainwright et al., 2005; Komodakis et al., 2007).",Experiment/Discussion
"However, the non-projective parsing problem has a very different structure from these models, and the decomposition we use is very different in nature from those used in graphical models.",Experiment/Discussion
"Other work has made extensive use of decomposition approaches for efficiently solving LP relaxations for graphical models (e.g., Sontag et al. (2008)).",Experiment/Discussion
"Methods that incorporate combinatorial solvers within loopy belief propagation (LBP) (Duchi et al., 2007; Smith and Eisner, 2008) are also closely related to our approach.",Experiment/Discussion
"Unlike LBP, our method has strong theoretical guarantees, such as guaranteed convergence and the possibility of a certificate of optimality.",Experiment/Discussion
"Finally, in other recent work, Rush et al. (2010) describe dual decomposition approaches for other NLP problems.",Experiment/Discussion
"This section describes a particular class of models, sibling models; the next section describes a dualdecomposition algorithm for decoding these models.",Experiment/Discussion
Consider the dependency parsing problem for a sentence with n words.,Experiment/Discussion
"We define the index set for dependency parsing to be Z = {(i, j) : i E {0 ... n}, j E {1... n}, i =� j}.",Experiment/Discussion
"A dependency parse is a vector y = {y(i, j) : (i, j) E Z}, where y(i, j) = 1 if a dependency with head word i and modifier j is in the parse, 0 otherwise.",Experiment/Discussion
We use i = 0 for the root symbol.,Experiment/Discussion
"We define Y to be the set of all well-formed non-projective dependency parses (i.e., the set of directed spanning trees rooted at node 0).",Experiment/Discussion
"Given a function f : Y H R that assigns scores to parse trees, the optimal parse is A particularly simple definition of f(y) is f(y) = E(i,j)E-T y(i, j)θ(i, j) where θ(i, j) is the score for dependency (i, j).",Experiment/Discussion
Models with this form are often referred to as arc-factored models.,Experiment/Discussion
"In this case the optimal parse tree y* can be found efficiently using MST algorithms (McDonald et al., 2005).",Experiment/Discussion
"This paper describes algorithms that compute y* for more complex definitions of f(y); in this section, we focus on algorithms for models that capture interactions between sibling dependencies.",Experiment/Discussion
"To this end, we will find it convenient to define the following notation.",Experiment/Discussion
"Given a vector y, define Hence y|i specifies the set of modifiers to word i; note that the vectors y|i for i = 0 ... n form a partition of the full set of variables.",Experiment/Discussion
"We then assume that f(y) takes the form Thus f(y) decomposes into a sum of terms, where each fi considers modifiers to the i’th word alone.",Experiment/Discussion
"In the general case, finding y* = argmaxyEY f(y) under this definition of f(y) is an NP-hard problem.",Experiment/Discussion
"However for certain definitions of fi, it is possible to efficiently compute argmaxy|i∈Zi fi(y|i) for any value of i, typically using dynamic programming.",Experiment/Discussion
"(Here we use Zi to refer to the set of all possible values for y|i: specifically, Z0 = {0,1}n and for i =� 0, Zi = {0,1}n−1.)",Experiment/Discussion
In these cases we can efficiently compute where Z = {z : z|i E Zi for i = 0 ... n} by simply computing z∗|i = argmaxz|i∈Zi fi(z|i) for i = 0 ... n. Eq.,Experiment/Discussion
3 can be considered to be an approximation to Eq.,Experiment/Discussion
"1, where we have replaced Y with Z.",Experiment/Discussion
We will make direct use of this approximation in the dual decomposition parsing algorithm.,Experiment/Discussion
"Note that Y C Z, and in all but trivial cases, Y is a strict subset of Z.",Experiment/Discussion
"For example, a structure z E Z could have z(i, j) = z(j, i) = 1 for some (i, j); it could contain longer cycles; or it could contain words that do not modify exactly one head.",Experiment/Discussion
"Nevertheless, with suitably powerful functions fi—for example functions based on discriminative models—z∗ may be a good approximation to y∗.",Experiment/Discussion
Later we will see that dual decomposition can effectively use MST inference to rule out ill-formed structures.,Experiment/Discussion
We now give the main assumption underlying sibling models: Assumption 1(Sibling Decompositions) A model f(y) satisfies the sibling-decomposition assumption if: 1) f(y) = Eni=0 fi(y|i) for some set offunctions f0 ... fn.,Experiment/Discussion
"2) For any i E {0 ... n}, for any value of the variables u(i, j) E R for j = 1... n, it is possible to compute The second condition includes additional terms involving u(i, j) variables that modify the scores of individual dependencies.",Experiment/Discussion
"These terms are benign for most definitions of fi, in that they do not alter decoding complexity.",Experiment/Discussion
They will be of direct use in the dual decomposition parsing algorithm.,Experiment/Discussion
Example 1: Bigram Sibling Models.,Experiment/Discussion
Recall that y|i is a binary vector specifying which words are modifiers to the head-word i.,Experiment/Discussion
"Define l1 ... lp to be the sequence of left modifiers to word i under y|i, and r1 ... rq to be the set of right modifiers (e.g., consider the case where n = 5, i = 3, and we have y(3,1) = y(3, 5) = 0, and y(3, 2) = y(3, 4) = 1: in this case p = 1, l1 = 2, and q = 1, r1 = 4).",Experiment/Discussion
"In bigram sibling models, we have where l0 = r0 = START is the initial state, and lp+1 = rq+1 = END is the end state.",Experiment/Discussion
The functions gL and gR assign scores to bigram dependencies to the left and right of the head.,Experiment/Discussion
"Under this model calculating argmaxy|i∈Zi (fi (y|i) − Ej u(i,j)y(i, j)) takes O(n2) time using dynamic programming, hence the model satisfies Assumption 1.",Experiment/Discussion
Example 2: Head Automata Head-automata models constitute a second important model type that satisfy the sibling-decomposition assumption (bigram sibling models are a special case of head automata).,Experiment/Discussion
"These models make use of functions gR(i, s, s0, r) where s E S, s0 E S are variables in a set of possible states S, and r is an index of a word in the sentence such that i < r < n. The function gR returns a cost for taking word r as the next dependency, and transitioning from state s to s0.",Experiment/Discussion
A similar function gL is defined for left modifiers.,Experiment/Discussion
"We define to be the joint score for dependencies y|i, and left and right state sequences s0 ... sq and t0 ... tp.",Experiment/Discussion
We specify that s0 = t0 = START and sq = tp = END.,Experiment/Discussion
"In this case we define and it follows that argmaxy|i∈Zi fi(y|i) can be computed in O(n|S|2) time using a variant of the Viterbi algorithm, hence the model satisfies the siblingdecomposition assumption.",Experiment/Discussion
We now describe the dual decomposition parsing algorithm for models that satisfy Assumption 1.,Experiment/Discussion
Consider the following generalization of the decoding problem from Eq.,Experiment/Discussion
"1, where f(y) = Ei fi(y|i), Although the maximization w.r.t. z is taken over the set i, the constraints in Eq.",Experiment/Discussion
"5 ensure that z = y for some y E Y, and hence that z E Y.",Experiment/Discussion
"Without the z(i, j) = y(i, j) constraints, the objective would decompose into the separate maximizations z∗ = argmaxz∈Z f(z), and y∗ = argmaxy∈Y h(y), which can be easily solved using dynamic programming and MST, respectively.",Experiment/Discussion
"Thus, it is these constraints that complicate the optimization.",Experiment/Discussion
"Our approach gets around this difficulty by introducing new variables, u(i, j), that serve to enforce agreement between the y(i, j) and z(i, j) variables.",Experiment/Discussion
"In the next section we will show that these u(i, j) variables are actually Lagrange multipliers for the z(i, j) = y(i, j) constraints.",Experiment/Discussion
Our parsing algorithm is shown in Figure 1.,Experiment/Discussion
"At each iteration k, the algorithm finds y(k) E Y using an MST algorithm, and z(k) E i through separate decoding of the (n + 1) sibling models.",Experiment/Discussion
"The u(k) variables are updated if y(k)(i, j) =� z(k)(i, j) 1This is equivalent to Eq.",Experiment/Discussion
"1 when γ(i, j) = 0 for all (i, j).",Experiment/Discussion
"In some cases, however, it is convenient to have a model with non-zero values for the γ variables; see the Appendix.",Experiment/Discussion
"Note that this definition of h(y) allows argmaxy∈Y h(y) to be calculated efficiently, using MST inference. for some (i, j); these updates modify the objective functions for the two decoding steps, and intuitively encourage the y(k) and z(k) variables to be equal.",Experiment/Discussion
Recall that the main difficulty in solving Eq.,Experiment/Discussion
4 was the z = y constraints.,Experiment/Discussion
"We deal with these constraints using Lagrangian relaxation (Lemar´echal, 2001).",Experiment/Discussion
"We first introduce Lagrange multipliers u = {u(i, j) : (i, j) E Z}, and define the Lagrangian This follows because if y = z, the right term in Eq.",Experiment/Discussion
6 is zero for any value of u.,Experiment/Discussion
"The dual objective L(u) is obtained by omitting the y = z constraint: i,j Since L(u) maximizes over a larger space (y may not equal z), we have that L∗ G L(u) (compare this to Eq.",Experiment/Discussion
7).,Experiment/Discussion
"The dual problem, which our algorithm optimizes, is to obtain the tightest such upper bound, The dual objective L(u) is convex, but not differentiable.",Experiment/Discussion
"However, we can use a subgradient method to derive an algorithm that is similar to gradient descent, and which minimizes L(u).",Experiment/Discussion
"A subgradient of a convex function L(u) at u is a vector du such that for all v E R|I|, L(v) > L(u) + du · (v − u).",Experiment/Discussion
"By standard results, argmaxy∈Y h(y) + Ei,j u(k)(i, j)y(i, j).",Experiment/Discussion
"Subgradient optimization methods are iterative algorithms with updates that are similar to gradient descent: we omit the details, except to note that when the LP relaxation is not tight, the optimal primal solution to the LP relaxation could be recovered by averaging methods (Nedi´c and Ozdaglar, 2009). where αk is a step size.",Experiment/Discussion
It is easily verified that the algorithm in Figure 1 uses precisely these updates.,Experiment/Discussion
"With an appropriate choice of the step sizes αk, the subgradient method can be shown to solve the dual problem, i.e.",Experiment/Discussion
"See Korte and Vygen (2008), page 120, for details.",Experiment/Discussion
"As mentioned before, the dual provides an upper bound on the optimum of the primal problem (Eq.",Experiment/Discussion
"4), However, we do not necessarily have strong duality—i.e., equality in the above equation— because the sets i and Y are discrete sets.",Experiment/Discussion
"That said, for some functions h(y) and f(z) strong duality does hold, as stated in the following: L(u(k), z(k), y(k)) = L(u(k)), where the last equality is because y(k), z(k) are defined as the respective argmax’s.",Experiment/Discussion
"Thus, the inequality in Eq.",Experiment/Discussion
"9 is tight, and (y(k), z(k)) and u(k) are primal and dual optimal.",Experiment/Discussion
"Although the algorithm is not guaranteed to satisfy y(k) = z(k) for some k, by Theorem 1 if it does reach such a state, then we have the guarantee of an exact solution to Eq.",Experiment/Discussion
"4, with the dual solution u providing a certificate of optimality.",Experiment/Discussion
"We show in the experiments that this occurs very frequently, in spite of the parsing problem being NP-hard.",Experiment/Discussion
It can be shown that Eq.,Experiment/Discussion
8 is the dual of an LP relaxation of the original problem.,Experiment/Discussion
"When the conditions of Theorem 1 are satisfied, it means that the LP relaxation is tight for this instance.",Experiment/Discussion
For brevity,Experiment/Discussion
In this section we extend the approach to consider grandparent relations.,Experiment/Discussion
"In grandparent models each parse tree y is represented as a vector where we have added a second set of duplicate variables, y↑(i, j) for all (i, j) E Z.",Experiment/Discussion
"The set of all valid parse trees is then defined as So as before y|i contains variables y(i, j) which indicate which words modify the i’th word.",Experiment/Discussion
"In addition, y|i includes y↑(k, i) variables that indicate the word that word i itself modifies.",Experiment/Discussion
"The set of all possible values of y|i is now Hence the y(i, j) variables can take any values, but only one of the y↑(k, i) variables can be equal to 1 (as only one word can be a parent of word i).",Experiment/Discussion
"As before, we define i = {y : y|i E ii for i = 0 ... n}.",Experiment/Discussion
"We introduce the following assumption: Again, it follows that we can approxiresulting vector z∗ may be deficient in two respects.",Experiment/Discussion
"First, the variables z∗(i, j) may not form a wellformed directed spanning tree.",Experiment/Discussion
"Second, we may have z∗↑(i, j) =� z∗(i, j) for some values of (i, j).",Experiment/Discussion
Example 3: Grandparent/Sibling Models An important class of models that satisfy Assumption 2 are defined as follows.,Experiment/Discussion
"Again, for a vector y|i define l1 ... lp to be the sequence of left modifiers to word i under y|i, and r1 ... rq to be the set of right modifiers.",Experiment/Discussion
"Define k∗ to the value for k such that y↑(k, i) = 1.",Experiment/Discussion
"Then the model is defined as follows: This is very similar to the bigram-sibling model, but with the modification that the gL and gR functions depend in addition on the value for k∗.",Experiment/Discussion
"This allows these functions to model grandparent dependencies such as (k∗, i, lj) and sibling dependencies such as (i, lj−1, lj).",Experiment/Discussion
"Finding z∗|i under the definition can be accomplished in O(n3) time, by decoding the model using dynamic programming separately for each of the O(n) possible values of k∗, and picking the value for k∗ that gives the maximum value under these decodings.",Experiment/Discussion
A dual-decomposition algorithm for models that satisfy the GSD assumption is shown in Figure 2.,Experiment/Discussion
"The algorithm can be justified as an instance of Lagrangian relaxation applied to the problem The algorithm employs two sets of Lagrange multipliers, u(i, j) and v(i, j), corresponding to constraints in Eqs.",Experiment/Discussion
11 and 12.,Experiment/Discussion
"As in Theorem 1, if at any point in the algorithm z(k) = y(k), then (z(k), y(k)) is an exact solution to the problem in Eq.",Experiment/Discussion
10.,Experiment/Discussion
"In our experiments we make use of discriminative linear models, where for an input sentence x, the score for a parse y is f(y) = w ' φ(x, y) where w E Rd is a parameter vector, and φ(x, y) E Rd is a feature-vector representing parse tree y in conjunction with sentence x.",Experiment/Discussion
"We will assume that the features decompose in the same way as the siblingdecomposable or grandparent/sibling-decomposable models, that is φ(x, y) = Pni=0 φ(x, y|i) for some feature vector definition φ(x, y|i).",Experiment/Discussion
"In the bigram sibling models in our experiments, we assume that where as before l1 ... lp and r1 ... rq are left and right modifiers under y|i, and where φL and φR are feature vector definitions.",Experiment/Discussion
"In the grandparent models in our experiments, we use a similar definition with feature vectors φL(x, i, k∗, lk−1, lk) and φR(x, i, k∗, rk−1, rk), where k∗ is the parent for word i under y|i.",Experiment/Discussion
"We train the model using the averaged perceptron for structured problems (Collins, 2002).",Experiment/Discussion
"Given the i’th example in the training set, (x(i), y(i)), the perceptron updates are as follows: The first step involves inference over the set Z, rather than Y as would be standard in the perceptron.",Experiment/Discussion
"Thus, decoding during training can be achieved by dynamic programming over head automata alone, which is very efficient.",Experiment/Discussion
"Our training approach is closely related to local training methods (Punyakanok et al., 2005).",Experiment/Discussion
"We have found this method to be effective, very likely because Z is a superset of Y.",Experiment/Discussion
"Our training algorithm is also related to recent work on training using outer bounds (see, e.g., (Taskar et al., 2003; Finley and Joachims, 2008; Kulesza and Pereira, 2008; Martins et al., 2009)).",Experiment/Discussion
"Note, however, that the LP relaxation optimized by dual decomposition is significantly tighter than Z.",Experiment/Discussion
"Thus, an alternative approach would be to use the dual decomposition algorithm for inference during training.",Experiment/Discussion
We report results on a number of data sets.,Experiment/Discussion
"For comparison to Martins et al. (2009), we perform experiments for Danish, Dutch, Portuguese, Slovene, Swedish and Turkish data from the CoNLL-X shared task (Buchholz and Marsi, 2006), and English data from the CoNLL-2008 shared task (Surdeanu et al., 2008).",Experiment/Discussion
"We use the official training/test splits for these data sets, and the same evaluation methodology as Martins et al. (2009).",Experiment/Discussion
"For comparison to Smith and Eisner (2008), we also report results on Danish and Dutch using their alternate training/test split.",Experiment/Discussion
"Finally, we report results on the English WSJ treebank, and the Prague treebank.",Experiment/Discussion
We use feature sets that are very similar to those described in Carreras (2007).,Experiment/Discussion
"We use marginalbased pruning, using marginals calculated from an arc-factored spanning tree model using the matrixtree theorem (McDonald and Satta, 2007; Smith and Smith, 2007; Koo et al., 2007).",Experiment/Discussion
"In all of our experiments we set the value K, the maximum number of iterations of dual decomposition in Figures 1 and 2, to be 5,000.",Experiment/Discussion
"If the algorithm does not terminate—i.e., it does not return (y(k), z(k)) within 5,000 iterations—we simply take the parse y(k) with the maximum value of f(y(k)) as the output from the algorithm.",Experiment/Discussion
"At first sight 5,000 might appear to be a large number, but decoding is still fast—see Sections 7.3 and 7.4 for discussion.2 The strategy for choosing step sizes αk is described in Appendix A, along with other details.",Experiment/Discussion
"We first discuss performance in terms of accuracy, success in recovering an exact solution, and parsing speed.",Experiment/Discussion
We then describe additional experiments examining various aspects of the algorithm.,Experiment/Discussion
"Table 1 shows results for previous work on the various data sets, and results for an arc-factored model with pure MST decoding with our features.",Experiment/Discussion
(We use the acronym UAS (unlabeled attachment score) for dependency accuracy.),Experiment/Discussion
We also show results for the bigram-sibling and grandparent/sibling (G+S) models under dual decomposition.,Experiment/Discussion
"Both the bigramsibling and G+S models show large improvements over the arc-factored approach; they also compare favorably to previous work—for example the G+S model gives better results than all results reported in the CoNLL-X shared task, on all languages.",Experiment/Discussion
Note that we use different feature sets from both Martins et al. (2009) and Smith and Eisner (2008).,Experiment/Discussion
"Next, we consider how often our algorithms return an exact solution to the original optimization problem, with a certificate—i.e., how often the algorithms in Figures 1 and 2 terminate with y(k) = z(k) for some value of k < 5000 (and are thus optimal, by Theorem 1).",Experiment/Discussion
The CertS and CertG columns in Table 1 give the results for the sibling and G+S models respectively.,Experiment/Discussion
"For all but one setting3 over 95% of the test sentences are decoded exactly, with 99% exactness in many cases.",Experiment/Discussion
"For comparison, we also ran both the singlecommodity flow and multiple-commodity flow LP relaxations of Martins et al. (2009) with our models and features.",Experiment/Discussion
We measure how often these relaxations terminate with an exact solution.,Experiment/Discussion
"The results in Table 2 show that our method gives exact solutions more often than both of these relaxations.4 In computing the accuracy figures for Martins et al. only need to be computed once, thus saving computation.",Experiment/Discussion
"(2009), we project fractional solutions to a wellformed spanning tree, as described in that paper.",Experiment/Discussion
"Finally, to better compare the tightness of our LP relaxation to that of earlier work, we consider randomly-generated instances.",Experiment/Discussion
Table 2 gives results for our model and the LP relaxations of Martins et al. (2009) with randomly generated scores on automata transitions.,Experiment/Discussion
We again recover exact solutions more often than the Martins et al. relaxations.,Experiment/Discussion
"Note that with random parameters the percentage of exact solutions is significantly lower, suggesting that the exactness of decoding of the trained models is a special case.",Experiment/Discussion
We speculate that this is due to the high performance of approximate decoding with i in place of Y under the trained models for fi; the training algorithm described in section 6 may have the tendency to make the LP relaxation tight.,Experiment/Discussion
"% of Head Automata Recomputed the Martins et al. (2009) method, presumably because it leverages the underlying structure of the problem, rather than using a generic solver.",Experiment/Discussion
Here we describe an important optimization in the dual decomposition algorithms.,Experiment/Discussion
Consider the algorithm in Figure 1.,Experiment/Discussion
At each iteration we must find gram.,Experiment/Discussion
"DD-5000/DD-250: Dual decomposition with nonprojective head automata, with K = 5000/250.",Experiment/Discussion
"Upper results are for the sibling model, lower results are G+S.",Experiment/Discussion
"Columns give scores for UAS accuracy, percentage of solutions which are integral, and solution speed in seconds per sentence.",Experiment/Discussion
These results are for Section 22 of the PTB.,Experiment/Discussion
The last column is the percentage of integral solutions on a random problem of length 10 words.,Experiment/Discussion
"The (I)LP experiments were carried out using Gurobi, a high-performance commercial-grade solver. for i = 0 ... n. However, if for some i, u(k)(i, j) = u(k−1)(i, j) for all j, then z(k) |�= z(k−1) |� .",Experiment/Discussion
"In lazy decoding we immediately set z(k) |� if u(k)(i, j) = u(k−1)(i, j) for all j; this check takes O(n) time, and saves us from decoding with the i’th automaton.",Experiment/Discussion
"In practice, the updates to u are very sparse, and this condition occurs very often in practice.",Experiment/Discussion
Figure 3 demonstrates the utility of this method for both sibling automata and G+S automata.,Experiment/Discussion
We also ran experiments varying the value of K— the maximum number of iterations—in the dual decomposition algorithms.,Experiment/Discussion
"As before, if we do not find y(k) = z(k) for some value of k G K, we choose the y(k) with optimal value for f(y(k)) as the final solution.",Experiment/Discussion
"Figure 4 shows three graphs: 1) the accuracy of the parser on PTB validation data versus the value for K; 2) the percentage of examples where y(k) = z(k) at some point during the algorithm, hence the algorithm returns a certificate of optimality; 3) the percentage of examples where the solution for the English (PTB) and Czech (PDT) validation sets.",Experiment/Discussion
Sib/G+S: as in Table 1.,Experiment/Discussion
"P-Sib/P-G+S: Projective versions of Sib/G+S, where the MST component has been replaced with the Eisner (2000) first-order projective parser. returned is the same as the solution for the algorithm with K = 5000 (our original setting).",Experiment/Discussion
It can be seen for K as small as 250 we get very similar accuracy to K = 5000 (see Table 2).,Experiment/Discussion
"In fact, for this setting the algorithm returns the same solution as for K = 5000 on 99.59% of the examples.",Experiment/Discussion
However only 89.29% of these solutions are produced with a certificate of optimality (y(k) = z(k)).,Experiment/Discussion
"We ran experiments measuring the quality of z∗ = argmaxz∈Z f(z), where f(z) is given by the perceptron-trained bigram-sibling model.",Experiment/Discussion
"Because z∗ may not be a well-formed tree with n dependencies, we report precision and recall rather than conventional dependency accuracy.",Experiment/Discussion
"Results on the PTB validation set were 91.11%/88.95% precision/recall, which is accurate considering the unconstrained nature of the predictions.",Experiment/Discussion
Thus the z∗ approximation is clearly a good one; we suspect that this is one reason for the good convergence results for the method.,Experiment/Discussion
"It is simple to adapt the dual-decomposition algorithms in figures 1 and 2 to give projective dependency structures: the set Y is redefined to be the set of all projective structures, with the arg max over Y being calculated using a projective first-order parser (Eisner, 2000).",Experiment/Discussion
Table 3 shows results for projective and non-projective parsing using the dual decomposition approach.,Experiment/Discussion
"For Czech data, where nonprojective structures are common, non-projective decoding has clear benefits.",Experiment/Discussion
"In contrast, there is little difference in accuracy between projective and nonprojective decoding on English.",Experiment/Discussion
"We have described dual decomposition algorithms for non-projective parsing, which leverage existing dynamic programming and MST algorithms.",Results/Conclusion
There are a number of possible areas for future work.,Results/Conclusion
"As described in section 7.7, the algorithms can be easily modified to consider projective structures by replacing Y with the set of projective trees, and then using first-order dependency parsing algorithms in place of MST decoding.",Results/Conclusion
"This method could be used to derive parsing algorithms that include higher-order features, as an alternative to specialized dynamic programming algorithms.",Results/Conclusion
"Eisner (2000) describes extensions of head automata to include word senses; we have not discussed this issue in the current paper, but it is simple to develop dual decomposition algorithms for this case, using similar methods to those used for the grandparent models.",Results/Conclusion
"The general approach should be applicable to other lexicalized syntactic formalisms, and potentially also to decoding in syntax-driven translation.",Results/Conclusion
"In addition, our dual decomposition approach is well-suited to parallelization.",Results/Conclusion
"For example, each of the head-automata could be optimized independently in a multi-core or GPU architecture.",Results/Conclusion
"Finally, our approach could be used with other structured learning algorithms, e.g.",Results/Conclusion
Meshi et al. (2010).,Results/Conclusion
"This appendix describes details of the algorithm, specifically choice of the step sizes αk, and use of the -y(i, j) parameters.",Results/Conclusion
We have found the following method to be effective.,Results/Conclusion
"First, define S = f(z(1)) − f(y(1)), where (z(1), y(1)) is the output of the algorithm on the first iteration (note that we always have S > 0 since f(z(1)) = L(u(1))).",Results/Conclusion
"Then define αk = S/(1 + 77k), where 77k is the number of times that L(u(k�)) > L(u(k'−1)) for k' < k. Hence the learning rate drops at a rate of 1/(1 + t), where t is the number of times that the dual increases from one iteration to the next.",Results/Conclusion
"A.2 Use of the -y(i, j) Parameters The parsing algorithms both consider a generalized problem that includes -y(i, j) parameters.",Results/Conclusion
We now describe how these can be useful.,Results/Conclusion
"Recall that the optimization problem is to solve argmaxzEZ,yEY f(z) + h(y), subject to a set of agreement constraints.",Results/Conclusion
"In our models, f(z) can be written as f'(z) + Eij α(i, j)z(i, j) where f'(z) includes only terms depending on higherorder (non arc-factored features), and α(i, j) are weights that consider the dependency between i and j alone.",Results/Conclusion
"For any value of 0 < Q < 1, the problem argmaxzEZ,yEY f2(z) + h2(y) is equivalent to the original problem, if f2(z) = f'(z) + (1 − Q) &,j α(i,j)z(i,j) and h2(y) = Q Ei,j α(i, j)y(i, j).",Results/Conclusion
"We have simply shifted the α(i, j) weights from one model to the other.",Results/Conclusion
"While the optimization problem remains the same, the algorithms in Figure 1 and 2 will converge at different rates depending on the value for Q.",Results/Conclusion
"In our experiments we set Q = 0.001, which puts almost all the weight in the head-automata models, but allows weights on spanning tree edges to break ties in MST inference in a sensible way.",Results/Conclusion
"We suspect this is important in early iterations of the algorithm, when many values for u(i, j) or v(i, j) will be zero, and where with Q = 0 many spanning tree solutions y(k) would be essentially random, leading to very noisy updates to the u(i, j) and v(i, j) values.",Results/Conclusion
We have not tested other values for Q.,Results/Conclusion
