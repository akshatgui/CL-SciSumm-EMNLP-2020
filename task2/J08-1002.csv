col1,col2
"Probabilistic modeling of lexicalized grammars is difficult because these grammars exploit complicated data structures, such as typed feature structures.",{}
This prevents us from applying common methods of probabilistic modeling in which a complete structure is divided into substructures under the assumption of statistical independence among sub-structures.,{}
"For example, part-of-speech tagging of a sentence is decomposed into tagging of each word, and CFG parsing is split into applications of CFG rules.",{}
"These methods have relied on the structure of the target problem, namely lattices or trees, and cannot be applied to graph structures including typed feature structures.",{}
This article proposes the feature forest model as a solution to the problem of probabilistic modeling of complex data structures including typed feature structures.,{}
The feature forest model provides a method for probabilistic modeling without the independence assumption when probabilistic events are represented with feature forests.,{}
Feature forests are generic data structures that represent ambiguous trees in a packed forest structure.,{}
Feature forest models are maximum entropy models defined over feature forests.,{}
A dynamic programming algorithm is proposed for maximum entropy estimation without unpacking feature forests.,{}
Thus probabilistic modeling of any data structures is possible when they are represented by feature forests.,{}
This article also describes methods for representing HPSG syntactic structures and predicate–argument structures with feature forests.,{}
"Hence, we describe a complete strategy for developing probabilistic models for HPSG parsing.",{}
"The effectiveness of the proposed methods is empirically evaluated through parsing experiments on the Penn Treebank, and the promise of applicability to parsing of real-world sentences is discussed.",{}
"Probabilistic modeling of lexicalized grammars is difficult because these grammars exploit complicated data structures, such as typed feature structures.","{'title': '', 'number': '1'}"
This prevents us from applying common methods of probabilistic modeling in which a complete structure is divided into substructures under the assumption of statistical independence among sub-structures.,"{'title': '', 'number': '1'}"
"For example, part-of-speech tagging of a sentence is decomposed into tagging of each word, and CFG parsing is split into applications of CFG rules.","{'title': '', 'number': '1'}"
"These methods have relied on the structure of the target problem, namely lattices or trees, and cannot be applied to graph structures including typed feature structures.","{'title': '', 'number': '1'}"
This article proposes the feature forest model as a solution to the problem of probabilistic modeling of complex data structures including typed feature structures.,"{'title': '', 'number': '1'}"
The feature forest model provides a method for probabilistic modeling without the independence assumption when probabilistic events are represented with feature forests.,"{'title': '', 'number': '1'}"
Feature forests are generic data structures that represent ambiguous trees in a packed forest structure.,"{'title': '', 'number': '1'}"
Feature forest models are maximum entropy models defined over feature forests.,"{'title': '', 'number': '1'}"
A dynamic programming algorithm is proposed for maximum entropy estimation without unpacking feature forests.,"{'title': '', 'number': '1'}"
Thus probabilistic modeling of any data structures is possible when they are represented by feature forests.,"{'title': '', 'number': '1'}"
This article also describes methods for representing HPSG syntactic structures and predicate–argument structures with feature forests.,"{'title': '', 'number': '1'}"
"Hence, we describe a complete strategy for developing probabilistic models for HPSG parsing.","{'title': '', 'number': '1'}"
"The effectiveness of the proposed methods is empirically evaluated through parsing experiments on the Penn Treebank, and the promise of applicability to parsing of real-world sentences is discussed.","{'title': '', 'number': '1'}"
Following the successful development of wide-coverage lexicalized grammars (Riezler et al. 2000; Hockenmaier and Steedman 2002; Burke et al.,"{'title': '1.', 'number': '2'}"
"2004; Miyao, Ninomiya, and Tsujii 2005), statistical modeling of these grammars is attracting considerable attention.","{'title': '1.', 'number': '2'}"
"This is because natural language processing applications usually require disambiguated or ranked parse results, and statistical modeling of syntactic/semantic preference is one of the most promising methods for disambiguation.","{'title': '1.', 'number': '2'}"
The focus of this article is the problem of probabilistic modeling of wide-coverage HPSG parsing.,"{'title': '1.', 'number': '2'}"
"Although previous studies have proposed maximum entropy models (Berger, Della Pietra, and Della Pietra 1996) of HPSG-style parse trees (Oepen, Toutanova, et al. 2002b; Toutanova and Manning 2002; Baldridge and Osborne 2003; Malouf and van Noord 2004), the straightforward application of maximum entropy models to wide-coverage HPSG parsing is infeasible because estimation of maximum entropy models is computationally expensive, especially when targeting wide-coverage parsing.","{'title': '1.', 'number': '2'}"
"In general, complete structures, such as transition sequences in Markov models and parse trees, have an exponential number of ambiguities.","{'title': '1.', 'number': '2'}"
This causes an exponential explosion when estimating the parameters of maximum entropy models.,"{'title': '1.', 'number': '2'}"
We therefore require solutions to make model estimation tractable.,"{'title': '1.', 'number': '2'}"
"This article first proposes feature forest models, which are a general solution to the problem of maximum entropy modeling of tree structures (Miyao and Tsujii 2002).","{'title': '1.', 'number': '2'}"
"Our algorithm avoids exponential explosion by representing probabilistic events with feature forests, which are packed representations of tree structures.","{'title': '1.', 'number': '2'}"
"When complete structures are represented with feature forests of a tractable size, the parameters of maximum entropy models are efficiently estimated without unpacking the feature forests.","{'title': '1.', 'number': '2'}"
This is due to dynamic programming similar to the algorithm for computing inside/outside probabilities in PCFG parsing.,"{'title': '1.', 'number': '2'}"
The latter half of this article (Section 4) is on the application of feature forest models to disambiguation in wide-coverage HPSG parsing.,"{'title': '1.', 'number': '2'}"
"We describe methods for representing HPSG parse trees and predicate–argument structures using feature forests (Miyao, Ninomiya, and Tsujii 2003; Miyao and Tsujii 2003, 2005).","{'title': '1.', 'number': '2'}"
"Together with the parameter estimation algorithm for feature forest models, these methods constitute a complete procedure for the probabilistic modeling of wide-coverage HPSG parsing.","{'title': '1.', 'number': '2'}"
"The methods we propose here were applied to an English HPSG parser, Enju (Tsujii Laboratory 2004).","{'title': '1.', 'number': '2'}"
We report on an extensive evaluation of the parser through parsing experiments on the Wall Street Journal portion of the Penn Treebank (Marcus et al. 1994).,"{'title': '1.', 'number': '2'}"
"The content of this article is an extended version of our earlier work reported in Miyao and Tsujii (2002, 2003, 2005) and Miyao, Ninomiya, and Tsujii (2003).","{'title': '1.', 'number': '2'}"
"The major contribution of this article is a strict mathematical definition of the feature forest model and the parameter estimation algorithm, which are substantially refined and extended from Miyao and Tsujii (2002).","{'title': '1.', 'number': '2'}"
Another contribution is that this article thoroughly discusses the relationships between the feature forest model and its application to HPSG parsing.,"{'title': '1.', 'number': '2'}"
We also provide an extensive empirical evaluation of the resulting HPSG parsing approach using real-world text.,"{'title': '1.', 'number': '2'}"
Section 2 discusses a problem of conventional probabilistic models for lexicalized grammars.,"{'title': '1.', 'number': '2'}"
Section 3 proposes feature forest models for solving this problem.,"{'title': '1.', 'number': '2'}"
Section 4 describes the application of feature forest models to probabilistic HPSG parsing.,"{'title': '1.', 'number': '2'}"
"Section 5 presents an empirical evaluation of probabilistic HPSG parsing, and Section 6 introduces research related to our proposals.","{'title': '1.', 'number': '2'}"
Section 7 concludes.,"{'title': '1.', 'number': '2'}"
"Maximum entropy models (Berger, Della Pietra, and Della Pietra 1996) are now becoming the de facto standard approach for disambiguation models for lexicalized or feature structure grammars (Johnson et al. 1999; Riezler et al.","{'title': '2.', 'number': '3'}"
"2000, 2002; Geman and Johnson 2002; Clark and Curran 2003, 2004b; Kaplan et al. 2004; Carroll and Oepen 2005).","{'title': '2.', 'number': '3'}"
"Previous studies on probabilistic models for HPSG (Oepen, Toutanova et al. 2002; Toutanova and Manning 2002; Baldridge and Osborne 2003; Malouf and van Noord 2004) have also adopted log-linear models.","{'title': '2.', 'number': '3'}"
This is because these grammar formalisms exploit feature structures to represent linguistic constraints.,"{'title': '2.', 'number': '3'}"
"Such constraints are known to introduce inconsistencies in probabilistic models estimated using simple relative frequency, as discussed in Abney (1997).","{'title': '2.', 'number': '3'}"
The maximum entropy model is a reasonable choice for credible probabilistic models.,"{'title': '2.', 'number': '3'}"
"It also allows various overlapping features to be incorporated, and we can expect higher accuracy in disambiguation.","{'title': '2.', 'number': '3'}"
A maximum entropy model gives a probabilistic distribution that maximizes the likelihood of training data under given feature functions.,"{'title': '2.', 'number': '3'}"
"Given training data E = {(x, y)}, a maximum entropy model gives conditional probability p(y|x) as follows.","{'title': '2.', 'number': '3'}"
Definition 1(Maximum entropy model) A maximum entropy model is defined as the solution of the following optimization problem.,"{'title': '2.', 'number': '3'}"
"In this definition, ˜p(x, y) is the relative frequency of (x, y) in the training data. fi is a feature function, which represents a characteristic of probabilistic events by mapping an event into a real value. λi is the model parameter of a corresponding feature function fi, and is determined so as to maximize the likelihood of the training data (i.e., the optimization in this definition).","{'title': '2.', 'number': '3'}"
"Y(x) is a set of y for given x; for example, in parsing, x is a given sentence and Y(x) is a parse forest for x.","{'title': '2.', 'number': '3'}"
An advantage of maximum entropy models is that feature functions can represent any characteristics of events.,"{'title': '2.', 'number': '3'}"
"That is, independence assumptions are unnecessary for the design of feature functions.","{'title': '2.', 'number': '3'}"
"Hence, this method provides a principled solution for the estimation of consistent probabilistic distributions over feature structure grammars.","{'title': '2.', 'number': '3'}"
The remaining issue is how to estimate parameters.,"{'title': '2.', 'number': '3'}"
"Several numerical algorithms, such as Generalized Iterative Scaling (GIS) (Darroch and Ratcliff 1972), Improved Iterative Scaling (IIS) (Della Pietra, Della Pietra, and Lafferty 1997), and the Limitedmemory Broyden-Fletcher-Goldfarb-Shanno method (L-BFGS) (Nocedal and Wright 1999), have been proposed for parameter estimation.","{'title': '2.', 'number': '3'}"
"Although the algorithm proposed in the present article is applicable to all of the above algorithms, we used L-BFGS for experiments.","{'title': '2.', 'number': '3'}"
"However, a computational problem arises in these parameter estimation algorithms.","{'title': '2.', 'number': '3'}"
"The size of Y(x) (i.e., the number of parse trees for a sentence) is generally very large.","{'title': '2.', 'number': '3'}"
"This is because local ambiguities in parse trees potentially cause exponential growth in the number of structures assigned to sub-sequences of words, resulting in billions of structures for whole sentences.","{'title': '2.', 'number': '3'}"
"For example, when we apply rewriting rule S → NP VP, and the left NP and the right VP, respectively, have n and m ambiguous subtrees, the result of the rule application generates n × m trees.","{'title': '2.', 'number': '3'}"
This is problematic because the complexity of parameter estimation is proportional to the size of Y(x).,"{'title': '2.', 'number': '3'}"
"The cost of the parameter estimation algorithms is bound by the computation of model expectation, µi, given as (Malouf 2002): As shown in this definition, the computation of model expectation requires the summation over Y(x) for every x in the training data.","{'title': '2.', 'number': '3'}"
"The complexity of the overall estimation algorithm is O( ˜|Y |˜|F||E|), where ˜|Y |and ˜|F |are the average numbers of y and activated features for an event, respectively, and |E |is the number of events.","{'title': '2.', 'number': '3'}"
"When Y(x) grows exponentially, the parameter estimation becomes intractable.","{'title': '2.', 'number': '3'}"
"In PCFGs, the problem of computing probabilities of parse trees is avoided by using a dynamic programming algorithm for computing inside/outside probabilities (Baker 1979).","{'title': '2.', 'number': '3'}"
"With the algorithm, the computation becomes tractable.","{'title': '2.', 'number': '3'}"
We can expect that the same approach would be effective for maximum entropy models as well.,"{'title': '2.', 'number': '3'}"
"This notion yields a novel algorithm for parameter estimation for maximum entropy models, as described in the next section.","{'title': '2.', 'number': '3'}"
Our solution to the problem is a dynamic programming algorithm for computing inside/outside α-products.,"{'title': '3.', 'number': '4'}"
Inside/outside α-products roughly correspond to inside/ outside probabilities in PCFGs.,"{'title': '3.', 'number': '4'}"
"In maximum entropy models, a probability is defined as a normalized product of αfj j(= exp(λjfj)).","{'title': '3.', 'number': '4'}"
"Hence, similar to the algorithm of computing (� ) inside/outside probabilities, we can compute exp j λjfj , which we define as the α-product, for each node in a tree structure.","{'title': '3.', 'number': '4'}"
"If we can compute α-products at a tractable cost, the model expectation µi is also computed at a tractable cost.","{'title': '3.', 'number': '4'}"
"We first define the notion of a feature forest, a packed representation of a set of an exponential number of tree structures.","{'title': '3.', 'number': '4'}"
Feature forests correspond to packed charts in CFG parsing.,"{'title': '3.', 'number': '4'}"
"Because feature forests are generalized representations of forest structures, the notion is not only applicable to syntactic parsing but also to sequence tagging, such as POS tagging and named entity recognition (which will be discussed in Section 6).","{'title': '3.', 'number': '4'}"
We then define inside/outside α-products that represent the α-products of partial structures of a feature forest.,"{'title': '3.', 'number': '4'}"
"Inside α-products correspond to inside probabilities in PCFG, and represent the summation of α-products of the daughter sub-trees.","{'title': '3.', 'number': '4'}"
"Outside α-products correspond to outside probabilities in PCFG, and represent the summation of α-products in the upper part of the feature forest.","{'title': '3.', 'number': '4'}"
Both can be computed incrementally by a dynamic programming algorithm similar to the algorithm for computing inside/outside probabilities in PCFG.,"{'title': '3.', 'number': '4'}"
"Given inside/outside o -products of all nodes in a feature forest, the model expectation µi is easily computed by multiplying them for each node.","{'title': '3.', 'number': '4'}"
"To describe the algorithm, we first define the notion of a feature forest, the generalized representation of features in a packed forest structure.","{'title': '3.', 'number': '4'}"
"Feature forests are used for enumerating possible structures of events, that is, they correspond to Y(x) in Equation 1.","{'title': '3.', 'number': '4'}"
"A feature forest Φ is a tuple (C, D, r, -y, b), where: We denote a feature forest for x as Φ(x).","{'title': '3.', 'number': '4'}"
"For example, Φ(x) can represent the set of all possible tag sequences of a given sentence x, or the set of all parse trees of x.","{'title': '3.', 'number': '4'}"
"A feature forest is an acyclic graph, and unpacked structures extracted from a feature forest are trees.","{'title': '3.', 'number': '4'}"
We also assume that terminal nodes of feature forests are conjunctive nodes.,"{'title': '3.', 'number': '4'}"
"That is, disjunctive nodes must have daughters (i.e., -y(d) =� 0 for all d E D).","{'title': '3.', 'number': '4'}"
A feature forest represents a set of trees of conjunctive nodes in a packed structure.,"{'title': '3.', 'number': '4'}"
Conjunctive nodes correspond to entities such as states in Markov chains and nodes in CFG trees.,"{'title': '3.', 'number': '4'}"
Feature functions are assigned to conjunctive nodes and express their characteristics.,"{'title': '3.', 'number': '4'}"
Disjunctive nodes are for enumerating alternative choices.,"{'title': '3.', 'number': '4'}"
Conjunctive/ disjunctive daughter functions represent immediate relations of conjunctive and disjunctive nodes.,"{'title': '3.', 'number': '4'}"
"By selecting a conjunctive node as a child of each disjunctive node, we can extract a tree consisting of conjunctive nodes from a feature forest.","{'title': '3.', 'number': '4'}"
A feature forest. nodes as its daughters.,"{'title': '3.', 'number': '4'}"
The feature forest in Figure 1 represents a set of 2 x 2 x 2 = 8 unpacked trees shown in Figure 2.,"{'title': '3.', 'number': '4'}"
"For example, by selecting the left-most conjunctive node at each disjunctive node, we extract an unpacked tree (c1, c2, c4, c6).","{'title': '3.', 'number': '4'}"
An unpacked tree is represented as a set of conjunctive nodes.,"{'title': '3.', 'number': '4'}"
"Generally, a feature forest represents an exponential number of trees with a polynomial number of nodes.","{'title': '3.', 'number': '4'}"
"Thus, complete structures, such as tag sequences and parse trees with ambiguities, can be represented in a tractable form.","{'title': '3.', 'number': '4'}"
"Feature functions are defined over conjunctive nodes.1 Definition 3 (Feature function for feature forests) A feature function for a feature forest is: Hence, together with feature functions, a feature forest represents a set of trees of features.","{'title': '3.', 'number': '4'}"
Feature forests may be regarded as a packed chart in CFG parsing.,"{'title': '3.', 'number': '4'}"
"Although feature forests have the same structure as PCFG parse forests, nodes in feature forests do not necessarily correspond to nodes in PCFG parse forests.","{'title': '3.', 'number': '4'}"
"In fact, in Sections 4.2 and 4.3, we will demonstrate that syntactic structures and predicate–argument structures in HPSG can be represented with tractable-size feature forests.","{'title': '3.', 'number': '4'}"
The actual interpretation of a node in a feature forest may thus be ignored in the following discussion.,"{'title': '3.', 'number': '4'}"
Our algorithm is applicable whenever feature forests are of a tractable size.,"{'title': '3.', 'number': '4'}"
The descriptive power of feature forests will be discussed again in Section 6.,"{'title': '3.', 'number': '4'}"
"As mentioned, a feature forest is a packed representation of trees of features.","{'title': '3.', 'number': '4'}"
"We first define model expectations, µi, on a set of unpacked trees, and then show that they can be computed without unpacking feature forests.","{'title': '3.', 'number': '4'}"
"We denote an unpacked tree as a set, c ⊆ C, of conjunctive nodes.","{'title': '3.', 'number': '4'}"
"Our concern is only the set of features associated with each conjunctive node, and the shape of the tree structure is irrelevant to the computation of probabilities of unpacked trees.","{'title': '3.', 'number': '4'}"
"Hence, we do not distinguish an unpacked tree from a set of conjunctive nodes.","{'title': '3.', 'number': '4'}"
"The collection of unpacked trees represented by a feature forest is defined as a multiset of unpacked trees because we allow multiple occurrences of equivalent unpacked trees in a feature forest.2 Given multisets of unpacked trees, A, B, we define the union and the product as follows.","{'title': '3.', 'number': '4'}"
"Intuitively, the first operation is a collection of trees, and the second lists all combinations of trees in A and B.","{'title': '3.', 'number': '4'}"
"It is trivial that they satisfy commutative, associative, and distributive laws.","{'title': '3.', 'number': '4'}"
We denote a set of unpacked trees rooted at node n E C U D as Ω(n).,"{'title': '3.', 'number': '4'}"
Ω(n) is defined recursively.,"{'title': '3.', 'number': '4'}"
"For a terminal node c E C, obviously Ω(c) = {{c}}.","{'title': '3.', 'number': '4'}"
"For an internal conjunctive node c E C, an unpacked tree is a combination of trees, each of which is selected from a disjunctive daughter.","{'title': '3.', 'number': '4'}"
"Hence, a set of all unpacked trees is represented as a product of trees from disjunctive daughters.","{'title': '3.', 'number': '4'}"
"A disjunctive node d E D represents alternatives of packed trees, and obviously a set of its unpacked trees is represented as a union of the daughter trees, that is, Ω(d) = To summarize, a set of unpacked trees is defined formally as follows.","{'title': '3.', 'number': '4'}"
"Given a feature forest Φ = (C, D, r,γ, 6), a set Ω(n) of unpacked trees rooted at node n E C U D is defined recursively as follows.","{'title': '3.', 'number': '4'}"
"Feature forests are directed acyclic graphs and, as such, this definition does not include a loop.","{'title': '3.', 'number': '4'}"
"Hence, Ω(n) is properly defined.","{'title': '3.', 'number': '4'}"
"A set of all unpacked trees is then represented by Ω(r); henceforth, we denote Ω(r) as Ω(Φ), or just Ω when it is not confusing in context.","{'title': '3.', 'number': '4'}"
Figure 3 shows Ω(Φ) of the feature forest in Figure 1.,"{'title': '3.', 'number': '4'}"
"Following Definition 4, the first element of each set is the root node, c1, and the rest are elements of the product of {c2, c3}, {c4, c5}, and {c6, c7}.","{'title': '3.', 'number': '4'}"
Each set in Figure 3 corresponds to a tree in Figure 2.,"{'title': '3.', 'number': '4'}"
"Given this formalization, the feature function for an unpacked tree is defined as follows.","{'title': '3.', 'number': '4'}"
"Definition 5 (Feature function for unpacked tree) The feature function fi for an unpacked tree, c E Ω(Φ) is defined as: Because c E Ω(Φ) corresponds to y of the conventional maximum entropy model, this function substitutes for fi(x,y) in the conventional model.","{'title': '3.', 'number': '4'}"
"Once a feature function for an unpacked tree is given, a model expectation is defined as in the traditional model.","{'title': '3.', 'number': '4'}"
"Definition 6 (Model expectation of feature forests) The model expectation µi for a set of feature forests {Φ(x)} is defined as: It is evident that the naive computation of model expectations requires exponential time complexity because the number of unpacked trees (i.e., |Ω(Φ)|) is exponentially related to the number of nodes in the feature forest Φ.","{'title': '3.', 'number': '4'}"
We therefore need an algorithm for computing model expectations without unpacking a feature forest.,"{'title': '3.', 'number': '4'}"
Figure 3 Unpacked trees represented as sets of conjunctive nodes.,"{'title': '3.', 'number': '4'}"
Inside/outside at node c2 in a feature forest.,"{'title': '3.', 'number': '4'}"
"To efficiently compute model expectations, we incorporate an approach similar to the dynamic programming algorithm for computing inside/outside probabilities in PCFGs.","{'title': '3.', 'number': '4'}"
We first define the notion of inside/outside of a feature forest.,"{'title': '3.', 'number': '4'}"
"Figure 4 illustrates this concept, which is similar to the analogous concept in PCFGs.3 Inside denotes a set of partial trees (sets of conjunctive nodes) derived from node c2.","{'title': '3.', 'number': '4'}"
Outside denotes a set of partial trees that derive node c2.,"{'title': '3.', 'number': '4'}"
"That is, outside trees are partial trees of complements of inside trees.","{'title': '3.', 'number': '4'}"
"We denote a set of inside trees at node n as ι(n), and that of outside trees as o(n).","{'title': '3.', 'number': '4'}"
We define a set ι(n) of inside trees rooted at node n ∈ C ∪ D as a set of unpacked trees rooted at n. We define a set o(n) of outside trees rooted at node n ∈ C ∪ D as follows.,"{'title': '3.', 'number': '4'}"
"In the definition, γ−1 and δ−1 denote mothers of conjunctive and disjunctive nodes, respectively.","{'title': '3.', 'number': '4'}"
"Formally, We can derive that the model expectations of a feature forest are computed as the product of the inside and outside α-products.","{'title': '3.', 'number': '4'}"
"Theorem 1(Model expectation of feature forests) The model expectation µi of a feature forest Φ(x) = (Cx, Dx, rx, γx, δx) is computed as the product of inside and outside α-products as follows: where Z(x) = ϕrx This equation shows a method for efficiently computing model expectations by traversing conjunctive nodes without unpacking the forest, if the inside/outside α-products are given.","{'title': '3.', 'number': '4'}"
The remaining issue is how to efficiently compute inside/outside α-products.,"{'title': '3.', 'number': '4'}"
"Fortunately, inside/outside α-products can be incrementally computed by dynamic programming without unpacking feature forests.","{'title': '3.', 'number': '4'}"
Figure 5 shows the process of computing the inside α-product at a conjunctive node from the inside α-products of its daughter nodes.,"{'title': '3.', 'number': '4'}"
"Because the inside of a conjunctive node is a set of the combinations of all of its descendants, the α-product is computed by multiplying the α-products of the daughter trees.","{'title': '3.', 'number': '4'}"
The following equation is derived.,"{'title': '3.', 'number': '4'}"
The inside of a disjunctive node is the collection of the inside trees of its daughter nodes.,"{'title': '3.', 'number': '4'}"
"Hence, the inside α-product at disjunctive node d ∈ D is computed as follows (Figure 6).","{'title': '3.', 'number': '4'}"
The inside α-product ϕc at a conjunctive node c is computed by the following equation if ϕd is given for all daughter disjunctive nodes d ∈ δ(c).,"{'title': '3.', 'number': '4'}"
The outside of a disjunctive node is equivalent to the outside of its daughter nodes.,"{'title': '3.', 'number': '4'}"
"Hence, the outside α-product of a disjunctive node is propagated to its daughter conjunctive nodes (Figure 7).","{'title': '3.', 'number': '4'}"
The computation of the outside α-product of a disjunctive node is somewhat complicated.,"{'title': '3.', 'number': '4'}"
"As shown in Figure 8, the outside trees of a disjunctive node are all combinations of Incremental computation of outside α-products at conjunctive node c2.","{'title': '3.', 'number': '4'}"
We finally find the following theorem for the computation of outside o -products.,"{'title': '3.', 'number': '4'}"
"Theorem 3 (Outside o -product) The outside o -product *c at conjunctive node c is computed by the following equation if *d is given for all mother disjunctive nodes, that is, all d such that c ∈ -y(d).","{'title': '3.', 'number': '4'}"
"The outside o -product *d at disjunctive node d is computed by the following equation if *c is given for all mother conjunctive nodes, that is, all c such that d ∈ b(c), and yds for all sibling disjunctive nodes d'.","{'title': '3.', 'number': '4'}"
"Note that the order in which nodes are traversed is important for incremental computation, although it is not shown in Figure 9.","{'title': '3.', 'number': '4'}"
"The computation for the daughter nodes and mother nodes must be completed before computing the inside and outside α-products, respectively.","{'title': '3.', 'number': '4'}"
This constraint is easily solved using any topological sort algorithm.,"{'title': '3.', 'number': '4'}"
A topological sort is applied once at the beginning.,"{'title': '3.', 'number': '4'}"
The result of the sorting does not affect the cost and the result of estimation.,"{'title': '3.', 'number': '4'}"
"In our implementation, we assume that conjunctive/disjunctive nodes are already ordered from the root node in input data.","{'title': '3.', 'number': '4'}"
"The complexity of this algorithm is O(( ˜|C |+˜|D|) ˜|F||E|), where ˜|C |and ˜|D |are the average numbers of conjunctive and disjunctive nodes, respectively.","{'title': '3.', 'number': '4'}"
This is tractable when ˜|C |and ˜|D |are of a reasonable size.,"{'title': '3.', 'number': '4'}"
"As noted in this section, the number of nodes in a feature forest is usually polynomial even when that of the unpacked trees is exponential.","{'title': '3.', 'number': '4'}"
Thus we can efficiently compute model expectations with polynomial computational complexity.,"{'title': '3.', 'number': '4'}"
"Following previous studies on probabilistic models for HPSG (Oepen, Toutanova, et al. 2002; Toutanova and Manning 2002; Baldridge and Osborne 2003; Malouf and van Noord 2004), we apply a maximum entropy model to HPSG parse disambiguation.","{'title': '4.', 'number': '5'}"
"The probability, p(t|w), of producing parse result t of a given sentence w is defined as where where p0(t|w) is a reference distribution (usually assumed to be a uniform distribution) and T(w) is a set of parse candidates assigned to w. The feature function fi(t,w) represents the characteristics of t and w, and the corresponding model parameter λi is its weight.","{'title': '4.', 'number': '5'}"
Model parameters that maximize the log-likelihood of the training data are computed using a numerical optimization method (Malouf 2002).,"{'title': '4.', 'number': '5'}"
"Estimation of the model requires a set of pairs (tw, T(w)), where tw is the correct parse for a sentence w. Whereas tw is provided by a treebank, T(w) has to be computed by parsing each w in the treebank.","{'title': '4.', 'number': '5'}"
"Previous studies assumed T(w) could be enumerated; however, this assumption is impractical because the size of T(w) is exponentially related to the length of w. Our solution here is to apply the feature forest model of Section 3 to the probabilistic modeling of HPSG parsing.","{'title': '4.', 'number': '5'}"
Section 4.1 briefly introduces HPSG.,"{'title': '4.', 'number': '5'}"
Section 4.2 and 4.3 describe how to represent HPSG parse trees and predicate–argument structures by feature forests.,"{'title': '4.', 'number': '5'}"
"Together with the parameter estimation algorithm in Section 3, these methods constitute a complete method for probabilistic disambiguation.","{'title': '4.', 'number': '5'}"
We also address a method for accelerating the construction of feature forests for all treebank sentences in Section 4.4.,"{'title': '4.', 'number': '5'}"
The design of feature functions will be given in Section 4.5.,"{'title': '4.', 'number': '5'}"
"HPSG (Pollard and Sag 1994; Sag, Wasow, and Bender 2003) is a syntactic theory that follows the lexicalist framework.","{'title': '4.', 'number': '5'}"
"In HPSG, linguistic entities, such as words and phrases, are denoted by signs, which are represented by typed feature structures (Carpenter 1992).","{'title': '4.', 'number': '5'}"
"Signs are a formal representation of combinations of phonological forms and syntactic/semantic structures, and express which phonological form signifies which syntactic/semantic structure.","{'title': '4.', 'number': '5'}"
Figure 10 shows the lexical sign for loves.,"{'title': '4.', 'number': '5'}"
"The geometry of signs follows Pollard and Sag: HEAD represents the part-of-speech of the head word, MOD denotes modifiee constraints, and SPR, SUBJ, and COMPS describe constraints of a specifier, a syntactic subject, and complements, respectively.","{'title': '4.', 'number': '5'}"
CONT denotes the Lexical entry for the transitive verb loves.,"{'title': '4.', 'number': '5'}"
Simplified representation of the lexical entry in Figure 10. predicate–argument structure of a phrase/sentence.,"{'title': '4.', 'number': '5'}"
"The notation of CONT in this article is borrowed from that of Minimal Recursion Semantics (Copestake et al. 2006): HOOK represents a structure accessed by other phrases, and RELS describes the remaining structure of the semantics.","{'title': '4.', 'number': '5'}"
"In what follows, we represent signs in a reduced form as shown in Figure 11, because of the large size of typical HPSG signs, which often include information not immediately relevant to the point being discussed.","{'title': '4.', 'number': '5'}"
"We will only show attributes that are relevant to an explanation, expecting that readers can fill in the values of suppressed attributes.","{'title': '4.', 'number': '5'}"
"In our actual implementation of the HPSG grammar, lexical/phrasal signs contain additional attributes that are not defined in the standard HPSG theory but are used by a disambiguation model.","{'title': '4.', 'number': '5'}"
"Examples include the surface form of lexical heads, and the type of lexical entry assigned to lexical heads, which are respectively used for computing the features WORD and LE introduced in Section 4.5.","{'title': '4.', 'number': '5'}"
"By incorporating additional attributes into signs, we can straightforwardly compute feature functions for each sign.","{'title': '4.', 'number': '5'}"
This allows for a simple mapping between a parsing chart and a feature forest as described subsequently.,"{'title': '4.', 'number': '5'}"
"However, this might increase the size of parse forests and therefore decrease parsing efficiency, because differences between additional attributes interfere with equivalence relations for ambiguity packing.","{'title': '4.', 'number': '5'}"
"We represent an HPSG parse tree with a set of tuples (m, l, r), where m,l, and r are the signs of the mother, left daughter, and right daughter, respectively.4 In chart parsing, partial parse candidates are stored in a chart, in which phrasal signs are identified and packed into equivalence classes if they are judged to be equivalent and dominate the same word sequences.","{'title': '4.', 'number': '5'}"
"A set of parse trees is then represented as a set of relations among equivalence classes.5 Figure 12 shows a chart for parsing he saw a girl with a telescope, where the modifiee of with is ambiguous (saw or girl).","{'title': '4.', 'number': '5'}"
"Each feature structure expresses an equivalence class, and the arrows represent immediate-dominance relations.","{'title': '4.', 'number': '5'}"
"The phrase, saw a girl with a telescope, has two trees (A in the figure).","{'title': '4.', 'number': '5'}"
"Because the signs of the top-most nodes are equivalent, they are packed into an equivalence class.","{'title': '4.', 'number': '5'}"
The ambiguity is represented as the two pairs of arrows leaving the node A.,"{'title': '4.', 'number': '5'}"
"A set of HPSG parse trees is represented in a chart as a tuple (E, Er, o ), where E is a set of equivalence classes, Er C E is a set of root nodes, and o : E -4 2E×E is a function to represent immediate-dominance relations.","{'title': '4.', 'number': '5'}"
Our representation of a chart can be interpreted as an instance of a feature forest.,"{'title': '4.', 'number': '5'}"
"We map the tuple (em, el, er), which corresponds to (m, l, r), into a conjunctive node.","{'title': '4.', 'number': '5'}"
Figure 13 shows (a part of) the HPSG parse trees in Figure 12 represented as a feature forest.,"{'title': '4.', 'number': '5'}"
"Square boxes (ci) are conjunctive nodes, and di disjunctive nodes.","{'title': '4.', 'number': '5'}"
"A solid arrow represents a disjunctive daughter function, and a dotted line expresses a conjunctive daughter function.","{'title': '4.', 'number': '5'}"
"Formally, a chart (E, Er, o ) is mapped into a feature forest (C, D, R,-y, b) as follows.6 5 We assume that CONT and DTRS (a feature used to represent daughter signs) are restricted (Shieber 1985), and we will discuss a method for encoding CONT in a feature forest in Section 4.3.","{'title': '4.', 'number': '5'}"
We also assume that parse trees are packed according to equivalence relations rather than subsumption relations (Oepen and Carroll 2000).,"{'title': '4.', 'number': '5'}"
"We cannot simply map parse forests packed under subsumption into feature forests, because they over-generate possible unpacked trees.","{'title': '4.', 'number': '5'}"
"6 For ease of explanation, the definition of the root node is different from the original definition given in Section 3.","{'title': '4.', 'number': '5'}"
"In this section, we define R as a set of conjunctive nodes rather than a single node r. The definition here is translated into the original definition by introducing a dummy root node r' that has no features and only one disjunctive daughter whose daughters are R. Feature forest representation of HPSG parse trees in Figure 12. changing the model.","{'title': '4.', 'number': '5'}"
"Actually, we successfully developed a probabili stic model including features on nonlocalpredicate–argument dependencies, as described subsequently.","{'title': '4.', 'number': '5'}"
"Locality: In each step of composition of structure, only a limited depth of the structures are referred to.","{'title': '4.', 'number': '5'}"
"That is, local structures in the deep descendent phrases maybe ignored to construct larger phrases.","{'title': '4.', 'number': '5'}"
This assumption mean apredicate–argument daughters’predicate–argument s that predicate–argument structures can be packed into conjunctive nodes by ignoring local structures.,"{'title': '4.', 'number': '5'}"
"One may claim that restricting the domain of feature functions to (em, el, er) limits the flexibility of feature design.","{'title': '4.', 'number': '5'}"
"Although this is true to some extent, it does not necessarily mean the impossibility of incorporating features on nonlocal dependencies into the model.","{'title': '4.', 'number': '5'}"
This is because a feature forest model does not assume probabilistic independence of conjunctive nodes.,"{'title': '4.', 'number': '5'}"
"This means that we can unpack a part of the forest without With the method previously described, we can represent an HPSG parsing chart with a feature forest.","{'title': '4.', 'number': '5'}"
"However, equivalence classes in a chart might increase exponentially because predicate–argument structures in HPSG signs represent the semantic relations of all words that the phrase dominates.","{'title': '4.', 'number': '5'}"
"For example, Figure 14 shows phrasal signs with predicate–argument structures for saw a girl with a telescope.","{'title': '4.', 'number': '5'}"
"In the chart in Figure 12, these signs are packed into an equivalence class.","{'title': '4.', 'number': '5'}"
"However, Figure 14 shows that the values of CONT, that is, predicate–argument structures, have different values, and the signs as they are cannot be equivalent.","{'title': '4.', 'number': '5'}"
"As seen in this example, predicate–argument structures prevent us from packing signs into equivalence classes.","{'title': '4.', 'number': '5'}"
"In this section, we apply the feature forest model to predicate–argument structures, which may include reentrant structures and non-local dependencies.","{'title': '4.', 'number': '5'}"
It is theoretically difficult to apply the feature forest model to predicate–argument structures; a feature forest cannot represent graph structures that include reentrant structures in a straightforward manner.,"{'title': '4.', 'number': '5'}"
"However, if predicate–argument structures are constructed as in the manner described subsequently, they can be represented by feature forests of a tractable size.","{'title': '4.', 'number': '5'}"
Feature forests can represent predicate–argument structures if we assume some locality and monotonicity in the composition of predicate–argument structures.,"{'title': '4.', 'number': '5'}"
Signs with predicate–argument structures.,"{'title': '4.', 'number': '5'}"
"Computational Linguistics Volume 34, Number 1 Monotonicity: All relations in the daughters’ predicate–argument structures are percolated to the mother.","{'title': '4.', 'number': '5'}"
"That is, none of the predicate–argument relations in the daughter phrases disappear in the mother.","{'title': '4.', 'number': '5'}"
Thus predicate–argument structures of descendent phrases can be located at lower nodes in a feature forest.,"{'title': '4.', 'number': '5'}"
"Predicate–argument structures usually satisfy the above conditions, even when they include non-local dependencies.","{'title': '4.', 'number': '5'}"
"For example, Figure 15 shows HPSG lexical entries for the wh-extraction of the object of love (left) and for the control construction of try (right).","{'title': '4.', 'number': '5'}"
"The first condition is satisfied because both lexical entries refer to CONT|HOOK of argument signs in SUBJ, COMPS, and SLASH.","{'title': '4.', 'number': '5'}"
None of the lexical entries directly access ARGX of the arguments.,"{'title': '4.', 'number': '5'}"
The second condition is also satisfied because the values of CONT|HOOK of all of the argument signs are percolated to ARGX of the mother.,"{'title': '4.', 'number': '5'}"
"In addition, the elements in CONT|RELS are percolated to the mother by the Semantic Principle.","{'title': '4.', 'number': '5'}"
"Compositional semantics usually satisfies the above conditions, including MRS (Copestake et al. 1995, 2006).","{'title': '4.', 'number': '5'}"
"The composition of MRS refers to HOOK, and no internal structures of daughters.","{'title': '4.', 'number': '5'}"
The Semantic Principle of MRS also assures that all semantic relations in RELS are percolated to the mother.,"{'title': '4.', 'number': '5'}"
"When these conditions are satisfied, semantics may include any constraints, such as selectional restrictions, although the grammar we used in the experiments does not include semantic restrictions to constrain parse forests.","{'title': '4.', 'number': '5'}"
"Under these conditions, local structures of predicate–argument structures are encoded into a conjunctive node when the values of all of its arguments have been instantiated.","{'title': '4.', 'number': '5'}"
We introduce the notion of inactives to denote such local structures.,"{'title': '4.', 'number': '5'}"
An inactive is a subset of predicate–argument structures in which all arguments have been instantiated.,"{'title': '4.', 'number': '5'}"
"Because inactive parts will not change during the rest of the parsing process, they can be placed in a conjunctive node.","{'title': '4.', 'number': '5'}"
"By placing newly generated inactives into corresponding conjunctive nodes, a set of predicate–argument structures can be represented in a feature forest by packing local ambiguities, and non-local dependencies are preserved.","{'title': '4.', 'number': '5'}"
Lexical entries including non-local relations. and fact may optionally take a complementizer phrase.7 The predicate–argument structures for dispute1 and dispute2 are shown in Figure 17.,"{'title': '4.', 'number': '5'}"
Curly braces express the ambiguities of partially constructed predicate–argument structures.,"{'title': '4.', 'number': '5'}"
The resulting feature forest is shown in Figure 18.,"{'title': '4.', 'number': '5'}"
The boxes denote conjunctive nodes and dx represent disjunctive nodes.,"{'title': '4.', 'number': '5'}"
The clause I wanted to dispute has two possible predicate–argument structures: one corresponding to dispute1 (α in Figure 16) and the other corresponding to dispute2 (β in Figure 16).,"{'title': '4.', 'number': '5'}"
"The nodes of the predicate–argument structure α are all instantiated, that is, it contains only inactives.","{'title': '4.', 'number': '5'}"
"The corresponding conjunctive node (α' in Figure 18) has two inactives, for want and dispute1.","{'title': '4.', 'number': '5'}"
"The other structure β has an unfilled object in the argument (ARG28) of dispute2, which will be filled by the non-local dependency.","{'title': '4.', 'number': '5'}"
"Hence, the corresponding conjunctive node β' has only one inactive corresponding to want, and the remaining part that corresponds to dispute2 is passed on for further processing.","{'title': '4.', 'number': '5'}"
"When we process the phrase the fact that I wanted to dispute, the object of dispute2 is filled by fact (γ in Figure 16), and the predicate–argument structure of dispute2 is then placed into a conjunctive node (γ' in Figure 18).","{'title': '4.', 'number': '5'}"
A feature forest representation of predicate–argument structures.,"{'title': '4.', 'number': '5'}"
"One of the beneficial characteristics of this packed representation is that the representation is isomorphic to the parsing process, that is, a chart.","{'title': '4.', 'number': '5'}"
"Hence, we can assign features of HPSG parse trees to a conjunctive node, together with features of predicate– argument structures.","{'title': '4.', 'number': '5'}"
"In Section 5, we will investigate the contribution of features on parse trees and predicate–argument structures to the disambiguation of HPSG parsing.","{'title': '4.', 'number': '5'}"
The method just described is the essence of our solution for the tractable estimation of maximum entropy models on exponentially many HPSG parse trees.,"{'title': '4.', 'number': '5'}"
"However, the problem of computational cost remains.","{'title': '4.', 'number': '5'}"
Construction of feature forests requires parsing of all of the sentences in a treebank.,"{'title': '4.', 'number': '5'}"
"Despite the development of methods to improve HPSG parsing efficiency (Oepen, Flickinger, et al. 2002), exhaustive parsing of all sentences is still expensive.","{'title': '4.', 'number': '5'}"
We assume that computation of parse trees with low probabilities can be omitted in the estimation stage because T(w) can be approximated by parse trees with high probabilities.,"{'title': '4.', 'number': '5'}"
"To achieve this, we first prepared a preliminary probabilistic model whose estimation did not require the parsing of a treebank.","{'title': '4.', 'number': '5'}"
The preliminary model was used to reduce the search space for parsing a training treebank.,"{'title': '4.', 'number': '5'}"
"The preliminary model in this study is a unigram model, ¯p(t|w) _ fJw∈w p(l|w), where w ∈ w is a word in the sentence w, and l is a lexical entry assigned to w. This model is estimated by counting the relative frequencies of lexical entries used for w in the training data.","{'title': '4.', 'number': '5'}"
"Hence, the estimation does not require parsing of a treebank.","{'title': '4.', 'number': '5'}"
"Actually, we use a maximum entropy model to compute this probability as described in Section 5.","{'title': '4.', 'number': '5'}"
The preliminary model is used for filtering lexical entries when we parse a treebank.,"{'title': '4.', 'number': '5'}"
"Given this model, we restrict the number of lexical entries used to parse a treebank.","{'title': '4.', 'number': '5'}"
"With a threshold n for the number of lexical entries and a threshold c for the probability, lexical entries are assigned to a word in descending order of probability, until the number of assigned entries exceeds n, or the accumulated probability exceeds c. If this procedure does not assign a lexical entry necessary to produce a correct parse (i.e., an oracle lexical entry), it is added to the list of lexical entries.","{'title': '4.', 'number': '5'}"
It should be noted that oracle lexical entries are given by the HPSG treebank.,"{'title': '4.', 'number': '5'}"
This assures that the filtering method does not exclude correct parse trees from parse forests.,"{'title': '4.', 'number': '5'}"
Figure 19 shows an example of filtering the lexical entries assigned to saw.,"{'title': '4.', 'number': '5'}"
"With c = 0.95, four lexical entries are assigned.","{'title': '4.', 'number': '5'}"
"Although the lexicon includes other lexical entries, such as a verbal entry taking a sentential complement (p = 0.01 in the figure), they are filtered out.","{'title': '4.', 'number': '5'}"
"Although this method reduces the time required for parsing a treebank, this approximation causes bias in the training data and results in lower accuracy.","{'title': '4.', 'number': '5'}"
The tradeoff between parsing cost and accuracy will be examined experimentally in Section 5.4.,"{'title': '4.', 'number': '5'}"
We have several ways to integrate p¯ with the estimated model p(tjT(w)).,"{'title': '4.', 'number': '5'}"
"In the experiments, we will empirically compare the following methods in terms of accuracy and estimation time.","{'title': '4.', 'number': '5'}"
Filtering only: The unigram probability p¯ is used only for filtering in training.,"{'title': '4.', 'number': '5'}"
Product: The probability is defined as the product of p¯ and the estimated model p. Reference distribution: p¯ is used as a reference distribution of p. Feature function: log p¯ is used as a feature function of p. This method has been shown to be a generalization of the reference distribution method (Johnson and Riezler 2000).,"{'title': '4.', 'number': '5'}"
"Feature functions in maximum entropy models are designed to capture the characteristics of (em, el, er).","{'title': '4.', 'number': '5'}"
"In this article, we investigate combinations of the atomic features listed Filtering of lexical entries for saw.","{'title': '4.', 'number': '5'}"
"SYM symbol of the phrasal category (e.g., NP, VP) WORD surface form of the head word POS part-of-speech of the head word LE lexical entry assigned to the head word ARG argument label of a predicate in Table 1.","{'title': '4.', 'number': '5'}"
The following combinations are used for representing the characteristics of binary/unary schema applications.,"{'title': '4.', 'number': '5'}"
"� RULE,DIST,COMMA, fbinary = SPANl, SYMl, WORDl, POSl, LEl, SPANr, SYMr, WORDr, POSr, LEr funary = (RULE,SYM,WORD,POS,LE) where subscripts l and r denote left and right daughters.","{'title': '4.', 'number': '5'}"
"In addition, the following is used for expressing the condition of the root node of the parse tree.","{'title': '4.', 'number': '5'}"
"Feature functions to capture predicate–argument dependencies are represented as follows: fpa = ARG, DIST, WORDp, POSp, LEp, WORDa, POSa, LEa) where subscripts p and a represent predicate and argument, respectively.","{'title': '4.', 'number': '5'}"
"Figure 20 shows examples: froot is for the root node, in which the phrase symbol is S and the surface form, part-of-speech, and lexical entry of the lexical head are saw, VBD, and a transitive verb, respectively. fbinary is for the binary rule application to saw a girl and with a telescope, in which the applied schema is the Head-Modifier Schema, the left daughter is VP headed by saw, and the right daughter is PP headed by with, whose part-of-speech is IN and whose lexical entry is a VP-modifying preposition.","{'title': '4.', 'number': '5'}"
Figure 21 shows example features for predicate–argument structures.,"{'title': '4.', 'number': '5'}"
The figure shows features assigned to the conjunctive node denoted as α' in Figure 18.,"{'title': '4.', 'number': '5'}"
"Because inactive structures in the node have three predicate–argument relations, three features are activated.","{'title': '4.', 'number': '5'}"
"The first one is for the relation of want and I, where the label of the relation is ARG1, the distance between the head words is 1, the surface string and the POS of Example features for predicate–argument structures. the predicate are want and VBD, and those of the argument are I and PRP.","{'title': '4.', 'number': '5'}"
The second and the third features are for the other two relations.,"{'title': '4.', 'number': '5'}"
"We may include features on more than two relations, such as the dependencies among want, I, and dispute, although such features are not incorporated currently.","{'title': '4.', 'number': '5'}"
"In our implementation, some of the atomic features are abstracted (i.e., ignored) for smoothing.","{'title': '4.', 'number': '5'}"
"Tables 2, 3, and 4 show the full set of templates of combined features used in the experiments.","{'title': '4.', 'number': '5'}"
Each row represents the template for a feature function.,"{'title': '4.', 'number': '5'}"
"A check indicates the atomic feature is incorporated, and a hyphen indicates the feature is ignored.","{'title': '4.', 'number': '5'}"
Feature templates for root condition.,"{'title': '4.', 'number': '5'}"
Feature templates for predicate–argument dependencies.,"{'title': '4.', 'number': '5'}"
This section presents experimental results on the parsing accuracy attained by the feature forest models.,"{'title': '5.', 'number': '6'}"
"In all of the following experiments, we use the HPSG grammar developed by the method of Miyao, Ninomiya, and Tsujii (2005).","{'title': '5.', 'number': '6'}"
Section 5.1 describes how this grammar was developed.,"{'title': '5.', 'number': '6'}"
Section 5.2 explains other aspects of the experimental settings.,"{'title': '5.', 'number': '6'}"
"In Sections 5.3 to 5.7, we report results of the experiments on HPSG parsing.","{'title': '5.', 'number': '6'}"
"In the following experiments, we use Enju 2.1 (Tsujii Laboratory 2004), which is a widecoverage HPSG grammar extracted from the Penn Treebank by the method of Miyao, Ninomiya, and Tsujii (2005).","{'title': '5.', 'number': '6'}"
"In this method, we convert the Penn Treebank into an HPSG treebank, and collect HPSG lexical entries from terminal nodes of the HPSG treebank.","{'title': '5.', 'number': '6'}"
Figure 22 illustrates the process of treebank conversion and lexicon collection.,"{'title': '5.', 'number': '6'}"
We first convert and fertilize parse trees of the Penn Treebank.,"{'title': '5.', 'number': '6'}"
"This step identifies syntactic constructions that require special treatment in HPSG, such as raising/control and long-distance dependencies.","{'title': '5.', 'number': '6'}"
These constructions are then annotated with typed feature structures so that they conform to the HPSG analysis.,"{'title': '5.', 'number': '6'}"
"Next, we apply HPSG schemas and principles, and obtain fully specified HPSG parse trees.","{'title': '5.', 'number': '6'}"
"This step solves feature structure constraints given in the previous step, and fills unspecified constraints.","{'title': '5.', 'number': '6'}"
"Failures of schema/principle applications indicate that the annotated constraints do not Extracting HPSG lexical entries from the Penn Treebank. conform to the HPSG analysis, and require revisions.","{'title': '5.', 'number': '6'}"
"Finally, we obtain lexical entries from the HPSG parse trees.","{'title': '5.', 'number': '6'}"
"The terminal nodes of HPSG parse trees are collected, and they are generalized by removing word-specific or context-specific constraints.","{'title': '5.', 'number': '6'}"
An advantage of this method is that a wide-coverage HPSG lexicon is obtained because lexical entries are extracted from real-world sentences.,"{'title': '5.', 'number': '6'}"
Obtained lexical entries are guaranteed to construct well-formed HPSG parse trees because HPSG schemas and principles are successfully applied during the development of the HPSG treebank.,"{'title': '5.', 'number': '6'}"
"Another notable feature is that we can additionally obtain an HPSG treebank, which can be used as training data for disambiguation models.","{'title': '5.', 'number': '6'}"
"In the following experiments, this HPSG treebank is used for the training of maximum entropy models.","{'title': '5.', 'number': '6'}"
The lexicon used in the following experiments was extracted from Sections 02–21 of the Wall Street Journal portion of the Penn Treebank.,"{'title': '5.', 'number': '6'}"
This lexicon can assign correct lexical entries to 99.09% of words in the HPSG treebank converted from Penn Treebank Section 23.,"{'title': '5.', 'number': '6'}"
This number expresses “lexical coverage” in the strong sense defined by Hockenmaier and Steedman (2002).,"{'title': '5.', 'number': '6'}"
"In this notion of “coverage,” this lexicon has 84.1% sentential coverage, where this means that the lexicon can assign correct lexical entries to all of the words in a sentence.","{'title': '5.', 'number': '6'}"
"Although the parser might produce parse results for uncovered sentences, these parse results cannot be completely correct.","{'title': '5.', 'number': '6'}"
"The data for the training of the disambiguation models was the HPSG treebank derived from Sections 02–21 of the Wall Street Journal portion of the Penn Treebank, that is, the same set used for lexicon extraction.","{'title': '5.', 'number': '6'}"
"For training of the disambiguation models, we eliminated sentences of 40 words or more and sentences for which the parser could not produce the correct parses.","{'title': '5.', 'number': '6'}"
"The resulting training set consists of 33,604 sentences (when n = 10 and c = 0.95; see Section 5.4 for details).","{'title': '5.', 'number': '6'}"
"The treebanks derived from Sections 22 and 23 were used as the development and final test sets, respectively.","{'title': '5.', 'number': '6'}"
"Following previous studies on parsing with PCFG-based models (Collins 1997; Charniak 2000), accuracy is measured for sentences of less than 40 words and for those with less than 100 words.","{'title': '5.', 'number': '6'}"
Table 5 shows the specifications of the test data.,"{'title': '5.', 'number': '6'}"
The measure for evaluating parsing accuracy is precision/recall of predicate– argument dependencies output by the parser.,"{'title': '5.', 'number': '6'}"
"A predicate–argument dependency is defined as a tuple (wh,wn,7t, p), where wh is the head word of the predicate, wn is the head word of the argument, 7t is the type of the predicate (e.g., adjective, intransitive verb), and p is an argument label (MODARG, ARG1, ..., ARG4).","{'title': '5.', 'number': '6'}"
"For example, He tried running has three dependencies as follows: Labeled precision/recall (LP/LR) is the ratio of tuples correctly identified by the parser, and unlabeled precision/recall (UP/UR) is the ratio of wh and wn correctly identified regardless of π and p. F-score is the harmonic mean of LP and LR.","{'title': '5.', 'number': '6'}"
Sentence accuracy is the exact match accuracy of complete predicate–argument relations in a sentence.,"{'title': '5.', 'number': '6'}"
"These measures correspond to those used in other studies measuring the accuracy of predicate–argument dependencies in CCG parsing (Clark, Hockenmaier, and Steedman 2002; Hockenmaier 2003; Clark and Curran 2004b) and LFG parsing (Burke et al. 2004), although exact figures cannot be compared directly because the definitions of dependencies are different.","{'title': '5.', 'number': '6'}"
All predicate–argument dependencies in a sentence are the target of evaluation except quotation marks and periods.,"{'title': '5.', 'number': '6'}"
The accuracy is measured by parsing test sentences with gold-standard part-of-speech tags from the Penn Treebank unless otherwise noted.,"{'title': '5.', 'number': '6'}"
"The Gaussian prior was used for smoothing (Chen and Rosenfeld 1999a), and its hyper-parameter was tuned for each model to maximize F-score for the development set.","{'title': '5.', 'number': '6'}"
The algorithm for parameter estimation was the limited-memory BFGS method (Nocedal 1980; Nocedal and Wright 1999).,"{'title': '5.', 'number': '6'}"
"The parser was implemented in C++ with the LiLFeS library (Makino et al. 2002), and various speed-up techniques for HPSG parsing were used such as quick check and iterative beam search (Tsuruoka, Miyao, and Tsujii 2004; Ninomiya et al.","{'title': '5.', 'number': '6'}"
2005).,"{'title': '5.', 'number': '6'}"
"Other efficient parsing techniques, including global thresholding, hybrid parsing with a chunk parser, and large constituent inhibition, were not used.","{'title': '5.', 'number': '6'}"
"The results obtained using these techniques are given in Ninomiya et al. A limit on the number of constituents was set for time-out; the parser stopped parsing when the number of constituents created during parsing exceeded 50,000.","{'title': '5.', 'number': '6'}"
"In such a case, the parser output nothing, and the recall was computed as zero.","{'title': '5.', 'number': '6'}"
Features occurring more than twice were included in the probabilistic models.,"{'title': '5.', 'number': '6'}"
A method of filtering lexical entries was applied to the parsing of training data (Section 4.4).,"{'title': '5.', 'number': '6'}"
"Unless otherwise noted, parameters for filtering were n = 10 and c = 0.95, and a reference distribution method was applied.","{'title': '5.', 'number': '6'}"
"The unigram model, p0(t|s), for filtering is a maximum entropy model with two feature templates, (WORD, POS, LE) and (POS, LE).","{'title': '5.', 'number': '6'}"
"The model includes 24,847 features.","{'title': '5.', 'number': '6'}"
Tables 6 and 7 show parsing accuracy for the test set.,"{'title': '5.', 'number': '6'}"
"In the tables, “Syntactic features” denotes a model with syntactic features, that is, fbinary, funary, and froot introduced in Section 4.5.","{'title': '5.', 'number': '6'}"
"“Semantic features” represents a model with features on predicate– argument structures, that is, fpa given in Table 4.","{'title': '5.', 'number': '6'}"
“All” is a model with both syntactic and semantic features.,"{'title': '5.', 'number': '6'}"
"The “Baseline” row shows the results for the reference model, p0(t|s), used for lexical entry filtering in the estimation of the other models.","{'title': '5.', 'number': '6'}"
"This model is considered as a simple application of a traditional PCFG-style model; that is, p(r) = 1 for any rule r in the construction rules of the HPSG grammar.","{'title': '5.', 'number': '6'}"
The results demonstrate that feature forest models have significantly higher accuracy than a baseline model.,"{'title': '5.', 'number': '6'}"
"Comparing “Syntactic features” with “Semantic features,” we see that the former model attained significantly higher accuracy than the latter.","{'title': '5.', 'number': '6'}"
This indicates that syntactic features are more important for overall accuracy.,"{'title': '5.', 'number': '6'}"
We will examine the contributions of each atomic feature of the syntactic features in Section 5.5.,"{'title': '5.', 'number': '6'}"
Features on predicate–argument relations were generally considered as important for the accurate disambiguation of syntactic structures.,"{'title': '5.', 'number': '6'}"
"For example, PP-attachment ambiguity cannot be resolved with only syntactic preferences.","{'title': '5.', 'number': '6'}"
"However, the results show that a model with only semantic features performs significantly worse than one with syntactic features.","{'title': '5.', 'number': '6'}"
"Even when combined with syntactic features, semantic features do not improve accuracy.","{'title': '5.', 'number': '6'}"
"Obviously, semantic preferences are necessary for accurate parsing, but the features used in this work were not sufficient to capture semantic preferences.","{'title': '5.', 'number': '6'}"
"A possible reason is that, as reported in Gildea (2001), bilexical dependencies may be too sparse to capture semantic preferences.","{'title': '5.', 'number': '6'}"
"For reference, our results are competitive with the best corresponding results reported in CCG parsing (LP/LR = 86.6/86.3) (Clark and Curran 2004b), although our results cannot be compared directly with other grammar formalisms because each formalism represents predicate–argument dependencies differently.","{'title': '5.', 'number': '6'}"
"In contrast with the results of CCG and PCFG (Collins 1997, 1999, 2003; Charniak 2000), the recall is clearly lower than precision.","{'title': '5.', 'number': '6'}"
This may have resulted from the HPSG grammar having stricter feature constraints and the parser not being able to produce parse results for around 1% of the sentences.,"{'title': '5.', 'number': '6'}"
"To improve recall, we need techniques to deal with these 1% of sentences.","{'title': '5.', 'number': '6'}"
Table 8 gives the computation/space costs of model estimation.,"{'title': '5.', 'number': '6'}"
“Estimation time” indicates user times required for running the parameter estimation algorithm.,"{'title': '5.', 'number': '6'}"
"“No. of feature occurrences” denotes the total number of occurrences of features in the training data, and “Data size” gives the sizes of the compressed files of training data.","{'title': '5.', 'number': '6'}"
"We can conclude that feature forest models are estimated at a tractable computational cost and a reasonable data size, even when a model includes semantic features including nonlocal dependencies.","{'title': '5.', 'number': '6'}"
The results reveal that feature forest models essentially solve the problem of the estimation of probabilistic models of sentence structures.,"{'title': '5.', 'number': '6'}"
Table 9 compares the estimation methods introduced in Section 4.4.,"{'title': '5.', 'number': '6'}"
"In all of the following experiments, we show the accuracy for the test set (<40 words) only.","{'title': '5.', 'number': '6'}"
Table 9 reveals that our method achieves significantly lower accuracy when it is used only for filtering in the training phrase.,"{'title': '5.', 'number': '6'}"
"One reason is that the feature forest model prefers lexical entries that are filtered out in the training phase, because they are always oracle lexical entries in the training.","{'title': '5.', 'number': '6'}"
This means that we must incorporate the preference of filtering into the final parse selection.,"{'title': '5.', 'number': '6'}"
"As shown in Table 9, the models combined with a preliminary model achieved sufficient accuracy.","{'title': '5.', 'number': '6'}"
The reference distribution method achieved higher accuracy and lower cost.,"{'title': '5.', 'number': '6'}"
The feature function method achieved lower accuracy in our experiments.,"{'title': '5.', 'number': '6'}"
A possible reason for this is that a hyper-parameter of the prior was set to the same value for all the features including the feature of the log-probability given by the preliminary distribution.,"{'title': '5.', 'number': '6'}"
Tables 10 and 11 show the results of changing the filtering threshold.,"{'title': '5.', 'number': '6'}"
We can determine the correlation between the estimation/parsing cost and accuracy.,"{'title': '5.', 'number': '6'}"
"In our experiment, n > 10 and c > 0.90 seem necessary to preserve the F-score over 86.0.","{'title': '5.', 'number': '6'}"
Table 12 shows the accuracy with different feature sets.,"{'title': '5.', 'number': '6'}"
Accuracy was measured for 15 models with some atomic features removed from the final model.,"{'title': '5.', 'number': '6'}"
"The last row denotes the accuracy attained by the unigram model (i.e., the reference distribution).","{'title': '5.', 'number': '6'}"
The numbers in bold type represent a significant difference from the final model according to stratified shuffling tests with the Bonferroni correction (Cohen 1995) with p-value < .05 for 32 pairwise comparisons.,"{'title': '5.', 'number': '6'}"
"The results indicate that DIST, COMMA, SPAN, WORD, and Filtering threshold vs. estimation cost. n, c Estimation time (sec.)","{'title': '5.', 'number': '6'}"
Parsing time (sec.),"{'title': '5.', 'number': '6'}"
"Data size (MB) 5, 0.80 108 5,103 341 5, 0.90 150 6,242 407 5, 0.95 190 7,724 469 5, 0.98 259 9,604 549 10, 0.80 130 6,003 370 10, 0.90 268 8,855 511 10, 0.95 511 15,393 727 10, 0.98 1,395 36,009 1,230 15, 0.80 123 6,298 372 15, 0.90 259 9,543 526 15, 0.95 735 20,508 854 15, 0.98 3,777 86,844 2,031 POS features contributed to the final accuracy, although the differences were slight.","{'title': '5.', 'number': '6'}"
"In contrast, RULE, SYM, and LE features did not affect accuracy.","{'title': '5.', 'number': '6'}"
"However, when each was removed together with another feature, the accuracy decreased drastically.","{'title': '5.', 'number': '6'}"
This implies that such features carry overlapping information.,"{'title': '5.', 'number': '6'}"
Table 13 shows parsing accuracy for covered and uncovered sentences.,"{'title': '5.', 'number': '6'}"
"As defined in Section 5.1, “covered” indicates that the HPSG lexicon has all correct lexical entries for a sentence.","{'title': '5.', 'number': '6'}"
"In other words, for covered sentences, exactly correct parse trees are obtained if the disambiguation model worked perfectly.","{'title': '5.', 'number': '6'}"
The result reveals clear differences in accuracy between covered and uncovered sentences.,"{'title': '5.', 'number': '6'}"
"The F-score for covered sentences is around 2.5 points higher than the overall F-score, whereas the F-score is more than 10 points lower for uncovered sentences.","{'title': '5.', 'number': '6'}"
This result indicates improvement of lexicon quality is an important factor for higher accuracy.,"{'title': '5.', 'number': '6'}"
Figure 23 shows the learning curve.,"{'title': '5.', 'number': '6'}"
"A feature set was fixed, and the parameter of the Gaussian prior was optimized for each model.","{'title': '5.', 'number': '6'}"
"High accuracy is attained even with a small training set, and the accuracy seems to be saturated.","{'title': '5.', 'number': '6'}"
This indicates that we cannot further improve the accuracy simply by increasing the size of the training data set.,"{'title': '5.', 'number': '6'}"
The exploration of new types of features is necessary for higher accuracy.,"{'title': '5.', 'number': '6'}"
"It should also be noted that the upper bound of the accuracy is not 100%, because the grammar cannot produce completely correct parse results for uncovered sentences.","{'title': '5.', 'number': '6'}"
Figure 24 shows the accuracy for each sentence length.,"{'title': '5.', 'number': '6'}"
It is apparent from this figure that the accuracy is significantly higher for sentences with less than 10 words.,"{'title': '5.', 'number': '6'}"
This implies that experiments with only short sentences overestimate the performance of parsers.,"{'title': '5.', 'number': '6'}"
Sentences with at least 10 words are necessary to properly evaluate the performance of parsing real-world texts.,"{'title': '5.', 'number': '6'}"
"The accuracies for the sentences with more than 10 words are not very different, although data points for sentences with more than 50 words are not reliable.","{'title': '5.', 'number': '6'}"
Table 14 shows the accuracies for predicate–argument relations when partsof-speech tags are assigned automatically by a maximum-entropy-based parts-ofspeech tagger (Tsuruoka and Tsujii 2005).,"{'title': '5.', 'number': '6'}"
The results indicate a drop of about three points in labeled precision/recall (a two-point drop in unlabeled precision/recall).,"{'title': '5.', 'number': '6'}"
"A reason why we observed larger accuracy drops in labeled precision/recall is that Sentence length vs. accuracy. predicate–argument relations are fragile with respect to parts-of-speech errors because predicate types (e.g., adjective, intransitive verb) are determined depending on the parts-of-speech of predicate words.","{'title': '5.', 'number': '6'}"
"Although our current parsing strategy assumes that parts-of-speech are given beforehand, for higher accuracy in real application contexts, we will need a method for determining parts-of-speech and parse trees jointly.","{'title': '5.', 'number': '6'}"
Table 15 shows a manual classification of the causes of disambiguation errors in 100 sentences randomly chosen from Section 00.,"{'title': '5.', 'number': '6'}"
"In our evaluation, one error source may cause multiple dependency errors.","{'title': '5.', 'number': '6'}"
"For example, if an incorrect lexical entry is assigned to a verb, all of the argument dependencies of the verb are counted as errors.","{'title': '5.', 'number': '6'}"
The numbers in the table include such double-counting.,"{'title': '5.', 'number': '6'}"
Figure 25 shows examples of disambiguation errors.,"{'title': '5.', 'number': '6'}"
The figure shows output from the parser.,"{'title': '5.', 'number': '6'}"
"Major causes are classified into three types: attachment ambiguity, argument/ modifier distinction, and lexical ambiguity.","{'title': '5.', 'number': '6'}"
"As attachment ambiguities are well-known error sources, PP-attachment is the largest source of errors in our evaluation.","{'title': '5.', 'number': '6'}"
Our disambiguation model cannot accurately resolve PP-attachment ambiguities because it does not include dependencies among a modifiee and the argument of the preposition.,"{'title': '5.', 'number': '6'}"
"Because previous studies revealed that such dependencies are effective features for PP-attachment resolution, we should incorporate them into our model.","{'title': '5.', 'number': '6'}"
"Some of the attachment ambiguities, including adjective and adverb, should also be resolved with an extension of features.","{'title': '5.', 'number': '6'}"
"However, we cannot identify any effective features for the disambiguation of attachment of verbal phrases, including relative clauses, verb phrases, subordinate clauses, and to-infinitives.","{'title': '5.', 'number': '6'}"
"For example, Figure 25 shows an example error of the attachment of a relative clause.","{'title': '5.', 'number': '6'}"
"The correct answer is that the Examples of disambiguation errors. subject of yielded is acre, but this cannot be determined only by the relation among yield, grapes, and acre.","{'title': '5.', 'number': '6'}"
The resolution of these errors requires a novel type of feature function.,"{'title': '5.', 'number': '6'}"
"Errors of argument/modifier distinction are prominent in deep syntactic analysis, because arguments and modifiers are not explicitly distinguished in the evaluation of CFG parsers.","{'title': '5.', 'number': '6'}"
Figure 25 shows an example of the argument/modifier distinction of a to-infinitive clause.,"{'title': '5.', 'number': '6'}"
"In this case, the to-infinitive clause is a complement of tempts.","{'title': '5.', 'number': '6'}"
The subcategorization frame of tempts seems responsible for this problem.,"{'title': '5.', 'number': '6'}"
"However, the disambiguation model wrongly assigned a lexical entry for a transitive verb because of the sparseness of the training data (tempts occurred only once in the training data).","{'title': '5.', 'number': '6'}"
The resolution of this sort of ambiguity requires the refinement of a probabilistic model of lexical entries.,"{'title': '5.', 'number': '6'}"
Errors of verb phrases and subordinate clauses are similar to this example.,"{'title': '5.', 'number': '6'}"
Errors of argument/modifier distinction of noun phrases are mainly caused by temporal nouns and cardinal numbers.,"{'title': '5.', 'number': '6'}"
The resolution of these errors seems to require the identification of temporal expressions and usage of cardinal numbers.,"{'title': '5.', 'number': '6'}"
Errors of lexical ambiguities were mainly caused by idioms.,"{'title': '5.', 'number': '6'}"
"For example, in Figure 25, compared with is a compound preposition, but the parser recognized it as a verb phrase.","{'title': '5.', 'number': '6'}"
This indicates that the grammar or the disambiguation model requires the special treatment of idioms.,"{'title': '5.', 'number': '6'}"
Errors of verb subcategorization frames were mainly caused by difficult constructions such as insertions.,"{'title': '5.', 'number': '6'}"
Figure 25 shows that the parser could not identify the inserted clause (says John Siegel...) and a lexical entry for a declarative transitive verb was chosen.,"{'title': '5.', 'number': '6'}"
Attachment errors of commas are also significant.,"{'title': '5.', 'number': '6'}"
It should be noted that commas were ignored in the evaluation of CFG parsers.,"{'title': '5.', 'number': '6'}"
"We did not eliminate punctuation from the evaluation because punctuation sometimes contributes to semantics, as in coordination and insertion.","{'title': '5.', 'number': '6'}"
"In this error analysis, errors of commas representing coordination/insertion are classified into “coordination/insertion,” and “comma” indicates errors that do not contribute to the computation of semantics.","{'title': '5.', 'number': '6'}"
Errors of noun phrase identification mean that a noun phrase was split into two phrases.,"{'title': '5.', 'number': '6'}"
These errors were mainly caused by the indirect effects of other errors.,"{'title': '5.', 'number': '6'}"
Errors of identifying coordination/insertion structures sometimes resulted in catastrophic analyses.,"{'title': '5.', 'number': '6'}"
"While accurate analysis of such constructions is indispensable, it is also known to be difficult because disambiguation of coordination/insertion requires the computation of preferences over global structures, such as the similarity of syntactic/semantic structure of coordinates.","{'title': '5.', 'number': '6'}"
Incorporating features for representing the similarity of global structures is difficult for feature forest models.,"{'title': '5.', 'number': '6'}"
Zero-pronoun resolution is also a difficult problem.,"{'title': '5.', 'number': '6'}"
"However, we found that most were indirectly caused by errors of argument/modifier distinction in to-infinitive clauses.","{'title': '5.', 'number': '6'}"
"A significant portion of the errors discussed above cannot be resolved by the features we investigated in this study, and the design of other features will be necessary for improving parsing accuracy.","{'title': '5.', 'number': '6'}"
"The model described in this article was first published in Miyao and Tsujii (2002), and has been applied to probabilistic models for parsing with lexicalized grammars.","{'title': '6.', 'number': '7'}"
"Applications to CCG parsing (Clark and Curran 2003, 2004b) and LFG parsing (Kaplan et al. 2004; Riezler and Vasserman 2004) demonstrated that feature forest models attained higher accuracy than other models.","{'title': '6.', 'number': '7'}"
These researchers applied feature forests to representations of the packed parse results of LFG and the dependency/derivation structures of CCG.,"{'title': '6.', 'number': '7'}"
Their work demonstrated the applicability and effectiveness of feature forest models in parsing with wide-coverage lexicalized grammars.,"{'title': '6.', 'number': '7'}"
"Feature forest models were also shown to be effective for wide-coverage sentence realization (Nakanishi, Miyao, and Tsujii 2005).","{'title': '6.', 'number': '7'}"
This work demonstrated that feature forest models are generic enough to be applied to natural language processing tasks other than parsing.,"{'title': '6.', 'number': '7'}"
The work of Geman and Johnson (2002) independently developed a dynamic programming algorithm for maximum entropy models.,"{'title': '6.', 'number': '7'}"
"The solution was similar to our approach, although their method was designed to traverse LFG parse results represented with disjunctive feature structures as proposed by Maxwell and Kaplan (1995).","{'title': '6.', 'number': '7'}"
The difference between the two approaches is that feature forests use a simpler generic data structure to represent packed forest structures.,"{'title': '6.', 'number': '7'}"
"Therefore, without assuming what feature forests represent, our algorithm can be applied to various tasks, including theirs.","{'title': '6.', 'number': '7'}"
Another approach to the probabilistic modeling of complete structures is a method of approximation.,"{'title': '6.', 'number': '7'}"
The work on whole sentence maximum entropy models (Rosenfeld 1997; Chen and Rosenfeld 1999b) proposed an approximation algorithm to estimate parameters of maximum entropy models on whole sentence structures.,"{'title': '6.', 'number': '7'}"
"However, the algorithm suffered from slow convergence, and the model was basically a sequence model.","{'title': '6.', 'number': '7'}"
It could not produce a solution for complex structures as our model can.,"{'title': '6.', 'number': '7'}"
"We should also mention Conditional Random Fields (CRFs) (Lafferty, McCallum, and Pereira 2001) for solving a similar problem in the context of maximum entropy Markov models.","{'title': '6.', 'number': '7'}"
Their solution was an algorithm similar to the computation of forward/backward probabilities of hidden Markov models (HMMs).,"{'title': '6.', 'number': '7'}"
Their algorithm is a special case of our algorithm in which each conjunctive node has only one daughter.,"{'title': '6.', 'number': '7'}"
This is obvious because feature forests can represent Markov chains.,"{'title': '6.', 'number': '7'}"
"In an analogy, CRFs correspond to HMMs, whereas feature forest models correspond to PCFGs.","{'title': '6.', 'number': '7'}"
"Extensions of CRFs, such as semi-Markov CRFs (Sarawagi and Cohen 2004), are also regarded as instances of feature forest models.","{'title': '6.', 'number': '7'}"
This fact implies that our algorithm is applicable to not only parsing but also to other tasks.,"{'title': '6.', 'number': '7'}"
"CRFs are now widely used for sequence-based tasks, such as parts-of-speech tagging and named entity recognition, and have been shown to achieve the best performance in various tasks (McCallum and Li 2003; McCallum, Rohanimanesh, and Sutton 2003; Pinto et al. 2003; Sha and Pereira 2003; Peng and McCallum 2004; Roark et al.","{'title': '6.', 'number': '7'}"
"2004; Settles 2004; Sutton, Rohanimanesh, and McCallum 2004).","{'title': '6.', 'number': '7'}"
These results suggest that the method proposed in the present article will achieve high accuracy when applied to various statistical models with tree structures.,"{'title': '6.', 'number': '7'}"
"Dynamic CRFs (McCallum, Rohanimanesh, and Sutton 2003; Sutton, Rohanimanesh, and McCallum 2004) provide us with an interesting inspiration for extending feature forest models.","{'title': '6.', 'number': '7'}"
"The purpose of dynamic CRFs is to incorporate feature functions that are not represented locally, and the solution is to apply a variational method, which is an algorithm of numerical computation, to obtain approximate solutions.","{'title': '6.', 'number': '7'}"
"A similar method may be developed to overcome a bottleneck of feature forest models, that is, the fact that feature functions are localized to conjunctive nodes.","{'title': '6.', 'number': '7'}"
The structure of feature forests is common in natural language processing and computational linguistics.,"{'title': '6.', 'number': '7'}"
"As is easily seen, lattices, Markov chains, and CFG parse trees are represented by feature forests.","{'title': '6.', 'number': '7'}"
"Furthermore, because conjunctive nodes do not necessarily represent CFG nodes or rules and terminals of feature forests need not be words, feature forests can express any forest structures in which ambiguities are packed in local structures.","{'title': '6.', 'number': '7'}"
Examples include the derivation trees of LTAG and CCG.,"{'title': '6.', 'number': '7'}"
"Chiang (2003) proved that feature forests could be considered as the derivation forests of linear context-free rewriting systems (LCFRSs) (Vijay-Shanker, Weir, and Joshi 1987; Weir 1988).","{'title': '6.', 'number': '7'}"
"LCFRSs define a wide variety of grammars, including LTAG and CCG, while preserving polynomial-time complexity of parsing.","{'title': '6.', 'number': '7'}"
This demonstrates that feature forest models are applicable to probabilistic models far beyond PCFGs.,"{'title': '6.', 'number': '7'}"
Feature forests are also isomorphic to support graphs (or explanation graphs) used in the graphical EM algorithm (Kameya and Sato 2000).,"{'title': '6.', 'number': '7'}"
"In their framework, a program in a logic programming language, PRISM (Sato and Kameya 1997), is converted into support graphs, and parameters of probabilistic models are automatically learned by an EM algorithm.","{'title': '6.', 'number': '7'}"
"Support graphs have been proved to represent various statistical structural models, including HMMs, PCFGs, Bayesian networks, and many other graphical structures (Sato and Kameya 2001; Sato 2005).","{'title': '6.', 'number': '7'}"
"Taken together, these results imply the high applicability of feature forest models to various real tasks.","{'title': '6.', 'number': '7'}"
"Because feature forests have a structure isomorphic to parse forests of PCFG, it might seem that they can represent only immediate dominance relations of CFG rules as in PCFG, resulting in only a slight, trivial extension of PCFG.","{'title': '6.', 'number': '7'}"
"As described herein, however, feature forests can represent structures beyond CFG parse trees.","{'title': '6.', 'number': '7'}"
"Furthermore, because feature forests are a generalized representation of ambiguous structures, each node in a feature forest need not correspond to a node in a PCFG parse forest.","{'title': '6.', 'number': '7'}"
"That is, a node in a feature forest may represent any linguistic entity, including a fragment of a syntactic structure, a semantic relation, or other sentence-level information.","{'title': '6.', 'number': '7'}"
The idea of feature forest models could be applied to non-probabilistic machine learning methods.,"{'title': '6.', 'number': '7'}"
"Taskar et al. (2004) proposed a dynamic programming algorithm for the learning of large-margin classifiers including support vector machines (Vapnik 1995), and presented its application to disambiguation in CFG parsing.","{'title': '6.', 'number': '7'}"
Their algorithm resembles feature forest models; an optimization function is computed by a dynamic programing algorithm without unpacking packed forest structures.,"{'title': '6.', 'number': '7'}"
"From the discussion in this article, it is evident that if the main part of an update formula is represented with (the exponential of) linear combinations, a method similar to feature forest models should be applicable.","{'title': '6.', 'number': '7'}"
"Before the advent of feature forest models, studies on probabilistic models of HPSG adopted conventional maximum entropy models to select the most probable parse from parse candidates given by HPSG grammars (Oepen, Toutanova, et al. 2002; Toutanova and Manning 2002; Baldridge and Osborne 2003).","{'title': '6.', 'number': '7'}"
The difference between these studies and our work is that we used feature forests to avoid the exponential increase in the number of structures that results from unpacked parse results.,"{'title': '6.', 'number': '7'}"
"These studies ignored the problem of exponential explosion; in fact, training sets in these studies were very small and consisted only of short sentences.","{'title': '6.', 'number': '7'}"
"A possible approach to avoid this problem is to develop a fully restrictive grammar that never causes an exponential explosion, although the development of such a grammar requires considerable effort and it cannot be acquired from treebanks using existing approaches.","{'title': '6.', 'number': '7'}"
"We think that exponential explosion is inevitable, particularly with the large-scale wide-coverage grammars required to analyze real-world texts.","{'title': '6.', 'number': '7'}"
"In such cases, these methods of model estimation are intractable.","{'title': '6.', 'number': '7'}"
Another approach to estimating log-linear models for HPSG was to extract a small informative sample from the original set T(w) (Osborne 2000).,"{'title': '6.', 'number': '7'}"
The method was successfully applied to Dutch HPSG parsing (Malouf and van Noord 2004).,"{'title': '6.', 'number': '7'}"
A possible problem with this method is in the approximation of exponentially many parse trees by a polynomial-size sample.,"{'title': '6.', 'number': '7'}"
"However, their method has an advantage in that any features on parse results can be incorporated into a model, whereas our method forces feature functions to be defined locally on conjunctive nodes.","{'title': '6.', 'number': '7'}"
We will discuss the trade-off between the approximation solution and the locality of feature functions in Section 6.3.,"{'title': '6.', 'number': '7'}"
"Non-probabilistic statistical classifiers have also been applied to disambiguation in HPSG parsing: voted perceptrons (Baldridge and Osborne 2003) and support vector machines (Toutanova, Markova, and Manning 2004).","{'title': '6.', 'number': '7'}"
"However, the problem of exponential explosion is also inevitable using their methods.","{'title': '6.', 'number': '7'}"
"As described in Section 6.1, an approach similar to ours may be applied, following the study of Taskar et al. (2004).","{'title': '6.', 'number': '7'}"
A series of studies on parsing with LFG (Johnson et al. 1999; Riezler et al.,"{'title': '6.', 'number': '7'}"
"2000, 2002) also proposed a maximum entropy model for probabilistic modeling of LFG parsing.","{'title': '6.', 'number': '7'}"
"However, similarly to the previous studies on HPSG parsing, these groups had no solution to the problem of exponential explosion of unpacked parse results.","{'title': '6.', 'number': '7'}"
"As discussed in Section 6.1, Geman and Johnson (2002) proposed an algorithm for maximum entropy estimation for packed representations of LFG parses.","{'title': '6.', 'number': '7'}"
"Recent studies on CCG have proposed probabilistic models of dependency structures or predicate–argument dependencies, which are essentially the same as the predicate–argument structures described in the present article.","{'title': '6.', 'number': '7'}"
"Clark, Hockenmaier, and Steedman (2002) attempted the modeling of dependency structures, but the model was inconsistent because of the violation of the independence assumption.","{'title': '6.', 'number': '7'}"
Hockenmaier (2003) proposed a consistent generative model of predicate–argument structures.,"{'title': '6.', 'number': '7'}"
"The probability of a non-local dependency was conditioned on multiple words to preserve the consistency of the probability model; that is, probability p(Ilwant, dispute) in Section 4.3 was directly estimated.","{'title': '6.', 'number': '7'}"
"The problem was that such probabilities could not be estimated directly from the data due to data sparseness, and a heuristic method had to be employed.","{'title': '6.', 'number': '7'}"
Probabilities were therefore estimated as the average of individual probabilities conditioned on a single word.,"{'title': '6.', 'number': '7'}"
Another problem is that the model is no longer consistent when unification constraints such as those in HPSG are introduced.,"{'title': '6.', 'number': '7'}"
"Our solution is free of these problems, and is applicable to various grammars, not only HPSG and CCG.","{'title': '6.', 'number': '7'}"
"Most of the state-of-the-art studies on parsing with lexicalized grammars have adopted feature forest models (Clark and Curran 2003, 2004b; Kaplan et al. 2004; Riezler and Vasserman 2004).","{'title': '6.', 'number': '7'}"
"Their methods of translating parse results into feature forests are basically the same as our method described in Section 4, and details differ because different grammar theories represent syntactic structures differently.","{'title': '6.', 'number': '7'}"
"They reported higher accuracy in parsing the Penn Treebank than the previous methods introduced herein, and these results attest the effectiveness of feature forest models in practical deep parsing.","{'title': '6.', 'number': '7'}"
A remaining problem is that no studies could provide empirical comparisons across grammar theories.,"{'title': '6.', 'number': '7'}"
The above studies and our research evaluated parsing accuracy on their own test sets.,"{'title': '6.', 'number': '7'}"
The construction of theory-independent standard test sets requires enormous effort because we must establish theory-independent criteria such as agreed definitions of phrases and headedness.,"{'title': '6.', 'number': '7'}"
"Although this issue is beyond the scope of the present article, it is a fundamental obstacle to the transparency of these studies on parsing.","{'title': '6.', 'number': '7'}"
Clark and Curran (2004a) described a method for reducing the cost of parsing a training treebank without sacrificing accuracy in the context of CCG parsing.,"{'title': '6.', 'number': '7'}"
"They first assigned each word a small number of supertags, corresponding to lexical entries in our case, and parsed supertagged sentences.","{'title': '6.', 'number': '7'}"
"Because they did not use the probabilities of supertags in a parsing stage, their method corresponds to our “filtering only” method.","{'title': '6.', 'number': '7'}"
The difference from our approach is that they also applied the supertagger in a parsing stage.,"{'title': '6.', 'number': '7'}"
"We suppose that this was crucial for high accuracy in their approach, although empirical investigation is necessary.","{'title': '6.', 'number': '7'}"
The proposed algorithm is an essential solution to the problem of estimating probabilistic models on exponentially many complete structures.,"{'title': '6.', 'number': '7'}"
"However, the applicability of this algorithm relies on the constraint that features are defined locally in conjunctive nodes.","{'title': '6.', 'number': '7'}"
"As discussed in Section 6.1, this does not necessarily mean that features in our model can represent only the immediate-dominance relations of CFG rules, because conjunctive nodes may encode any fragments of complete structures.","{'title': '6.', 'number': '7'}"
"In fact, we demonstrated in Section 4.3 that certain assumptions allowed us to encode non-local predicate– argument dependencies in tractable-size feature forests.","{'title': '6.', 'number': '7'}"
"In addition, although in the experiments we used only features on bilexical dependencies, the method described in Section 4.3 allows us to define any features on a predicate and all of its arguments, such as a ternary relation among a subject, a verb, and a complement (e.g., the relation among I, want, and dispute1 in Figure 21), and a generalized relation among semantic classes of a predicate and its arguments.","{'title': '6.', 'number': '7'}"
"This is because a predicate and all of its arguments are included in a conjunctive node, and feature functions can represent any relations expressed within a conjunctive node.","{'title': '6.', 'number': '7'}"
"When we define more global features, such as co-occurrences of structures at distant places in a sentence, conjunctive nodes must be expanded so that they include all structures that are necessary to define these features.","{'title': '6.', 'number': '7'}"
"However, this obviously increases the number of conjunctive nodes, and consequently, the cost of parameter estimation increases.","{'title': '6.', 'number': '7'}"
"In an extreme case, for example, if we define features on any co-occurrences of partial parse trees, the full unpacking of parse forests would be necessary, and parameter estimation would be intractable.","{'title': '6.', 'number': '7'}"
This indicates that there is a trade-off between the locality of features and the cost of estimation.,"{'title': '6.', 'number': '7'}"
"That is, larger context features might contribute to higher accuracy, while they inflate the size of feature forests and increase the cost of parameter estimation.","{'title': '6.', 'number': '7'}"
Sampling techniques (Rosenfeld 1997; Chen and Rosenfeld 1999b; Osborne 2000; Malouf and van Noord 2004) allow us to define any features on complete structures without any constraints.,"{'title': '6.', 'number': '7'}"
"However, they force us to employ approximation methods for tractable computation.","{'title': '6.', 'number': '7'}"
"The effectiveness of those techniques therefore relies on convergence speed and approximation errors, which may vary depending on the characteristics of target problems and features.","{'title': '6.', 'number': '7'}"
It is an open research question whether dynamic programming or sampling can deliver a better balance of estimation efficiency and accuracy.,"{'title': '6.', 'number': '7'}"
The answer will differ in different problems.,"{'title': '6.', 'number': '7'}"
"When most effective features can be represented locally in tractablesize feature forests, dynamic programming methods including ours are suitable.","{'title': '6.', 'number': '7'}"
"However, when global context features are indispensable for high accuracy, sampling methods might be better.","{'title': '6.', 'number': '7'}"
"We should also investigate compromise solutions such as dynamic CRFs (McCallum, Rohanimanesh, and Sutton 2003; Sutton, Rohanimanesh, and McCallum 2004) and reranking techniques (Collins 2000; Charniak and Johnson 2005).","{'title': '6.', 'number': '7'}"
"There is no analytical way of predicting the best solution, and it must be investigated experimentally for each target task.","{'title': '6.', 'number': '7'}"
A dynamic programming algorithm was presented for maximum entropy modeling and shown to provide a solution to the parameter estimation of probabilistic models of complete structures without the independence assumption.,"{'title': '7.', 'number': '8'}"
"We first defined the notion of a feature forest, which is a packed representation of an exponential number of trees of features.","{'title': '7.', 'number': '8'}"
"When training data is represented with feature forests, model parameters are estimated at a tractable cost without unpacking the forests.","{'title': '7.', 'number': '8'}"
The method provides a more flexible modeling scheme than previous methods of application of maximum entropy models to natural language processing.,"{'title': '7.', 'number': '8'}"
"Furthermore, it is applicable to complex data structures where an event is difficult to decompose into independent sub-events.","{'title': '7.', 'number': '8'}"
We also demonstrated that feature forest models are applicable to probabilistic modeling of linguistic structures such as the syntactic structures of HPSG and predicate– argument structures including non-local dependencies.,"{'title': '7.', 'number': '8'}"
The presented approach can be regarded as a general solution to the probabilistic modeling of syntactic analysis with lexicalized grammars.,"{'title': '7.', 'number': '8'}"
Table 16 summarizes the best performance of the HPSG parser described in this article.,"{'title': '7.', 'number': '8'}"
The parser demonstrated impressively high coverage and accuracy for real-world texts.,"{'title': '7.', 'number': '8'}"
We therefore conclude that the HPSG parser for English is moving toward a practical level of use in real-world applications.,"{'title': '7.', 'number': '8'}"
"Recently, the applicability of the HPSG parser to practical applications, such as information extraction and retrieval, has also been demonstrated (Miyao et al. 2006; Yakushiji et al.","{'title': '7.', 'number': '8'}"
2006; Chun 2007).,"{'title': '7.', 'number': '8'}"
"From our extensive investigation of HPSG parsing, we observed that exploration of new types of features is indispensable to further improvement of parsing accuracy.","{'title': '7.', 'number': '8'}"
"A possible research direction is to encode larger contexts of parse trees, which has been shown to improve accuracy (Toutanova and Manning 2002; Toutanova, Markova, and Manning 2004).","{'title': '7.', 'number': '8'}"
Future work includes not only the investigation of these features but also the abstraction of predicate–argument dependencies using semantic classes.,"{'title': '7.', 'number': '8'}"
Experimental results also suggest that an improvement in grammar coverage is crucial for higher accuracy.,"{'title': '7.', 'number': '8'}"
This indicates that an improvement in the quality of the grammar is a key factor for the improvement of parsing accuracy.,"{'title': '7.', 'number': '8'}"
The feature forest model provides new insight into the relationship between a linguistic structure and a unit of probability.,"{'title': '7.', 'number': '8'}"
"Traditionally, a unit of probability was implicitly assumed to correspond to a meaningful linguistic structure; a tagging of a word or an application of a rewriting rule.","{'title': '7.', 'number': '8'}"
"One reason for the assumption is to enable dynamic programming algorithms, such as the Viterbi algorithm.","{'title': '7.', 'number': '8'}"
The probability of a complete structure must be decomposed into atomic structures in which ambiguities are limited to a tractable size.,"{'title': '7.', 'number': '8'}"
Another reason is to estimate plausible probabilities.,"{'title': '7.', 'number': '8'}"
"Because a probability is defined over atomic structures, they should also be meaningful so as to be assigned a probability.","{'title': '7.', 'number': '8'}"
"In feature forest models, however, conjunctive nodes are responsible for the former, whereas feature functions are responsible for the latter.","{'title': '7.', 'number': '8'}"
"Although feature functions must be defined locally in conjunctive nodes, they are not necessarily equivalent.","{'title': '7.', 'number': '8'}"
"Conjunctive nodes may represent any fragments of a complete structure, which are not necessarily linguistically meaningful.","{'title': '7.', 'number': '8'}"
They should be designed to pack ambiguities and enable us to define useful features.,"{'title': '7.', 'number': '8'}"
"Meanwhile, feature functions indicate an atomic unit of probability, and are designed to capture statistical regularity of the target problem.","{'title': '7.', 'number': '8'}"
We expect the separation of a unit of probability from linguistic structures to open up a new framework for flexible probabilistic modeling.,"{'title': '7.', 'number': '8'}"
The authors wish to thank the anonymous reviewers of Computational Linguistics for their helpful comments and discussions.,"{'title': 'Acknowledgments', 'number': '9'}"
We would also like to thank Takashi Ninomiya and Kenji Sagae for their precious support.,"{'title': 'Acknowledgments', 'number': '9'}"
