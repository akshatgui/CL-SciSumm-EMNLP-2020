col1,col2
This paper describes an incremental parser and an unsupervised learning algorithm for inducing this parser from plain text.,Introduction
The parser uses a representation for syntactic structure similar to dependency links which is well-suited for incremental parsing.,Introduction
"In contrast to previous unsupervised parsers, the parser does not use part-of-speech tags and both learning and parsing are local and fast, requiring no explicit clustering or global optimization.",Introduction
The parser is evaluated by converting its output into equivalent bracketing and improves on previously published results for unsupervised parsing from plain text.,Introduction
"Grammar induction, the learning of the grammar of a language from unannotated example sentences, has long been of interest to linguists because of its relevance to language acquisition by children.",Experiment/Discussion
"In recent years, interest in unsupervised learning of grammar has also increased among computational linguists, as the difficulty and cost of constructing annotated corpora led researchers to look for ways to train parsers on unannotated text.",Experiment/Discussion
"This can either be semi-supervised parsing, using both annotated and unannotated data (McClosky et al., 2006) or unsupervised parsing, training entirely on unannotated text.",Experiment/Discussion
"The past few years have seen considerable improvement in the performance of unsupervised parsers (Klein and Manning, 2002; Klein and Manning, 2004; Bod, 2006a; Bod, 2006b) and, for the first time, unsupervised parsers have been able to improve on the right-branching heuristic for parsing English.",Experiment/Discussion
"All these parsers learn and parse from sequences of part-of-speech tags and select, for each sentence, the binary parse tree which maximizes some objective function.",Experiment/Discussion
Learning is based on global maximization of this objective function over the whole corpus.,Experiment/Discussion
In this paper I present an unsupervised parser from plain text which does not use parts-of-speech.,Experiment/Discussion
Learning is local and parsing is (locally) greedy.,Experiment/Discussion
"As a result, both learning and parsing are fast.",Experiment/Discussion
"The parser is incremental, using a new link representation for syntactic structure.",Experiment/Discussion
Incremental parsing was chosen because it considerably restricts the search space for both learning and parsing.,Experiment/Discussion
The representation the parser uses is designed for incremental parsing and allows a prefix of an utterance to be parsed before the full utterance has been read (see section 3).,Experiment/Discussion
"The representation the parser outputs can be converted into bracketing, thus allowing evaluation of the parser on standard treebanks.",Experiment/Discussion
"To achieve completely unsupervised parsing, standard unsupervised parsers, working from partof-speech sequences, need first to induce the partsof-speech for the plain text they need to parse.",Experiment/Discussion
"There are several algorithms for doing so (Sch¨utze, 1995; Clark, 2000), which cluster words into classes based on the most frequent neighbors of each word.",Experiment/Discussion
"This step becomes superfluous in the algorithm I present here: the algorithm collects lists of labels for each word, based on neighboring words, and then directly uses these labels to parse.",Experiment/Discussion
"No clustering is performed, but due to the Zipfian distribution of words, high frequency words dominate these lists and parsing decisions for words of similar distribution are guided by the same labels.",Experiment/Discussion
"Section 2 describes the syntactic representation used, section 3 describes the general parser algorithm and sections 4 and 5 complete the details by describing the learning algorithm, the lexicon it constructs and the way the parser uses this lexicon.",Experiment/Discussion
Section 6 gives experimental results.,Experiment/Discussion
The representation of syntactic structure which I introduce in this paper is based on links between pairs of words.,Experiment/Discussion
"Given an utterance and a bracketing of that utterance, shortest common cover link sets for the bracketing are defined.",Experiment/Discussion
The original bracketing can be reconstructed from any of these link sets.,Experiment/Discussion
"An utterance is a sequence of words (x1, .",Experiment/Discussion
.,Experiment/Discussion
.,Experiment/Discussion
", x,,,) and a bracket is any sub-sequence (xi,.",Experiment/Discussion
.,Experiment/Discussion
.,Experiment/Discussion
", xj) of consecutive words in the utterance.",Experiment/Discussion
"A set 13 of brackets over an utterance U is a bracketing of U if every word in U is in some bracket and for any X, Y E 13 either X n Y = 0, X C_ Y or Y C_ X (noncrossing brackets).",Experiment/Discussion
"The depth of a word x E U under a bracket B E 13 (x E B) is the maximal number of brackets X1, ... , X,,, E 13 such that x E X1 C ... C X,,, C B.",Experiment/Discussion
A word x is agenerator of depth d of B in 13 if x is of minimal depth under B (among all words in B) and that depth is d. A bracket may have more than one generator.,Experiment/Discussion
"A common cover link over an utterance U is a triple x d* y where x, y E U, x 74 y and d is a nonnegative integer.",Experiment/Discussion
"The word x is the base of the link, the word y is its head and d is the depth of the link.",Experiment/Discussion
"The common cover link set RB associated with a bracketing 13 is the set of common cover links over U such that x d* y E RB iff the word x is a generator of depth d of the smallest bracket B E 13 such that x, y E B (see figure 1(a)).",Experiment/Discussion
"Given RB, a simple algorithm reconstructs the bracketing 13: for each word x and depth 0 < d, some � Some of the links in the common cover link set are redundant.",Experiment/Discussion
The first redundancy is the result of brackets having more than one generator.,Experiment/Discussion
The bracketing reconstruction algorithm outlined above can construct a bracket from the links based at any of its generators.,Experiment/Discussion
"The bracketing 13 can therefore be reconstructed from a subset R if, for every bracket B E 13, R contains the links based at least at one generator) of B.",Experiment/Discussion
Such a set R is a representative subset of (see figure 1(b)).,Experiment/Discussion
A second redundancy in the set follows from the linear transitivity of where if there is a This property implies that longer links can be deduced from shorter links.,Experiment/Discussion
"It is, therefore, sufficient to leave only the shortest necessary links in the set.",Experiment/Discussion
Given a representative subset R of a shortest common cover link set of is constructed by removing any link which can be deduced from shorter links by linear transitivity.,Experiment/Discussion
For each representative subset R C_ this defines a unique shortest common cover link set (see figure 1(c)).,Experiment/Discussion
Given a shortest common cover link set the bracketing which it represents can be calculated by first using linear transitivity to deduce missing links and then applying the bracket reconstruction algorithm outlined above for R.U.,Experiment/Discussion
"Having defined a link-based representation of syntactic structure, it is natural to wonder what the relation is between this representation and standard dependency structures.",Experiment/Discussion
The main differences between the two representations can all be seen in figure 2.,Experiment/Discussion
The first difference is in the linking of the NP the boy.,Experiment/Discussion
"While the shortest common cover link set has an exocentric construction for this NP (that is, links going back and forth between the two words), the dependency structure forces us to decide which of the two words in the NP is its head.",Experiment/Discussion
"Considering that linguists have not been able to agree whether it is the determiner or the noun that is the head of an NP, it may be easier for a learning algorithm if it did not have to make such a choice.",Experiment/Discussion
The second difference between the structures can be seen in the link from know to sleeps.,Experiment/Discussion
"In the shortest common cover link set, there is a path of links connecting know to each of the words separating it from sleeps, while in the dependency structure no such links exist.",Experiment/Discussion
"This property, which I will refer to as adjacency plays an important role in incremental parsing, as explained in the next section.",Experiment/Discussion
The last main difference between the representations is the assignment of depth to the common cover links.,Experiment/Discussion
"In the present example, this allows us to distinguish between the attachment of the external (subject) and the internal (object) arguments of the verb.",Experiment/Discussion
Dependencies cannot capture this difference without additional labeling of the links.,Experiment/Discussion
"In what follows, I will restrict common cover links to having depth 0 or 1.",Experiment/Discussion
This restriction means that any tree represented by a shortest common cover link set will be skewed - every subtree must have a short branch.,Experiment/Discussion
It seems that this is indeed a property of the syntax of natural languages.,Experiment/Discussion
Building this restriction into the syntactic representation considerably reduces the search space for both parsing and learning.,Experiment/Discussion
"To calculate a shortest common cover link for an utterance, I will use an incremental parser.",Experiment/Discussion
"Incrementality means that the parser reads the words of the utterance one by one and, as each word is read, the parser is only allowed to add links which have one of their ends at that word.",Experiment/Discussion
Words which have not yet been read are not available to the parser at this stage.,Experiment/Discussion
"This restriction is inspired by psycholinguistic research which suggests that humans process language incrementally (Crocker et al., 2000).",Experiment/Discussion
"If the incrementality of the parser roughly resembles that of human processing, the result is a significant restriction of parser search space which does not lead to too many parsing errors.",Experiment/Discussion
The adjacency property described in the previous section makes shortest common cover link sets especially suitable for incremental parsing.,Experiment/Discussion
Consider the example given in figure 2.,Experiment/Discussion
"When the word the is read, the parser can already construct a link from know to the without worrying about the continuation of the sentence.",Experiment/Discussion
This link is part of the correct parse whether the sentence turns out to be I know the boy or I know the boy sleeps.,Experiment/Discussion
"A dependency parser, on the other hand, cannot make such a decision before the end of the sentence is reached.",Experiment/Discussion
If the sentence is I know the boy then a dependency link has to be created from know to boy while if the sentence is I know the boy sleeps then such a link is wrong.,Experiment/Discussion
"This problem is known in psycholinguistics as the problem of reanalysis (Sturt and Crocker, 1996).",Experiment/Discussion
"Assume the incremental parser is processing a prefix (x1, ... , xk) of an utterance and has already deduced a set of links L for this prefix.",Experiment/Discussion
It can now only add links which have one of their ends at xk and it may never remove any links.,Experiment/Discussion
From the definitions in section 2.2 it is possible to derive an exact characterization of the links which may be added at each step such that the resulting link set represents some bracketing.,Experiment/Discussion
It can be shown that any shortest common cover link set can be constructed incrementally under these conditions.,Experiment/Discussion
"As the full specification of these conditions is beyond the scope of this paper, I will only give the main condition, which is based on adjacency.",Experiment/Discussion
It states that a link may be added from x to y only if for every z between x and y there is a path of links (in L) from x to z but no link from z to y.,Experiment/Discussion
"In the example in figure 2 this means that when the word sleeps is first read, a link to sleeps can be created from know, the and boy but not from I.",Experiment/Discussion
"Given these conditions, the parsing process is simple.",Experiment/Discussion
"At each step, the parser calculates a nonnegative weight (section 5) for every link which may be added between the prefix hx1, ... , xk−1i and xk.",Experiment/Discussion
It then adds the link with the strongest positive weight and repeats the process (adding a link can change the set of links which may be added).,Experiment/Discussion
"When all possible links are assigned a zero weight by the parser, the parser reads the next word of the utterance and repeats the process.",Experiment/Discussion
This is a greedy algorithm which optimizes every step separately.,Experiment/Discussion
The weight function which assigns a weight to a candidate link is lexicalized: the weight is calculated based on the lexical entries of the words which are to be connected by the link.,Results/Conclusion
It is the task of the learning algorithm to learn the lexicon.,Results/Conclusion
The lexicon stores for each word x a lexical entry.,Results/Conclusion
"Each such lexical entry is a sequence of adjacency points, holding statistics relevant to the decision whether to link x to some other word.",Results/Conclusion
These statistics are given as weights assigned to labels and linking properties.,Results/Conclusion
"Each adjacency point describes a different link based at x, similar to the specification of the arguments of a word in dependency parsing.",Results/Conclusion
Let W be the set of words in the corpus.,Results/Conclusion
"The set of labels L(W) = W × {0, 1} consists of two labels based on every word w: a class label (w, 0) (denoted by [w]) and an adjacency label (w, 1) (denoted by [w ] or [ w]).",Results/Conclusion
"The two labels (w, 0) and (w, 1) are said to be opposite labels and, for l ∈ L(W), I write l−1 for the opposite of l. In addition to the labels, there is also a finite set P = {Stop, In*, In, Out} of linking properties.",Results/Conclusion
"The Stop specifies the strength of non-attachment, In and Out specify the strength of inbound and outbound links and In* is an intermediate value in the induction of inbound and outbound strengths.",Results/Conclusion
"A lexicon L is a function which assigns each word w ∈ W a lexical entry (... , Aw−2, Aw−1, Aw1 , Aw2 , ...).",Results/Conclusion
Each of the Aw i is an adjacency point.,Results/Conclusion
Each Aw i is a function Aw i : L(W) ∪ P → R which assigns each label in L(W) and each linking property in P a real valued strength.,Results/Conclusion
"For each Awi , #(Awi ) is the count of the adjacency point: the number of times the adjacency point was updated.",Results/Conclusion
"Based on this count, I also define a normalized version of Awi : Awi (l) = Awi (l)�#(Aw i ).",Results/Conclusion
"Given a sequence of training utterances (Ut)0<t, the learner constructs a sequence of lexicons (Ls)0<s beginning with the zero lexicon L0 (which assigns a zero strength to all labels and linking properties).",Results/Conclusion
"At each step, the learner uses the parsing function PL, based on the previously learned lexicon Ls to extend the parse L of an utterance Ut.",Results/Conclusion
It then uses the result of this parse step (together with the lexicon Ls) to create a new lexicon Ls+1 (it may be that Ls = Ls+1).,Results/Conclusion
This operation is a lexicon update.,Results/Conclusion
The process then continues with the new lexicon Ls+1.,Results/Conclusion
"Any of the lexicons Ls constructed by the learner may be used for parsing any utterance U, but as s increases, parsing accuracy should improve.",Results/Conclusion
This learning process is open-ended: additional training text can always be added without having to re-run the learner on previous training data.,Results/Conclusion
"To define a lexicon update, I extend the definition of an utterance to be U = h∅l, x1,... , xn, ∅ri where ∅l and ∅r are boundary markers.",Results/Conclusion
The property of adjacency can now be extended to include the boundary markers.,Results/Conclusion
A symbol α ∈ U is adjacent to a word x relative to a set of links L over U if for every word z between x and α there is a path of links in L from x to z but there is no link from z to α.,Results/Conclusion
"In the following example, the adjacencies of x1 are ∅l, x2 and x3: x1 0 > x2 x3 x4 If a link is added from x2 to x3, x4 becomes adjacent to x1 instead of x3 (the adjacencies of x1 are then 0l, x2 and x4): x1 0 > x2 0 > x3 x4 The positions in the utterance adjacent to a word x are indexed by an index i such that i < 0 to the left of x, i > 0 to the right of x and |i |increases with the distance from x.",Results/Conclusion
The parser may only add a link from a word x to a word y adjacent to x (relative to the set of links already constructed).,Results/Conclusion
"Therefore, the lexical entry of x should collect statistics about each of the adjacency positions of x.",Results/Conclusion
"As seen above, adjacency positions may move, so the learner waits until the parser completes parsing the utterance and then updates each adjacency point Axi with the symbol a at the ith adjacency position of x (relative to the parse generated by the parser).",Results/Conclusion
It should be stressed that this update does not depend on whether a link was created from x to a.,Results/Conclusion
"In particular, whatever links the parser assigns, Ax (−1) and Ax1 are always updated by the symbols which appear immediately before and after x.",Results/Conclusion
The following example should clarify the picture.,Results/Conclusion
"Consider the fragment: put 0 = the �� �� 0 box on All the links in this example, including the absence of a link from box to on, depend on adjacency points of the form Ax(−1) and Ax1 which are updated independently of any links.",Results/Conclusion
"Based on this alone and regardless of whether a link is created from put to on, Aput 2 will be updated by the word on, which is indeed the second argument of the verb put.",Results/Conclusion
"The update of Axi by a is given by operations The update of Axi by a begins by incrementing the count: #(Axi ) += 1 If a is a boundary symbol (0l or 0r) or if x and a are words separated by stopping punctuation (full stop, question mark, exclamation mark, semicolon, comma or dash): (In practice, only l = [a] and the 10 strongest labels in AαSign(−i) are updated.",Results/Conclusion
"Because of the exponential decay in the strength of labels in Aα Sign(−i), this is a good approximation.)",Results/Conclusion
"If i = −1,1 and a is not a boundary or blocked by punctuation, simple bootstrapping takes place by updating the following properties: To understand the way the labels and properties are calculated, it is best to look at an example.",Results/Conclusion
The following table gives the linking properties and strongest labels for the determiner the as learned from the complete Wall Street Journal corpus (only Athe A strong class label [w] indicates that the word w frequently appears in contexts which are similar to the.,Results/Conclusion
A strong adjacency label [w ] (or [ w]) indicates that w either frequently appears next to the or that w frequently appears in the same contexts as words which appear next to the.,Results/Conclusion
The property Stop counts the number of times a boundary appeared next to the.,Results/Conclusion
"Because the can often appear at the beginning of an utterance but must be followed by a noun or an adjective, it is not surprising that Stop is stronger than any label on the left but weaker than all labels on the right.",Results/Conclusion
"In general, it is unlikely that a word has an outbound link on the side on which its Stop strength is stronger than that of any label.",Results/Conclusion
"The opposite is not true: a label stronger than Stop indicates an attachment but this may also be the result of an inbound link, as in the following entry for to, where the strong labels on the left are a result of an inbound link: to For this reason, the learning process is based on the property •Ax i which indicates where a link is not possible.",Results/Conclusion
"Since an outbound link on one word is inbound on the other, the inbound/outbound properties of each word are then calculated by a simple bootstrapping process as an average of the opposite properties of the neighboring words.",Results/Conclusion
"At each step, the parser must assign a non-negative weight to every candidate link x � y which may d be added to an utterance prefix (x1,... , xk), and the link with the largest (non-zero) weight (with a preference for links between xk−1 and xk) is added to the parse.",Results/Conclusion
"The weight could be assigned directly based on the In and Out properties of either x or y but this method is not satisfactory for three reasons: first, the values of these properties on low frequency words are not reliable; second, the values of the properties on x and y may conflict; third, some words are ambiguous and require different linking in different contexts.",Results/Conclusion
"To solve these problems, the weight of the link is taken from the values of In and Out on the best matching label between x and y.",Results/Conclusion
This label depends on both words and is usually a frequent word with reliable statistics.,Results/Conclusion
It serves as a prototype for the relation between x and y.,Results/Conclusion
"A label l is a matching label between Ax i and AySign(−i) if Axi(l) > Axi (Stop) and either l = (y, 1) or AySign(−i)(l−1) > 0.",Results/Conclusion
"The best matching label at Axi is the matching label l such that the match strength min(�Axi (l), �AySign(−i)(l−1)) is maximal (if l = (y, 1) then �AySign(−i)(l−1) is defined to be 1).",Results/Conclusion
"In practice, as before, only the top 10 labels in Axi and AySign(−i) are considered.",Results/Conclusion
The best matching label from x to y is calculated between Axi and AySign(−i) such that Axi is on the same side of x as y and was either already used to create a link or is the first adjacency point on that side of x which was not yet used.,Results/Conclusion
"This means that the adjacency points on each side have to be used one by one, but may be used more than once.",Results/Conclusion
The reason is that optional arguments of x usually do not have an adjacency point of their own but have the same labels as obligatory arguments of x and can share their adjacency point.,Results/Conclusion
"The Axi with the strongest matching label is selected, with a preference for the unused adjacency point.",Results/Conclusion
"As in the learning process, label matching is blocked between words which are separated by stopping punctuation.",Results/Conclusion
"The best matching label l = (w, S) from x to y can be either a class (S = 0) or an adjacency (S = 1) label at Axi .",Results/Conclusion
"If it is a class label, w can be seen as taking the place of x and all words separating it from y (which are already linked to x).",Results/Conclusion
"If l is an adjacency label, w can be seen to take the place of y.",Results/Conclusion
"The calculation of the weight Wt(x *d y) of the link from x to y is therefore based on the strengths of the In and Out properties of Awσ where Q = Sign(i) if l = (w, 0) and Q = Sign(−i) if l = (w, 1).",Results/Conclusion
"In addition, the weight is bounded from above by the best label match strength, s(l): Wt(x �y) = min(s(l), AQ (In*)) where if AQ (In*) < 0 and AQ (Out) < 0 then d = 1 and otherwise d = 0. y inside the smallest bracket covering x.",Results/Conclusion
"Such links are therefore created in the second case above, when the attachment indication is mixed.",Results/Conclusion
"To explain the third case, recall that s(l) > 0 means that the label l is stronger than Stop on AZ .",Results/Conclusion
This implies a link unless the properties of w block it.,Results/Conclusion
One way in which w can block the link is to have a positive strength for the link in the opposite direction.,Results/Conclusion
"Another way in which the properties of w can block the link is if l = (w, 0) and AQ (Out) < 0, that is, if the learning process has explicitly determined that no outbound link from w (which represents x in this case) is possible.",Results/Conclusion
"The same conclusion cannot be drawn from a negative value for the In property when l = (w, 1) because, as with standard dependencies, a word determines its outbound links much more strongly than its inbound links.",Results/Conclusion
