col1,col2
"We describe a novel method for the task of unsupervised POS tagging with a dictionary, one that uses integer programming to explicitly search for the smallest model that explains the data, and then uses EM to set parameter values.",{}
"We evaluate our method on a standard test corpus using different standard tagsets (a 45-tagset as well as a smaller 17-tagset), and show that our approach performs better than existing state-of-the-art systems in both settings.",{}
"In recent years, we have seen increased interest in using unsupervised methods for attacking different NLP tasks like part-of-speech (POS) tagging.","{'title': '1 Introduction', 'number': '1'}"
"The classic Expectation Maximization (EM) algorithm has been shown to perform poorly on POS tagging, when compared to other techniques, such as Bayesian methods.","{'title': '1 Introduction', 'number': '1'}"
"In this paper, we develop new methods for unsupervised part-of-speech tagging.","{'title': '1 Introduction', 'number': '1'}"
"We adopt the problem formulation of Merialdo (1994), in which we are given a raw word sequence and a dictionary of legal tags for each word type.","{'title': '1 Introduction', 'number': '1'}"
The goal is to tag each word token so as to maximize accuracy against a gold tag sequence.,"{'title': '1 Introduction', 'number': '1'}"
"Whether this is a realistic problem set-up is arguable, but an interesting collection of methods and results has accumulated around it, and these can be clearly compared with one another.","{'title': '1 Introduction', 'number': '1'}"
"We use the standard test set for this task, a 24,115-word subset of the Penn Treebank, for which a gold tag sequence is available.","{'title': '1 Introduction', 'number': '1'}"
"There are 5,878 word types in this test set.","{'title': '1 Introduction', 'number': '1'}"
"We use the standard tag dictionary, consisting of 57,388 word/tag pairs derived from the entire Penn Treebank.1 8,910 dictionary entries are relevant to the 5,878 word types in the test set.","{'title': '1 Introduction', 'number': '1'}"
"Per-token ambiguity is about 1.5 tags/token, yielding approximately 106425 possible ways to tag the data.","{'title': '1 Introduction', 'number': '1'}"
There are 45 distinct grammatical tags.,"{'title': '1 Introduction', 'number': '1'}"
"In this set-up, there are no unknown words.","{'title': '1 Introduction', 'number': '1'}"
Figure 1 shows prior results for this problem.,"{'title': '1 Introduction', 'number': '1'}"
"While the methods are quite different, they all make use of two common model elements.","{'title': '1 Introduction', 'number': '1'}"
"One is a probabilistic n-gram tag model P(ti|ti−n+1...ti−1), which we call the grammar.","{'title': '1 Introduction', 'number': '1'}"
"The other is a probabilistic word-given-tag model P(wi|ti), which we call the dictionary.","{'title': '1 Introduction', 'number': '1'}"
"The classic approach (Merialdo, 1994) is expectation-maximization (EM), where we estimate grammar and dictionary probabilities in order to maximize the probability of the observed word sequence: Goldwater and Griffiths (2007) report 74.5% accuracy for EM with a 3-gram tag model, which we confirm by replication.","{'title': '1 Introduction', 'number': '1'}"
"They improve this to 83.9% by employing a fully Bayesian approach which integrates over all possible parameter values, rather than estimating a single distribution.","{'title': '1 Introduction', 'number': '1'}"
They further improve this to 86.8% by using priors that favor sparse distributions.,"{'title': '1 Introduction', 'number': '1'}"
"Smith and Eisner (2005) employ a contrastive estimation technique, in which they automatically generate negative examples and use CRF training.","{'title': '1 Introduction', 'number': '1'}"
"In more recent work, Toutanova and Johnson (2008) propose a Bayesian LDA-based generative model that in addition to using sparse priors, explicitly groups words into ambiguity classes.","{'title': '1 Introduction', 'number': '1'}"
They show considerable improvements in tagging accuracy when using a coarser-grained version (with 17-tags) of the tag set from the Penn Treebank.,"{'title': '1 Introduction', 'number': '1'}"
"Goldberg et al. (2008) depart from the Bayesian framework and show how EM can be used to learn good POS taggers for Hebrew and English, when provided with good initial conditions.","{'title': '1 Introduction', 'number': '1'}"
"They use language specific information (like word contexts, syntax and morphology) for learning initial P(t|w) distributions and also use linguistic knowledge to apply constraints on the tag sequences allowed by their models (e.g., the tag sequence “V V” is disallowed).","{'title': '1 Introduction', 'number': '1'}"
"Also, they make other manual adjustments to reduce noise from the word/tag dictionary (e.g., reducing the number of tags for “the” from six to just one).","{'title': '1 Introduction', 'number': '1'}"
"In contrast, we keep all the original dictionary entries derived from the Penn Treebank data for our experiments.","{'title': '1 Introduction', 'number': '1'}"
"The literature omits one other baseline, which is EM with a 2-gram tag model.","{'title': '1 Introduction', 'number': '1'}"
"Here we obtain 81.7% accuracy, which is better than the 3-gram model.","{'title': '1 Introduction', 'number': '1'}"
It seems that EM with a 3-gram tag model runs amok with its freedom.,"{'title': '1 Introduction', 'number': '1'}"
"For the rest of this paper, we will limit ourselves to a 2-gram tag model.","{'title': '1 Introduction', 'number': '1'}"
We analyze the tag sequence output produced by EM and try to see where EM goes wrong.,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
"The overall POS tag distribution learnt by EM is relatively uniform, as noted by Johnson (2007), and it tends to assign equal number of tokens to each tag label whereas the real tag distribution is highly skewed.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
The Bayesian methods overcome this effect by using priors which favor sparser distributions.,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
But it is not easy to model such priors into EM learning.,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
"As a result, EM exploits a lot of rare tags (like FW = foreign word, or SYM = symbol) and assigns them to common word types (in, of, etc.).","{'title': '2 What goes wrong with EM?', 'number': '2'}"
We can compare the tag assignments from the gold tagging and the EM tagging (Viterbi tag sequence).,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
The table below shows tag assignments (and their counts in parentheses) for a few word types which occur frequently in the test corpus.,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
"We see how the rare tag labels (like FW, SYM, etc.) are abused by EM.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
"As a result, many word tokens which occur very frequently in the corpus are incorrectly tagged with rare tags in the EM tagging output.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
We also look at things more globally.,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
We investigate the Viterbi tag sequence generated by EM training and count how many distinct tag bigrams there are in that sequence.,"{'title': '2 What goes wrong with EM?', 'number': '2'}"
"We call this the observed grammar size, and it is 915.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
"That is, in tagging the 24,115 test tokens, EM uses 915 of the available 45 x 45 = 2025 tag bigrams.2 The advantage of the observed grammar size is that we sequence.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
"Here, we show a sample word sequence and the corresponding IP network generated for that sequence. can compare it with the gold tagging’s observed grammar size, which is 760.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
"So we can safely say that EM is learning a grammar that is too big, still abusing its freedom.","{'title': '2 What goes wrong with EM?', 'number': '2'}"
Bayesian sparse priors aim to create small models.,"{'title': '3 Small Models', 'number': '3'}"
We take a different tack in the paper and directly ask: What is the smallest model that explains the text?,"{'title': '3 Small Models', 'number': '3'}"
Our approach is related to minimum description length (MDL).,"{'title': '3 Small Models', 'number': '3'}"
We formulate our question precisely by asking which tag sequence (of the 106425 available) has the smallest observed grammar size.,"{'title': '3 Small Models', 'number': '3'}"
The answer is 459.,"{'title': '3 Small Models', 'number': '3'}"
"That is, there exists a tag sequence that contains 459 distinct tag bigrams, and no other tag sequence contains fewer.","{'title': '3 Small Models', 'number': '3'}"
We obtain this answer by formulating the problem in an integer programming (IP) framework.,"{'title': '3 Small Models', 'number': '3'}"
Figure 2 illustrates this with a small sample word sequence.,"{'title': '3 Small Models', 'number': '3'}"
"We create a network of possible taggings, and we assign a binary variable to each link in the network.","{'title': '3 Small Models', 'number': '3'}"
"We create constraints to ensure that those link variables receiving a value of 1 form a left-to-right path through the tagging network, and that all other link variables receive a value of 0.","{'title': '3 Small Models', 'number': '3'}"
We accomplish this by requiring the sum of the links entering each node to equal to the sum of the links leaving each node.,"{'title': '3 Small Models', 'number': '3'}"
We also create variables for every possible tag bigram and word/tag dictionary entry.,"{'title': '3 Small Models', 'number': '3'}"
We constrain link variable assignments to respect those grammar and dictionary variables.,"{'title': '3 Small Models', 'number': '3'}"
"For example, we do not allow a link variable to “activate” unless the corresponding grammar variable is also “activated”.","{'title': '3 Small Models', 'number': '3'}"
"Finally, we add an objective function that minimizes the number of grammar variables that are assigned a value of 1.","{'title': '3 Small Models', 'number': '3'}"
Figure 3 shows the IP solution for the example word sequence from Figure 2.,"{'title': '3 Small Models', 'number': '3'}"
"Of course, a small grammar size does not necessarily correlate with higher tagging accuracy.","{'title': '3 Small Models', 'number': '3'}"
"For the small toy example shown in Figure 3, the correct tagging is “PRO AUX V .","{'title': '3 Small Models', 'number': '3'}"
"PRO V” (with 5 tag pairs), whereas the IP tries to minimize the grammar size and picks another solution instead.","{'title': '3 Small Models', 'number': '3'}"
"For solving the integer program, we use CPLEX software (a commercial IP solver package).","{'title': '3 Small Models', 'number': '3'}"
"Alternatively, there are other programs such as lp solve, which are free and publicly available for use.","{'title': '3 Small Models', 'number': '3'}"
"Once we create an integer program for the full test corpus, and pass it to CPLEX, the solver returns an sponding grammar sizes for the sample word sequence from Figure 2 using the given dictionary and grammar.","{'title': '3 Small Models', 'number': '3'}"
The IP solver finds the smallest grammar set that can explain the given word sequence.,"{'title': '3 Small Models', 'number': '3'}"
"In this example, there exist two solutions that each contain only 4 tag pair entries, and IP returns one of them. objective function value of 459.3 CPLEX also returns a tag sequence via assignments to the link variables.","{'title': '3 Small Models', 'number': '3'}"
"However, there are actually 104378 tag sequences compatible with the 459-sized grammar, and our IP solver just selects one at random.","{'title': '3 Small Models', 'number': '3'}"
"We find that of all those tag sequences, the worst gives an accuracy of 50.8%, and the best gives an accuracy of 90.3%.","{'title': '3 Small Models', 'number': '3'}"
"We also note that CPLEX takes 320 seconds to return the optimal solution for the integer program corresponding to this particular test data (24,115 tokens with the 45-tag set).","{'title': '3 Small Models', 'number': '3'}"
It might be interesting to see how the performance of the IP method (in terms of time complexity) is affected when scaling up to larger data and bigger tagsets.,"{'title': '3 Small Models', 'number': '3'}"
We leave this as part of future work.,"{'title': '3 Small Models', 'number': '3'}"
But we do note that it is possible to obtain less than optimal solutions faster by interrupting the CPLEX solver.,"{'title': '3 Small Models', 'number': '3'}"
"Our IP formulation can find us a small model, but it does not attempt to fit the model to the data.","{'title': '4 Fitting the Model', 'number': '4'}"
"Fortunately, we can use EM for that.","{'title': '4 Fitting the Model', 'number': '4'}"
"We still give EM the full word/tag dictionary, but now we constrain its initial grammar model to the 459 tag bigrams identified by IP.","{'title': '4 Fitting the Model', 'number': '4'}"
"Starting with uniform probabilities, EM finds a tagging that is 84.5% accurate, substantially better than the 81.7% originally obtained with the fully-connected grammar.","{'title': '4 Fitting the Model', 'number': '4'}"
So we see a benefit to our explicit small-model approach.,"{'title': '4 Fitting the Model', 'number': '4'}"
While EM does not find the most accurate 3Note that the grammar identified by IP is not uniquely minimal.,"{'title': '4 Fitting the Model', 'number': '4'}"
"For the same word sequence, there exist other minimal grammars having the same size (459 entries).","{'title': '4 Fitting the Model', 'number': '4'}"
"In our experiments, we choose the first solution returned by CPLEX. sequence consistent with the IP grammar (90.3%), it finds a relatively good one.","{'title': '4 Fitting the Model', 'number': '4'}"
The IP+EM tagging (with 84.5% accuracy) has some interesting properties.,"{'title': '4 Fitting the Model', 'number': '4'}"
"First, the dictionary we observe from the tagging is of higher quality (with fewer spurious tagging assignments) than the one we observe from the original EM tagging.","{'title': '4 Fitting the Model', 'number': '4'}"
Figure 4 shows some examples.,"{'title': '4 Fitting the Model', 'number': '4'}"
We also measure the quality of the two observed grammars/dictionaries by computing their precision and recall against the grammar/dictionary we observe in the gold tagging.4 We find that precision of the observed grammar increases from 0.73 (EM) to 0.94 (IP+EM).,"{'title': '4 Fitting the Model', 'number': '4'}"
"In addition to removing many bad tag bigrams from the grammar, IP minimization also removes some of the good ones, leading to lower recall (EM = 0.87, IP+EM = 0.57).","{'title': '4 Fitting the Model', 'number': '4'}"
"In the case of the observed dictionary, using a smaller grammar model does not affect the precision (EM = 0.91, IP+EM = 0.89) or recall (EM = 0.89, IP+EM = 0.89).","{'title': '4 Fitting the Model', 'number': '4'}"
"During EM training, the smaller grammar with fewer bad tag bigrams helps to restrict the dictionary model from making too many bad choices that EM made earlier.","{'title': '4 Fitting the Model', 'number': '4'}"
"Here are a few examples of bad dictionary entries that get removed when we use the minimized grammar for EM training: in FW a SYM of RP In RBR During EM training, the minimized grammar helps to eliminate many incorrect entries (i.e., zero out model parameters) from the dictionary, thereby yielding an improved dictionary model.","{'title': '4 Fitting the Model', 'number': '4'}"
So using the minimized grammar (which has higher precision) helps to improve the quality of the chosen dictionary (examples shown in Figure 4).,"{'title': '4 Fitting the Model', 'number': '4'}"
This in turn helps improve the tagging accuracy from 81.7% to 84.5%.,"{'title': '4 Fitting the Model', 'number': '4'}"
It is clear that the IP-constrained grammar is a better choice to run EM on than the full grammar.,"{'title': '4 Fitting the Model', 'number': '4'}"
Note that we used a very small IP-grammar (containing only 459 tag bigrams) during EM training.,"{'title': '4 Fitting the Model', 'number': '4'}"
"In the process of minimizing the grammar size, IP ends up removing many good tag bigrams from our grammar set (as seen from the low measured recall of 0.57 for the observed grammar).","{'title': '4 Fitting the Model', 'number': '4'}"
"Next, we proceed to recover some good tag bigrams and expand the grammar in a restricted fashion by making use of the higher-quality dictionary produced by the IP+EM method.","{'title': '4 Fitting the Model', 'number': '4'}"
We now run EM again on the full grammar (all possible tag bigrams) in combination with this good dictionary (containing fewer entries than the full dictionary).,"{'title': '4 Fitting the Model', 'number': '4'}"
"Unlike the original training with full grammar, where EM could choose any tag bigram, now the choice of grammar entries is constrained by the good dictionary model that we provide EM with.","{'title': '4 Fitting the Model', 'number': '4'}"
"This allows EM to recover some of the good tag pairs, and results in a good grammardictionary combination that yields better tagging performance.","{'title': '4 Fitting the Model', 'number': '4'}"
"With these improvements in mind, we embark on an alternating scheme to find better models and taggings.","{'title': '4 Fitting the Model', 'number': '4'}"
"We run EM for multiple passes, and in each pass we alternately constrain either the grammar model or the dictionary model.","{'title': '4 Fitting the Model', 'number': '4'}"
The procedure is simple and proceeds as follows: We notice significant gains in tagging performance when applying this technique.,"{'title': '4 Fitting the Model', 'number': '4'}"
"The tagging accuracy increases at each step and finally settles at a high of 91.6%, which outperforms the existing state-of-the-art systems for the 45-tag set.","{'title': '4 Fitting the Model', 'number': '4'}"
"The system achieves a better accuracy than the 88.6% from Smith and Eisner (2005), and even surpasses the 91.4% achieved by Goldberg et al. (2008) without using any additional linguistic constraints or manual cleaning of the dictionary.","{'title': '4 Fitting the Model', 'number': '4'}"
Figure 5 shows the tagging performance achieved at each step.,"{'title': '4 Fitting the Model', 'number': '4'}"
"We found that it is the elimination of incorrect entries from the dictionary (and grammar) and not necessarily the initialization weights from previous EM training, that results in the tagging improvements.","{'title': '4 Fitting the Model', 'number': '4'}"
Initializing the last trained dictionary or grammar at each step with uniform weights also yields the same tagging improvements as shown in Figure 5.,"{'title': '4 Fitting the Model', 'number': '4'}"
"We find that the observed grammar also improves, growing from 459 entries to 603 entries, with precision increasing from 0.94 to 0.96, and recall increasing from 0.57 to 0.76.","{'title': '4 Fitting the Model', 'number': '4'}"
The figure also shows the model’s internal grammar and dictionary sizes.,"{'title': '4 Fitting the Model', 'number': '4'}"
Figure 6 and 7 show how the precision/recall of the observed grammar and dictionary varies for different models from Figure 5.,"{'title': '4 Fitting the Model', 'number': '4'}"
"In the case of the observed grammar (Figure 6), precision increases at each step, whereas recall drops initially (owing to the grammar minimization) but then picks up again.","{'title': '4 Fitting the Model', 'number': '4'}"
"The precision/recall of the observed dictionary on the other hand, is not affected by much.","{'title': '4 Fitting the Model', 'number': '4'}"
"Multiple random restarts for EM, while not often emphasized in the literature, are key in this domain.","{'title': '5 Restarts and More Data', 'number': '5'}"
Recall that our original EM tagging with a fully-connected 2-gram tag model was 81.7% accurate.,"{'title': '5 Restarts and More Data', 'number': '5'}"
"When we execute 100 random restarts and select the model with the highest data likelihood, we get 83.8% accuracy.","{'title': '5 Restarts and More Data', 'number': '5'}"
"Likewise, when we extend our alternating EM scheme to 100 random restarts at each step, we improve our tagging accuracy from 91.6% to 91.8% (Figure 8).","{'title': '5 Restarts and More Data', 'number': '5'}"
"As noted by Toutanova and Johnson (2008), there is no reason to limit the amount of unlabeled data used for training the models.","{'title': '5 Restarts and More Data', 'number': '5'}"
"Their models are trained on the entire Penn Treebank data (instead of using only the 24,115-token test data), and so are the tagging models used by Goldberg et al. (2008).","{'title': '5 Restarts and More Data', 'number': '5'}"
But previous results from Smith and Eisner (2005) and Goldwater and Griffiths (2007) show that their models do not benefit from using more unlabeled training data.,"{'title': '5 Restarts and More Data', 'number': '5'}"
"Because EM is efficient, we can extend our word-sequence trainModel 1 Model 2 Model 3 Model 4 Model 5 ing data from the 24,115-token set to the entire Penn Treebank (973k tokens).","{'title': '5 Restarts and More Data', 'number': '5'}"
"We run EM training again for Model 5 (the best model from Figure 5) but this time using 973k word tokens, and further increase our accuracy to 92.3%.","{'title': '5 Restarts and More Data', 'number': '5'}"
"This is our final result on the 45-tagset, and we note that it is higher than previously reported results.","{'title': '5 Restarts and More Data', 'number': '5'}"
"Previously, researchers working on this task have also reported results for unsupervised tagging with a smaller tagset (Smith and Eisner, 2005; Goldwater and Griffiths, 2007; Toutanova and Johnson, 2008; Goldberg et al., 2008).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
Their systems were shown to obtain considerable improvements in accuracy when using a 17-tagset (a coarsergrained version of the tag labels from the Penn Treebank) instead of the 45-tagset.,"{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"When tagging the same standard test corpus with the smaller 17-tagset, our method is able to achieve a substantially high accuracy of 96.8%, which is the best result reported so far on this task.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The table in Figure 9 shows a comparison of different systems for which tagging accuracies have been reported previously for the 17-tagset case (Goldberg et al., 2008).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The first row in the table compares tagging results when using a full dictionary (i.e., a lexicon containing entries for 49,206 word types).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The InitEM-HMM system from Goldberg et al. (2008) reports an accuracy of 93.8%, followed by the LDA+AC model (Latent Dirichlet Allocation model with a strong Ambiguity Class component) from Toutanova and Johnson (2008).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"In comparison, the Bayesian HMM (BHMM) model from Goldwater et al. (2007) and the CE+spl model (Contrastive Estimation with a spelling model) from Smith and Eisner (2005) report lower accuracies (87.3% and 88.7%, respectively).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"Our system (IP+EM) which uses integer programming and EM, gets the highest accuracy (96.8%).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
The accuracy numbers reported for Init-HMM and LDA+AC are for models that are trained on all the available unlabeled data from the Penn Treebank.,"{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The IP+EM models used in the 17-tagset experiments reported here were not trained on the entire Penn Treebank, but instead used a smaller section containing 77,963 tokens for estimating model parameters.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"We also include the accuracies for our IP+EM model when using only the 24,115 token test corpus for EM estimation (shown within parenthesis in second column of the table in Figure 9).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"We find that our performance does not degrade when the parameter estimation is done using less data, and our model still achieves a high accuracy of 96.8%.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
The literature also includes results reported in a different setting for the tagging problem.,"{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"In some scenarios, a complete dictionary with entries for all word types may not be readily available to us and instead, we might be provided with an incomplete dictionary that contains entries for only frequent word types.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"In such cases, any word not appearing in the dictionary will be treated as an unknown word, and can be labeled with any of the tags from given tagset (i.e., for every unknown word, there are 17 tag possibilities).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"Some previous approaches (Toutanova and Johnson, 2008; Goldberg et al., 2008) handle unknown words explicitly using ambiguity class components conditioned on various morphological features, and this has shown to produce good tagging results, especially when dealing with incomplete dictionaries.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"We follow a simple approach using just one of the features used in (Toutanova and Johnson, 2008) for assigning tag possibilities to every unknown word.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
We first identify the top-100 suffixes (up to 3 characters) for words in the dictionary.,"{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"Using the word/tag pairs from the dictionary, we train a simple probabilistic model that predicts the tag given a particular suffix (e.g., P(VBG I ing) = 0.97, P(N I ing) = 0.0001, ...).","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"Next, for every unknown word “w”, the trained P(tag I suffix) model is used to predict the top 3 tag possibilities for “w” (using only its suffix information), and subsequently this word along with its 3 tags are added as a new entry to the lexicon.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"We do this for every unknown word, and eventually we have a dictionary containing entries for all the words.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"Once the completed lexicon (containing both correct entries for words in the lexicon and the predicted entries for unknown words) is available, we follow the same methodology from Sections 3 and 4 using integer programming to minimize the size of the grammar and then applying EM to estimate parameter values.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
Figure 9 shows comparative results for the 17tagset case when the dictionary is incomplete.,"{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The second and third rows in the table shows tagging accuracies for different systems when a cutoff of 2 (i.e., all word types that occur with frequency counts < 2 in the test corpus are removed) and a cutoff of 3 (i.e., all word types occurring with frequency counts < 3 in the test corpus are removed) is applied to the dictionary.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"This yields lexicons containing 2,141 and 1,249 words respectively, which are much smaller compared to the original 49,206 word dictionary.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"As the results in Figure 9 illustrate, the IP+EM method clearly does better than all the other systems except for the LDA+AC model.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The LDA+AC model from Toutanova and Johnson (2008) has a strong ambiguity class component and uses more features to handle the unknown words better, and this contributes to the slightly higher performance in the incomplete dictionary cases, when compared to the IP+EM model.","{'title': '6 Smaller Tagset and Incomplete Dictionaries', 'number': '6'}"
"The method proposed in this paper is simple— once an integer program is produced, there are solvers available which directly give us the solution.","{'title': '7 Discussion', 'number': '7'}"
"In addition, we do not require any complex parameter estimation techniques; we train our models using simple EM, which proves to be efficient for this task.","{'title': '7 Discussion', 'number': '7'}"
"While some previous methods introduced for the same task have achieved big tagging improvements using additional linguistic knowledge or manual supervision, our models are not provided with any additional information.","{'title': '7 Discussion', 'number': '7'}"
Figure 10 illustrates for the 45-tag set some of the common mistakes that our best tagging model (92.3%) makes.,"{'title': '7 Discussion', 'number': '7'}"
"In some cases, the model actually gets a reasonable tagging but is penalized perhaps unfairly.","{'title': '7 Discussion', 'number': '7'}"
"For example, “to” is tagged as IN by our model sometimes when it occurs in the context of a preposition, whereas in the gold tagging it is always tagged as TO.","{'title': '7 Discussion', 'number': '7'}"
"The model also gets penalized for tagging the word “U.S.” as an adjective (JJ), which might be considered valid in some cases such as “the U.S. State Department”.","{'title': '7 Discussion', 'number': '7'}"
"In other cases, the model clearly produces incorrect tags (e.g., “New” gets tagged incorrectly as NNPS).","{'title': '7 Discussion', 'number': '7'}"
"Our method resembles the classic Minimum Description Length (MDL) approach for model selection (Barron et al., 1998).","{'title': '7 Discussion', 'number': '7'}"
"In MDL, there is a single objective function to (1) maximize the likelihood of observing the data, and at the same time (2) minimize the length of the model description (which depends on the model size).","{'title': '7 Discussion', 'number': '7'}"
"However, the search procedure for MDL is usually non-trivial, and for our task of unsupervised tagging, we have not found a direct objective function which we can optimize and produce good tagging results.","{'title': '7 Discussion', 'number': '7'}"
"In the past, only a few approaches utilizing MDL have been shown to work for natural language applications.","{'title': '7 Discussion', 'number': '7'}"
"These approaches employ heuristic search methods with MDL for the task of unsupervised learning of morphology of natural languages (Goldsmith, 2001; Creutz and Lagus, 2002; Creutz and Lagus, 2005).","{'title': '7 Discussion', 'number': '7'}"
"The method proposed in this paper is the first application of the MDL idea to POS tagging, and the first to use an integer programming formulation rather than heuristic search techniques.","{'title': '7 Discussion', 'number': '7'}"
"We also note that it might be possible to replicate our models in a Bayesian framework similar to that proposed in (Goldwater and Griffiths, 2007).","{'title': '7 Discussion', 'number': '7'}"
We presented a novel method for attacking dictionary-based unsupervised part-of-speech tagging.,"{'title': '8 Conclusion', 'number': '8'}"
Our method achieves a very high accuracy (92.3%) on the 45-tagset and a higher (96.8%) accuracy on a smaller 17-tagset.,"{'title': '8 Conclusion', 'number': '8'}"
"The method works by explicitly minimizing the grammar size using integer programming, and then using EM to estimate parameter values.","{'title': '8 Conclusion', 'number': '8'}"
"The entire process is fully automated and yields better performance than any existing state-of-the-art system, even though our models were not provided with any additional linguistic knowledge (for example, explicit syntactic constraints to avoid certain tag combinations such as “V V”, etc.).","{'title': '8 Conclusion', 'number': '8'}"
"However, it is easy to model some of these linguistic constraints (both at the local and global levels) directly using integer programming, and this may result in further improvements and lead to new possibilities for future research.","{'title': '8 Conclusion', 'number': '8'}"
"For direct comparison to previous works, we also presented results for the case when the dictionaries are incomplete and find the performance of our system to be comparable with current best results reported for the same task.","{'title': '8 Conclusion', 'number': '8'}"
