col1,col2
We present a novel deterministic dependency parsing algorithm that attempts to create the easiest arcs in the dependency structure first in a non-directional manner.,Introduction
"Traditional deterministic parsing algorithms are based on a shift-reduce framework: they traverse the sentence from left-to-right and, at each step, perform one of a possible set of actions, until a complete tree is built.",Introduction
"A drawback of this approach is that it is extremely local: while decisions can be based on complex structures on the left, they can look only at a few words to the right.",Introduction
"In contrast, our algorithm builds a dependency tree by iteratively selecting the best pair of neighbours to connect at each parsing step.",Introduction
This allows incorporation of features from already built structures both to the left and to the right of the attachment point.,Introduction
The parser learns both the attachment preferences and the order in which they should be performed.,Introduction
"The result is a determinbest-first, which is significantly more accurate than best-first transition based parsers, and nears the performance of globally optimized parsing models.",Introduction
Dependency parsing has been a topic of active research in natural language processing in the last several years.,Experiment/Discussion
"An important part of this research effort are the CoNLL 2006 and 2007 shared tasks (Buchholz and Marsi, 2006; Nivre et al., 2007), which allowed for a comparison of many algorithms and approaches for this task on many languages.",Experiment/Discussion
"Current dependency parsers can be categorized into three families: local-and-greedy transitionbased parsers (e.g., MALTPARSER (Nivre et al., 2006)), globally optimized graph-based parsers (e.g., MSTPARSER (McDonald et al., 2005)), and hybrid systems (e.g., (Sagae and Lavie, 2006b; Nivre and McDonald, 2008)), which combine the output of various parsers into a new and improved parse, and which are orthogonal to our approach.",Experiment/Discussion
"Transition-based parsers scan the input from left to right, are fast (O(n)), and can make use of rich feature sets, which are based on all the previously derived structures.",Experiment/Discussion
"However, all of their decisions are very local, and the strict left-to-right order implies that, while the feature set can use rich structural information from the left of the current attachment point, it is also very restricted in information to the right of the attachment point: traditionally, only the next two or three input tokens are available to the parser.",Experiment/Discussion
"This limited look-ahead window leads to error propagation and worse performance on root and long distant dependencies relative to graphbased parsers (McDonald and Nivre, 2007).",Experiment/Discussion
"Graph-based parsers, on the other hand, are globally optimized.",Experiment/Discussion
"They perform an exhaustive search over all possible parse trees for a sentence, and find the highest scoring tree.",Experiment/Discussion
"In order to make the search tractable, the feature set needs to be restricted to features over single edges (first-order models) or edges pairs (higher-order models, e.g.",Experiment/Discussion
"(McDonald and Pereira, 2006; Carreras, 2007)).",Experiment/Discussion
"There are several attempts at incorporating arbitrary tree-based features but these involve either solving an ILP problem (Riedel and Clarke, 2006) or using computationally intensive sampling-based methods (Nakagawa, 2007).",Experiment/Discussion
"As a result, these models, while accurate, are slow (O(n3) for projective, first-order models, higher polynomials for higher-order models, and worse for richer tree-feature models).",Experiment/Discussion
"We propose a new category of dependency parsing algorithms, inspired by (Shen et al., 2007): nondirectional easy-first parsing.",Experiment/Discussion
"This is a greedy, deterministic parsing approach, which relaxes the leftto-right processing order of transition-based parsing algorithms.",Experiment/Discussion
"By doing so, we allow the explicit incorporation of rich structural features derived from both sides of the attachment point, and implicitly take into account the entire previously derived structure of the whole sentence.",Experiment/Discussion
"This extension allows the incorporation of much richer features than those available to transition- and especially to graph-based parsers, and greatly reduces the locality of transition-based algorithm decisions.",Experiment/Discussion
"On the other hand, it is still a greedy, best-first algorithm leading to an efficient implementation.",Experiment/Discussion
"We present a concrete O(nlogn) parsing algorithm, which significantly outperforms state-of-theart transition-based parsers, while closing the gap to graph-based parsers.",Experiment/Discussion
"When humans comprehend a natural language sentence, they arguably do it in an incremental, left-toright manner.",Experiment/Discussion
"However, when humans consciously annotate a sentence with syntactic structure, they hardly ever work in fixed left-to-right order.",Experiment/Discussion
"Rather, they start by building several isolated constituents by making easy and local attachment decisions and only then combine these constituents into bigger constituents, jumping back-and-forth over the sentence and proceeding from easy to harder phenomena to analyze.",Experiment/Discussion
"When getting to the harder decisions a lot of structure is already in place, and this structure can be used in deciding a correct attachment.",Experiment/Discussion
"Our parser follows a similar kind of annotation process: starting from easy attachment decisions, and proceeding to harder and harder ones.",Experiment/Discussion
"When making later decisions, the parser has access to the entire structure built in earlier stages.",Experiment/Discussion
"During the training process, the parser learns its own notion of easy and hard, and learns to defer specific kinds of decisions until more structure is available.",Experiment/Discussion
"Our (projective) parsing algorithm builds the parse tree bottom up, using two kinds of actions: ATTACHLEFT(i) and ATTACHRIGHT(i) .",Experiment/Discussion
"These actions are applied to a list of partial structures p1, ... , pk, called pending, which is initialized with the n words of the sentence w1, ... , wn.",Experiment/Discussion
"Each action connects the heads of two neighbouring structures, making one of them the parent of the other, and removing the daughter from the list of partial structures.",Experiment/Discussion
"ATTACHLEFT(i) adds a dependency edge (pi, pi+1) and removes pi+1 from the list.",Experiment/Discussion
"ATTACHRIGHT(i) adds a dependency edge (pi+1, pi) and removes pi from the list.",Experiment/Discussion
"Each action shortens the list of partial structures by 1, and after n−1 such actions, the list contains the root of a connected projective tree over the sentence.",Experiment/Discussion
Figure 1 shows an example of parsing the sentence “a brown fox jumped with joy”.,Experiment/Discussion
The pseudocode of the algorithm is given in Algorithm 1.,Experiment/Discussion
"At each step the algorithm chooses a specific action/location pair using a function score(ACTION(i)), which assign scores to action/location pairs based on the partially built structures headed by pi and pi+1, as well as neighbouring structures.",Experiment/Discussion
The score() function is learned from data.,Experiment/Discussion
"This scoring function reflects not only the correctness of an attachment, but also the order in which attachments should be made.",Experiment/Discussion
"For example, consider the attachments (brown,fox) and (joy,with) in Figure (1.1).",Experiment/Discussion
"While both are correct, the scoring function prefers the (adjective,noun) attachment over the (prep,noun) attachment.",Experiment/Discussion
"Moreover, the attachment (jumped,with), while correct, receives a negative score for the bare preposition “with” (Fig.",Experiment/Discussion
"(1.1) - (1.4) ), and a high score once the verb has its subject and the PP “with joy” is built (Fig.",Experiment/Discussion
(1.5) ).,Experiment/Discussion
"Ideally, we would like to score easy and reliable attachments higher than harder less likely attachments, thus performing attachments in order of confidence.",Experiment/Discussion
"This strategy allows us both to limit the extent of error propagation, and to make use of richer contextual information in the later, harder attachments.",Experiment/Discussion
"Unfortunately, this kind of ordering information is not directly encoded in the data.",Experiment/Discussion
"We must, therefore, learn how to order the decisions.",Experiment/Discussion
We first describe the learning algorithm (Section 4) and a feature representation (Section 5) which enables us to learn an effective scoring function.,Experiment/Discussion
"We use a linear model score(x) = w� · O(x), where O(x) is a feature representation and w� is a weight vector.",Experiment/Discussion
We write Oact(i) to denote the feature representation extracted for action act at location i.,Experiment/Discussion
"The model is trained using a variant of the structured perceptron (Collins, 2002), similar to the algorithm of (Shen et al., 2007; Shen and Joshi, 2008).",Experiment/Discussion
"As usual, we use parameter averaging to prevent the perceptron from overfitting.",Experiment/Discussion
The training algorithm is initialized with a zero parameter vector w. The algorithm makes several passes over the data.,Experiment/Discussion
"At each pass, we apply the training procedure given in Algorithm 2 to every sentence in the training set.",Experiment/Discussion
"At training time, each sentence is parsed using the parsing algorithm and the current w. Whenever an invalid action is chosen by the parsing algorithm, it is not performed (line 6).",Experiment/Discussion
"Instead, we update the parameter vector w� by decreasing the weights of the features associated with the invalid action, and increasing the weights for the currently highest scoring valid action.1 We then proceed to parse the sentence with the updated values.",Experiment/Discussion
The process repeats until a valid action is chosen.,Experiment/Discussion
"Note that each single update does not guarantee that the next chosen action is valid, or even different than the previously selected action.",Experiment/Discussion
"Yet, this is still an aggressive update procedure: we do not leave a sentence until our parameters vector parses it cor1We considered 3 variants of this scheme: (1) using the highest scoring valid action, (2) using the leftmost valid action, and (3) using a random valid action.",Experiment/Discussion
"The 3 variants achieved nearly identical accuracy, while (1) converged somewhat faster than the other two. rectly, and we do not proceed from one partial parse to the next until w� predicts a correct location/action pair.",Experiment/Discussion
"However, as the best ordering, and hence the best attachment point is not known to us, we do not perform a single aggressive update step.",Experiment/Discussion
"Instead, our aggressive update is performed incrementally in a series of smaller steps, each pushing w� away from invalid attachments and toward valid ones.",Experiment/Discussion
This way we integrate the search of confident attachments into the learning process.,Experiment/Discussion
"The function isValid(act(i), gold, arcs) (line 4) is used to decide if the chosen action/location pair is valid.",Experiment/Discussion
"It returns True if two conditions apply: (a) (pi, pj) is present in gold, (b) all edges (❑, pj) in gold are also in arcs.",Experiment/Discussion
"In words, the function verifies that the proposed edge is indeed present in the gold parse and that the suggested daughter already found all its own daughters.2",Experiment/Discussion
"The feature representation for an action can take into account the original sentence, as well as the entire parse history: Oact(i) above is actually O(act(i), sentence, Arcs, pending).",Experiment/Discussion
"We use binary valued features, and each feature is conjoined with the type of action.",Experiment/Discussion
"When designing the feature representation, we keep in mind that our features should not only direct the parser toward desired actions and away from undesired actions, but also provide the parser with means of choosing between several desired actions.",Experiment/Discussion
We want the parser to be able to defer some desired actions until more structure is available and a more informed prediction can be made.,Experiment/Discussion
"This desire is reflected in our choice of features: some of our features are designed to signal to the parser the presence of possibly “incomplete” structures, such as an incomplete phrase, a coordinator without conjuncts, and so on.",Experiment/Discussion
"When considering an action ACTION(i), we limit ourselves to features of partial structures around the attachment point: pi−2, pi−1, pi, pi+1, pi+2, pi+s, that is the two structures which are to be attached by the action (pi and pi+1), and the two neighbouring structures on each side3.",Experiment/Discussion
"While these features encode local context, it is local in terms of syntactic structure, and not purely in terms of sentence surface form.",Experiment/Discussion
"This let us capture some, though not all, long-distance relations.",Experiment/Discussion
"For a partial structure p, we use wp to refer to the head word form, tp to the head word POS tag, and lcp and rcp to the POS tags of the left-most and right-most child of p respectively.",Experiment/Discussion
"All our prepositions (IN) and coordinators (CC) are lexicalized: for them, tp is in fact wptp.",Experiment/Discussion
"We define structural, unigram, bigram and ppattachment features.",Experiment/Discussion
"The structural features are: the length of the structures (lenp), whether the structure is a word (contains no children: ncp), and the surface distance between structure heads (Apipj).",Experiment/Discussion
"The unigram and bigram features are adapted from the feature set for left-to-right Arc-Standard dependency parsing described in (Huang et al., 2009).",Experiment/Discussion
We extended that feature set to include the structure on both sides of the proposed attachment point.,Experiment/Discussion
"In the case of unigram features, we added features that specify the POS of a word and its left-most and right-most children.",Experiment/Discussion
These features provide the nondirectional model with means to prefer some attachment points over others based on the types of structures already built.,Experiment/Discussion
"In English, the left- and rightmost POS-tags are good indicators of constituency.",Experiment/Discussion
"The pp-attachment features are similar to the bigram features, but fire only when one of the structures is headed by a preposition (IN).",Experiment/Discussion
"These features are more lexicalized than the regular bigram features, and include also the word-form of the rightmost child of the PP (rcwp).",Experiment/Discussion
"This should help the model learn lexicalized attachment preferences such as (hit, with-bat).",Experiment/Discussion
Figure 2 enumerate the feature templates we use.,Experiment/Discussion
"The parsing algorithm (Algorithm 1) begins with n+1 disjoint structures (the words of the sentence + ROOT symbol), and terminates with one connected structure.",Experiment/Discussion
"Each iteration of the main loop connects two structures and removes one of them, and so the loop repeats for exactly n times.",Experiment/Discussion
The argmax in line 5 selects the maximal scoring action/location pair.,Experiment/Discussion
"At iteration i, there are n − i locations to choose from, and a naive computation of the argmax is O(n), resulting in an O(n2) algorithm.",Experiment/Discussion
Each performed action changes the partial structures and with it the extracted features and the computed scores.,Experiment/Discussion
"However, these changes are limited to a fixed local context around the attachment point of the action.",Experiment/Discussion
"Thus, we observe that the feature extraction and score calculation can be performed once for each action/location pair in a given sentence, and reused throughout all the iterations.",Experiment/Discussion
"After each iteration we need to update the extracted features and calculated scores for only k locations, where k is a fixed number depending on the window size used in the feature extraction, and usually k « n. Using this technique, we perform only (k + 1)n feature extractions and score calculations for each sentence, that is O(n) feature-extraction operations per sentence.",Experiment/Discussion
"Given the scores for each location, the argmax can then be computed in O(logn) time using a heap, resulting in an O(nlogn) algorithm: n iterations, where the first iteration involves n feature extraction operations and n heap insertions, and each subsequent iteration involves k feature extractions and heap updates.",Experiment/Discussion
"We note that the dominating factor in polynomialtime discriminative parsers, is by far the featureextraction and score calculation.",Experiment/Discussion
"It makes sense to compare parser complexity in terms of these operations only.4 Table 1 compares the complexity of our 4Indeed, in our implementation we do not use a heap, and opt instead to find the argmax using a simple O(n) max operation.",Experiment/Discussion
"This O(n2) algorithm is faster in practice than the heap based one, as both are dominated by the O(n) feature extraction, while the cost of the O(n) max calculationis negligible compared to the constants involved in heap maintenance.",Experiment/Discussion
"In terms of feature extraction and score calculation operations, our algorithm has the same cost as traditional shift-reduce (MALT) parsers, and is an order of magnitude more efficient than graph-based (MST) parsers.",Experiment/Discussion
"Beam-search decoding for left-toright parsers (Zhang and Clark, 2008) is also linear, but has an additional linear dependence on the beamsize.",Experiment/Discussion
"The reported results in (Zhang and Clark, 2008) use a beam size of 64, compared to our constant of k = 6.",Experiment/Discussion
Our Python-based implementation5 (the perceptron is implemented in a C extension module) parses about 40 tagged sentences per second on an Intel based MacBook laptop.,Experiment/Discussion
We evaluate the parser using the WSJ Treebank.,Experiment/Discussion
"The trees were converted to dependency structures with the Penn2Malt conversion program,6 using the headfinding rules from (Yamada and Matsumoto, 2003).7 We use Sections 2-21 for training, Section 22 for development, and Section 23 as the final test set.",Experiment/Discussion
The text is automatically POS tagged using a trigram HMM based POS tagger prior to training and parsing.,Experiment/Discussion
Each section is tagged after training the tagger on all other sections.,Experiment/Discussion
The tagging accuracy of the tagger is 96.5 for the training set and 96.8 for the test set.,Experiment/Discussion
"While better taggers exist, we believe that the simpler HMM tagger overfits less, and is more representative of the tagging performance on nonWSJ corpus texts.",Experiment/Discussion
Parsers We evaluate our parser against the transition-based MALT parser and the graph-based MST parser.,Experiment/Discussion
"We use version 1.2 of MALT parser8, with the settings used for parsing English in the CoNLL 2007 shared task.",Experiment/Discussion
"For the MST parser9, we use the default first-order, projective parser settings, which provide state-of-the-art results for English.",Experiment/Discussion
All parsers are trained and tested on the same data.,Experiment/Discussion
Our parser is trained for 20 iterations.,Experiment/Discussion
Evaluation Measures We evaluate the parsers using three common measures: (unlabeled) Accuracy: percentage of tokens which got assigned their correct parent.,Experiment/Discussion
Root: The percentage of sentences in which the ROOT attachment is correct.,Experiment/Discussion
Complete: the percentage of sentences in which all tokens were assigned their correct parent.,Experiment/Discussion
"Unlike most previous work on English dependency parsing, we do not exclude punctuation marks from the evaluation.",Experiment/Discussion
Results are presented in Table 2.,Experiment/Discussion
"Our nondirectional easy-first parser significantly outperforms the left-to-right greedy MALT parser in terms of accuracy and root prediction, and significantly outperforms both parsers in terms of exact match.",Experiment/Discussion
"The globally optimized MST parser is better in rootprediction, and slightly better in terms of accuracy.",Experiment/Discussion
We evaluated the parsers also on the English dataset from the CoNLL 2007 shared task.,Experiment/Discussion
"While this dataset is also derived from the WSJ Treebank, it differs from the previous dataset in two important aspects: it is much smaller in size, and it is created using a different conversion procedure, which is more linguistically adequate.",Experiment/Discussion
"For these experiments, we use the dataset POS tags, and the same parameters as in the previous set of experiments: we train the nondirectional parser for 20 iterations, with the same feature set.",Experiment/Discussion
The CoNLL dataset contains some nonprojective constructions.,Experiment/Discussion
MALT and MST deal with non-projectivity.,Experiment/Discussion
"For the non-directional parser, we projectivize the training set prior to training using the procedure described in (Carreras, 2007).",Experiment/Discussion
Results are presented in Table 3.,Experiment/Discussion
"While all models suffer from the move to the smaller dataset and the more challenging annotation scheme, the overall story remains the same: the nondirectional parser is better than MALT but not as good as MST in terms of parent-accuracy and root prediction, and is better than both MALT and MST in terms of producing complete correct parses.",Experiment/Discussion
"That the non-directional parser has lower accuracy but more exact matches than the MST parser can be explained by it being a deterministic parser, and hence still vulnerable to error propagation: once it erred once, it is likely to do so again, resulting in low accuracies for some sentences.",Experiment/Discussion
"However, due to the easy-first policy, it manages to parse many sentences without a single error, which lead to higher exact-match scores.",Experiment/Discussion
The non-directional parser avoids error propagation by not making the initial error.,Experiment/Discussion
"On average, the non-directional parser manages to assign correct heads to over 60% of the tokens before making its first error.",Experiment/Discussion
"The MST parser would have ranked 5th in the shared task, and NONDIR would have ranked 7th.",Experiment/Discussion
"The better ranking systems in the shared task are either higher-order global models, beam-search based systems, or ensemble-based systems, all of which are more complex and less efficient than the NONDIR parser.",Experiment/Discussion
Parse Diversity The parses produced by the nondirectional parser are different than the parses produced by the graph-based and left-to-right parsers.,Experiment/Discussion
"To demonstrate this difference, we performed an Oracle experiment, in which we combine the output of several parsers by choosing, for each sentence, the parse with the highest score.",Experiment/Discussion
Results are presented in Table 4.,Experiment/Discussion
"A non-oracle blending of MALT+MST+NONDIR using Sagae and Lavie’s (2006) simplest combination method assigning each component the same weight, yield an accuracy of 90.8 on the CoNLL 2007 English dataset, making it the highest scoring system among the participants.",Experiment/Discussion
"When we investigate the POS category of mistaken instances, we see that for all parsers, nodes with structures of depth 2 and more which are assigned an incorrect head are predominantly PPs (headed by ’IN’), followed by NPs (headed by ’NN’).",Experiment/Discussion
"All parsers have a hard time dealing with PP attachment, but MST parser is better at it than NONDIR, and both are better than MALT.",Experiment/Discussion
"Looking further at the mistaken instances, we notice a tendency of the PP mistakes of the NONDIR parser to involve, before the PP, an NP embedded in a relative clause.",Experiment/Discussion
"This reveals a limitation of our parser: recall that for an edge to be built, the child must first acquire all its own children.",Experiment/Discussion
"This means that in case of relative clauses such as “I saw the boy [who ate the pizza] with my eyes”, the parser must decide if the PP “with my eyes” should be attached to “the pizza” or not before it is allowed to build parts of the outer NP (“the boy who... ”).",Experiment/Discussion
"In this case, the verb “saw” and the noun “boy” are both outside of the sight of the parser when deciding on the PP attachment, and it is forced to make a decision in ignorance, which, in many cases, leads to mistakes.",Experiment/Discussion
The globally optimized MST does not suffer as much from such cases.,Experiment/Discussion
We plan to address this deficiency in future work.,Experiment/Discussion
Deterministic shift-reduce parsers are restricted by a strict left-to-right processing order.,Results/Conclusion
"Such parsers can rely on rich syntactic information on the left, but not on the right, of the decision point.",Results/Conclusion
"They are forced to commit early, and suffer from error propagation.",Results/Conclusion
"Our non-directional parser addresses these deficiencies by discarding the strict left-to-right processing order, and attempting to make easier decisions before harder ones.",Results/Conclusion
Other methods of dealing with these deficiencies were proposed over the years: Several Passes Yamada and Matsumoto’s (2003) pioneering work introduces a shift-reduce parser which makes several left-to-right passes over a sentence.,Results/Conclusion
"Each pass adds structure, which can then be used in subsequent passes.",Results/Conclusion
Sagae and Lavie (2006b) extend this model to alternate between left-to-right and right-to-left passes.,Results/Conclusion
"This model is similar to ours, in that it attempts to defer harder decisions to later passes over the sentence, and allows late decisions to make use of rich syntactic information (built in earlier passes) on both sides of the decision point.",Results/Conclusion
"However, the model is not explicitly trained to optimize attachment ordering, has an O(n2) runtime complexity, and produces results which are inferior to current single-pass shift-reduce parsers.",Results/Conclusion
"Beam Search Several researchers dealt with the early-commitment and error propagation of deterministic parsers by extending the greedy decisions with various flavors of beam-search (Sagae and Lavie, 2006a; Zhang and Clark, 2008; Titov and Henderson, 2007).",Results/Conclusion
This approach works well and produces highly competitive results.,Results/Conclusion
Beam search can be incorporated into our parser as well.,Results/Conclusion
We leave this investigation to future work.,Results/Conclusion
Strict left-to-right ordering is also prevalent in sequence tagging.,Results/Conclusion
"Indeed, one major influence on our work is Shen et.al.’s bi-directional POS-tagging algorithm (Shen et al., 2007), which combines a perceptron learning procedure similar to our own with beam search to produce a state-of-the-art POStagger, which does not rely on left-to-right processing.",Results/Conclusion
"Shen and Joshi (2008) extends the bidirectional tagging algorithm to LTAG parsing, with good results.",Results/Conclusion
We build on top of that work and present a concrete and efficient greedy non-directional dependency parsing algorithm.,Results/Conclusion
Structure Restrictions Eisner and Smith (2005) propose to improve the efficiency of a globally optimized parser by posing hard constraints on the lengths of arcs it can produce.,Results/Conclusion
Such constraints pose an explicit upper bound on parser accuracy.10 Our parsing model does not pose such restrictions.,Results/Conclusion
"Shorter edges are arguably easier to predict, and our parses builds them early in time.",Results/Conclusion
"However, it is also capable of producing long dependencies at later stages in the parsing process.",Results/Conclusion
"Indeed, the distribution of arc lengths produced by our parser is similar to those produced by the MALT and MST parsers.",Results/Conclusion
"We presented a non-directional deterministic dependency parsing algorithm, which is not restricted by the left-to-right parsing order of other deterministic parsers.",Results/Conclusion
"Instead, it works in an easy-first order.",Results/Conclusion
This strategy allows using more context at each decision.,Results/Conclusion
The parser learns both what and when to connect.,Results/Conclusion
We show that this parsing algorithm significantly outperforms a left-to-right deterministic algorithm.,Results/Conclusion
"While it still lags behind globally optimized parsing algorithms in terms of accuracy and root prediction, it is much better in terms of exact match, and much faster.",Results/Conclusion
"As our parsing framework can easily and efficiently utilize more structural information than globally optimized parsers, we believe that with some enhancements and better features, it can outperform globally optimized algorithms, especially when more structural information is needed, such as for morphologically rich languages.",Results/Conclusion
"Moreover, we show that our parser produces different structures than those produced by both left-to-right and globally optimized parsers, making it a good candidate for inclusion in an ensemble system.",Results/Conclusion
"Indeed, a simple combination scheme of graph-based, left-to-right and non-directional parsers yields state-of-the-art results on English dependency parsing on the CoNLL 2007 dataset.",Results/Conclusion
"We hope that further work on this non-directional parsing framework will pave the way to better understanding of an interesting cognitive question: which kinds of parsing decisions are hard to make, and which linguistic constructs are hard to analyze?",Results/Conclusion
