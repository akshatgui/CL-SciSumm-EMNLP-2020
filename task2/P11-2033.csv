col1,col2
Transition-based dependency parsers generally use heuristic decoding algorithms but can accommodate arbitrarily rich feature representations.,{}
"In this paper, we show that we can improve the accuracy of such parsers by considering even richer feature sets than those employed in previous systems.",{}
"In the standard Penn Treebank setup, our novel features improve attachment score form 91.4% to 92.9%, giving the best results so far for transitionbased parsing and rivaling the best results overall.",{}
"For the Chinese Treebank, they give a signficant improvement of the state of the art.",{}
An open source release of our parser is freely available.,{}
"Transition-based dependency parsing (Yamada and Matsumoto, 2003; Nivre et al., 2006b; Zhang and Clark, 2008; Huang and Sagae, 2010) utilize a deterministic shift-reduce process for making structural predictions.","{'title': '1 Introduction', 'number': '1'}"
"Compared to graph-based dependency parsing, it typically offers linear time complexity and the comparative freedom to define non-local features, as exemplified by the comparison between MaltParser and MSTParser (Nivre et al., 2006b; McDonald et al., 2005; McDonald and Nivre, 2007).","{'title': '1 Introduction', 'number': '1'}"
Recent research has addressed two potential disadvantages of systems like MaltParser.,"{'title': '1 Introduction', 'number': '1'}"
"In the aspect of decoding, beam-search (Johansson and Nugues, 2007; Zhang and Clark, 2008; Huang et al., 2009) and partial dynamic-programming (Huang and Sagae, 2010) have been applied to improve upon greedy one-best search, and positive results were reported.","{'title': '1 Introduction', 'number': '1'}"
"In the aspect of training, global structural learning has been used to replace local learning on each decision (Zhang and Clark, 2008; Huang et al., 2009), although the effect of global learning has not been separated out and studied alone.","{'title': '1 Introduction', 'number': '1'}"
"In this short paper, we study a third aspect in a statistical system: feature definition.","{'title': '1 Introduction', 'number': '1'}"
"Representing the type of information a statistical system uses to make predictions, feature templates can be one of the most important factors determining parsing accuracy.","{'title': '1 Introduction', 'number': '1'}"
"Various recent attempts have been made to include non-local features into graph-based dependency parsing (Smith and Eisner, 2008; Martins et al., 2009; Koo and Collins, 2010).","{'title': '1 Introduction', 'number': '1'}"
"Transitionbased parsing, by contrast, can easily accommodate arbitrarily complex representations involving nonlocal features.","{'title': '1 Introduction', 'number': '1'}"
"Complex non-local features, such as bracket matching and rhythmic patterns, are used in transition-based constituency parsing (Zhang and Clark, 2009; Wang et al., 2006), and most transitionbased dependency parsers incorporate some nonlocal features, but current practice is nevertheless to use a rather restricted set of features, as exemplified by the default feature models in MaltParser (Nivre et al., 2006a).","{'title': '1 Introduction', 'number': '1'}"
We explore considerably richer feature representations and show that they improve parsing accuracy significantly.,"{'title': '1 Introduction', 'number': '1'}"
"In standard experiments using the Penn Treebank, our parser gets an unlabeled attachment score of 92.9%, which is the best result achieved with a transition-based parser and comparable to the state of the art.","{'title': '1 Introduction', 'number': '1'}"
"For the Chinese Treebank, our parser gets a score of 86.0%, the best reported result so far.","{'title': '1 Introduction', 'number': '1'}"
"In a typical transition-based parsing process, the input words are put into a queue and partially built structures are organized by a stack.","{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
"A set of shiftreduce actions are defined, which consume words from the queue and build the output parse.","{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
"Recent research have focused on action sets that build projective dependency trees in an arc-eager (Nivre et al., 2006b; Zhang and Clark, 2008) or arc-standard (Yamada and Matsumoto, 2003; Huang and Sagae, 2010) process.","{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
"We adopt the arc-eager system1, for which the actions are: Further, we follow Zhang and Clark (2008) and Huang et al. (2009) and use the generalized perceptron (Collins, 2002) for global learning and beamsearch for decoding.","{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
"Unlike both earlier globallearning parsers, which only perform unlabeled parsing, we perform labeled parsing by augmenting the LeftArc and RightArc actions with the set of dependency labels.","{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
Hence our work is in line with Titov and Henderson (2007) in using labeled transitions with global learning.,"{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
"Moreover, we will see that label information can actually improve link accuracy.","{'title': '2 The Transition-based Parsing Algorithm', 'number': '2'}"
"At each step during a parsing process, the parser configuration can be represented by a tuple (S, N, A), where S is the stack, N is the queue of incoming words, and A is the set of dependency arcs that have been built.","{'title': '3 Feature Templates', 'number': '3'}"
"Denoting the top of stack w – word; p – POS-tag; vl, vr – valency; l – dependency label, sl, sr – labelset. with S0, the front items from the queue with N0, N1, and N2, the head of S0 (if any) with S0h, the leftmost and rightmost modifiers of S0 (if any) with S0l and S0r, respectively, and the leftmost modifier of N0 (if any) with N0l, the baseline features are shown in Table 1.","{'title': '3 Feature Templates', 'number': '3'}"
"These features are mostly taken from Zhang and Clark (2008) and Huang and Sagae (2010), and our parser reproduces the same accuracies as reported by both papers.","{'title': '3 Feature Templates', 'number': '3'}"
"In this table, w and p represents the word and POS-tag, respectively.","{'title': '3 Feature Templates', 'number': '3'}"
"For example, S0pN0wp represents the feature template that takes the word and POS-tag of N0, and combines it with the word of S0.","{'title': '3 Feature Templates', 'number': '3'}"
"In this short paper, we extend the baseline feature templates with the following: Distance between S0 and N0 Direction and distance between a pair of head and modifier have been used in the standard feature templates for maximum spanning tree parsing (McDonald et al., 2005).","{'title': '3 Feature Templates', 'number': '3'}"
"Distance information has also been used in the easy-first parser of (Goldberg and Elhadad, 2010).","{'title': '3 Feature Templates', 'number': '3'}"
"For a transition-based parser, direction information is indirectly included in the LeftArc and RightArc actions.","{'title': '3 Feature Templates', 'number': '3'}"
"We add the distance between S0 and N0 to the feature set by combining it with the word and POS-tag of S0 and N0, as shown in Table 2.","{'title': '3 Feature Templates', 'number': '3'}"
It is worth noticing that the use of distance information in our transition-based model is different from that in a typical graph-based parser such as MSTParser.,"{'title': '3 Feature Templates', 'number': '3'}"
"The distance between S0 and N0 will correspond to the distance between a pair of head and modifier when an LeftArc action is taken, for example, but not when a Shift action is taken.","{'title': '3 Feature Templates', 'number': '3'}"
Valency of S0 and N0 The number of modifiers to a given head is used by the graph-based submodel of Zhang and Clark (2008) and the models of Martins et al. (2009) and Sagae and Tsujii (2007).,"{'title': '3 Feature Templates', 'number': '3'}"
We include similar information in our model.,"{'title': '3 Feature Templates', 'number': '3'}"
"In particular, we calculate the number of left and right modifiers separately, calling them left valency and right valency, respectively.","{'title': '3 Feature Templates', 'number': '3'}"
"Left and right valencies are represented by vl and vr in Table 2, respectively.","{'title': '3 Feature Templates', 'number': '3'}"
They are combined with the word and POS-tag of S0 and N0 to form new feature templates.,"{'title': '3 Feature Templates', 'number': '3'}"
"Again, the use of valency information in our transition-based parser is different from the aforementioned graph-based models.","{'title': '3 Feature Templates', 'number': '3'}"
"In our case, valency information is put into the context of the shift-reduce process, and used together with each action to give a score to the local decision.","{'title': '3 Feature Templates', 'number': '3'}"
"Unigram information for S0h, S0l, S0r and N0l The head, left/rightmost modifiers of S0 and the leftmost modifier of N0 have been used by most arc-eager transition-based parsers we are aware of through the combination of their POS-tag with information from S0 and N0.","{'title': '3 Feature Templates', 'number': '3'}"
Such use is exemplified by the feature templates “from three words” in Table 1.,"{'title': '3 Feature Templates', 'number': '3'}"
We further use their word and POS-tag information as “unigram” features in Table 2.,"{'title': '3 Feature Templates', 'number': '3'}"
"Moreover, we include the dependency label information in the unigram features, represented by l in the table.","{'title': '3 Feature Templates', 'number': '3'}"
"Unigram label information has been used in MaltParser (Nivre et al., 2006a; Nivre, 2006).","{'title': '3 Feature Templates', 'number': '3'}"
"Third-order features of S0 and N0 Higher-order context features have been used by graph-based dependency parsers to improve accuracies (Carreras, 2007; Koo and Collins, 2010).","{'title': '3 Feature Templates', 'number': '3'}"
"We include information of third order dependency arcs in our new feature templates, when available.","{'title': '3 Feature Templates', 'number': '3'}"
"In Table 2, S0h2, S0l2, S0r2 and N0l2 refer to the head of S0h, the second leftmost modifier and the second rightmost modifier of S0, and the second leftmost modifier of N0, respectively.","{'title': '3 Feature Templates', 'number': '3'}"
"The new templates include unigram word, POS-tag and dependency labels of S0h2, S0l2, S0r2 and N0l2, as well as POS-tag combinations with S0 and N0.","{'title': '3 Feature Templates', 'number': '3'}"
"Set of dependency labels with S0 and N0 As a more global feature, we include the set of unique dependency labels from the modifiers of S0 and N0.","{'title': '3 Feature Templates', 'number': '3'}"
This information is combined with the word and POS-tag of S0 and N0 to make feature templates.,"{'title': '3 Feature Templates', 'number': '3'}"
"In Table 2, sl and sr stands for the set of labels on the left and right of the head, respectively.","{'title': '3 Feature Templates', 'number': '3'}"
Our experiments were performed using the Penn Treebank (PTB) and Chinese Treebank (CTB) data.,"{'title': '4 Experiments', 'number': '4'}"
"We follow the standard approach to split PTB3, using sections 2 – 21 for training, section 22 for development and 23 for final testing.","{'title': '4 Experiments', 'number': '4'}"
"Bracketed sentences from PTB were transformed into dependency formats using the Penn2Malt tool.2 Following Huang and Sagae (2010), we assign POS-tags to the training data using ten-way jackknifing.","{'title': '4 Experiments', 'number': '4'}"
We used our implementation of the Collins (2002) tagger (with 97.3% accuracy on a standard Penn Treebank test) to perform POS-tagging.,"{'title': '4 Experiments', 'number': '4'}"
"For all experiments, we set the beam size to 64 for the parser, and report unlabeled and labeled attachment scores (UAS, LAS) and unlabeled exact match (UEM) for evaluation.","{'title': '4 Experiments', 'number': '4'}"
Table 3 shows the effect of new features on the development test data for English.,"{'title': '4 Experiments', 'number': '4'}"
"We start with the baseline features in Table 1, and incrementally add the distance, valency, unigram, third-order and label set feature templates in Table 2.","{'title': '4 Experiments', 'number': '4'}"
"Each group of new feature templates improved the accuracies over the previous system, and the final accuracy with all new features was 93.14% in unlabeled attachment score.","{'title': '4 Experiments', 'number': '4'}"
Table 4 shows the final test results of our parser for English.,"{'title': '4 Experiments', 'number': '4'}"
"We include in the table results from the pure transition-based parser of Zhang and Clark (2008) (row ‘Z&C08 transition’), the dynamic-programming arc-standard parser of Huang and Sagae (2010) (row ‘H&S10’), and graphbased models including MSTParser (McDonald and Pereira, 2006), the baseline feature parser of Koo et al. (2008) (row ‘K08 baeline’), and the two models of Koo and Collins (2010).","{'title': '4 Experiments', 'number': '4'}"
"Our extended parser significantly outperformed the baseline parser, achieving the highest attachment score reported for a transition-based parser, comparable to those of the best graph-based parsers.","{'title': '4 Experiments', 'number': '4'}"
Our experiments were performed on a Linux platform with a 2GHz CPU.,"{'title': '4 Experiments', 'number': '4'}"
The speed of our baseline parser was 50 sentences per second.,"{'title': '4 Experiments', 'number': '4'}"
"With all new features added, the speed dropped to 29 sentences per second.","{'title': '4 Experiments', 'number': '4'}"
"As an alternative to Penn2Malt, bracketed sentences can also be transformed into Stanford dependencies (De Marneffe et al., 2006).","{'title': '4 Experiments', 'number': '4'}"
"Our parser gave 93.5% UAS, 91.9% LAS and 52.1% UEM when trained and evaluated on Stanford basic dependencies, which are projective dependency trees.","{'title': '4 Experiments', 'number': '4'}"
"Cer et al. (2010) report results on Stanford collapsed dependencies, which allow a word to have multiple heads and therefore cannot be produced by a regular dependency parser.","{'title': '4 Experiments', 'number': '4'}"
Their results are relevant although not directly comparable with ours.,"{'title': '4 Experiments', 'number': '4'}"
"Table 5 shows the results of our final parser, the pure transition-based parser of Zhang and Clark (2008), and the parser of Huang and Sagae (2010) on Chinese.","{'title': '4 Experiments', 'number': '4'}"
We take the standard split of CTB and use gold segmentation and POS-tags for the input.,"{'title': '4 Experiments', 'number': '4'}"
Our scores for this test set are the best reported so far and significantly better than the previous systems.,"{'title': '4 Experiments', 'number': '4'}"
