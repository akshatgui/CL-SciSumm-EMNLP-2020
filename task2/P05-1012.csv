col1,col2
"We present an effective training algorithm for linearly-scored dependency parsers that implements online largemargin multi-class training (Crammer and Singer, 2003; Crammer et al., 2003) on top of efficient parsing techniques for dependency trees (Eisner, 1996).",Introduction
The trained parsers achieve a competitive dependency accuracy for both English and Czech with no language specific enhancements.,Introduction
Research on training parsers from annotated data has for the most part focused on models and training algorithms for phrase structure parsing.,Experiment/Discussion
"The best phrase-structure parsing models represent generatively the joint probability P(x, y) of sentence x having the structure y (Collins, 1999; Charniak, 2000).",Experiment/Discussion
Generative parsing models are very convenient because training consists of computing probability estimates from counts of parsing events in the training set.,Experiment/Discussion
"However, generative models make complicated and poorly justified independence assumptions and estimations, so we might expect better performance from discriminatively trained models, as has been shown for other tasks like document classification (Joachims, 2002) and shallow parsing (Sha and Pereira, 2003).",Experiment/Discussion
"Ratnaparkhi’s conditional maximum entropy model (Ratnaparkhi, 1999), trained to maximize conditional likelihood P(y|x) of the training data, performed nearly as well as generative models of the same vintage even though it scores parsing decisions in isolation and thus may suffer from the label bias problem (Lafferty et al., 2001).",Experiment/Discussion
"Discriminatively trained parsers that score entire trees for a given sentence have only recently been investigated (Riezler et al., 2002; Clark and Curran, 2004; Collins and Roark, 2004; Taskar et al., 2004).",Experiment/Discussion
The most likely reason for this is that discriminative training requires repeatedly reparsing the training corpus with the current model to determine the parameter updates that will improve the training criterion.,Experiment/Discussion
"The reparsing cost is already quite high for simple context-free models with O(n3) parsing complexity, but it becomes prohibitive for lexicalized grammars with O(n5) parsing complexity.",Experiment/Discussion
"Dependency trees are an alternative syntactic representation with a long history (Hudson, 1984).",Experiment/Discussion
"Dependency trees capture important aspects of functional relationships between words and have been shown to be useful in many applications including relation extraction (Culotta and Sorensen, 2004), paraphrase acquisition (Shinyama et al., 2002) and machine translation (Ding and Palmer, 2005).",Experiment/Discussion
"Yet, they can be parsed in O(n3) time (Eisner, 1996).",Experiment/Discussion
"Therefore, dependency parsing is a potential “sweet spot” that deserves investigation.",Experiment/Discussion
"We focus here on projective dependency trees in which a word is the parent of all of its arguments, and dependencies are non-crossing with respect to word order (see Figure 1).",Experiment/Discussion
"However, there are cases where crossing dependencies may occur, as is the case for Czech (Hajiˇc, 1998).",Experiment/Discussion
Edges in a dependency tree may be typed (for instance to indicate grammatical function).,Experiment/Discussion
"Though we focus on the simpler non-typed case, all algorithms are easily extendible to typed structures.",Experiment/Discussion
The following work on dependency parsing is most relevant to our research.,Experiment/Discussion
Eisner (1996) gave a generative model with a cubic parsing algorithm based on an edge factorization of trees.,Experiment/Discussion
Yamada and Matsumoto (2003) trained support vector machines (SVM) to make parsing decisions in a shift-reduce dependency parser.,Experiment/Discussion
"As in Ratnaparkhi’s parser, the classifiers are trained on individual decisions rather than on the overall quality of the parse.",Experiment/Discussion
Nivre and Scholz (2004) developed a history-based learning model.,Experiment/Discussion
Their parser uses a hybrid bottom-up/topdown linear-time heuristic parser and the ability to label edges with semantic types.,Experiment/Discussion
The accuracy of their parser is lower than that of Yamada and Matsumoto (2003).,Experiment/Discussion
"We present a new approach to training dependency parsers, based on the online large-margin learning algorithms of Crammer and Singer (2003) and Crammer et al. (2003).",Experiment/Discussion
"Unlike the SVM parser of Yamada and Matsumoto (2003) and Ratnaparkhi’s parser, our parsers are trained to maximize the accuracy of the overall tree.",Experiment/Discussion
Our approach is related to those of Collins and Roark (2004) and Taskar et al. (2004) for phrase structure parsing.,Experiment/Discussion
Collins and Roark (2004) presented a linear parsing model trained with an averaged perceptron algorithm.,Experiment/Discussion
"However, to use parse features with sufficient history, their parsing algorithm must prune heuristically most of the possible parses.",Experiment/Discussion
"Taskar et al. (2004) formulate the parsing problem in the large-margin structured classification setting (Taskar et al., 2003), but are limited to parsing sentences of 15 words or less due to computation time.",Experiment/Discussion
"Though these approaches represent good first steps towards discriminatively-trained parsers, they have not yet been able to display the benefits of discriminative training that have been seen in namedentity extraction and shallow parsing.",Experiment/Discussion
"Besides simplicity, our method is efficient and accurate, as we demonstrate experimentally on English and Czech treebank data.",Experiment/Discussion
"In what follows, the generic sentence is denoted by x (possibly subscripted); the ith word of x is denoted by xi.",Experiment/Discussion
The generic dependency tree is denoted by y.,Experiment/Discussion
"If y is a dependency tree for sentence x, we write (i, j) E y to indicate that there is a directed edge from word xi to word xj in the tree, that is, xi is the parent of xj.",Experiment/Discussion
"T = {(xt, yt)}t_1 denotes the training data.",Experiment/Discussion
"We follow the edge based factorization method of Eisner (1996) and define the score of a dependency tree as the sum of the score of all edges in the tree, where f(i, j) is a high-dimensional binary feature representation of the edge from xi to xj.",Experiment/Discussion
"For example, in the dependency tree of Figure 1, the following feature would have a value of 1: In general, any real-valued feature may be used, but we use binary features for simplicity.",Experiment/Discussion
The feature weights in the weight vector w are the parameters that will be learned during training.,Experiment/Discussion
Our training algorithms are iterative.,Experiment/Discussion
We denote by w(i) the weight vector after the ith training iteration.,Experiment/Discussion
"Finally we define dt(x) as the set of possible dependency trees for the input sentence x and bestk(x; w) as the set of k dependency trees in dt(x) that are given the highest scores by weight vector w, with ties resolved by an arbitrary but fixed rule.",Experiment/Discussion
"Three basic questions must be answered for models of this form: how to find the dependency tree y with highest score for sentence x; how to learn an appropriate weight vector w from the training data; and finally, what feature representation f(i, j) should be used.",Experiment/Discussion
The following sections address each of these questions.,Experiment/Discussion
"Given a feature representation for edges and a weight vector w, we seek the dependency tree or trees that maximize the score function, s(x, y).",Experiment/Discussion
The primary difficulty is that for a given sentence of length n there are exponentially many possible dependency trees.,Experiment/Discussion
"Using a slightly modified version of a lexicalized CKY chart parsing algorithm, it is possible to generate and represent these sentences in a forest that is O(n5) in size and takes O(n5) time to create.",Experiment/Discussion
"Eisner (1996) made the observation that if the head of each chart item is on the left or right periphery, then it is possible to parse in O(n3).",Experiment/Discussion
The idea is to parse the left and right dependents of a word independently and combine them at a later stage.,Experiment/Discussion
This removes the need for the additional head indices of the O(n5) algorithm and requires only two additional binary variables that specify the direction of the item (either gathering left dependents or gathering right dependents) and whether an item is complete (available to gather more dependents).,Experiment/Discussion
Figure 2 shows the algorithm schematically.,Experiment/Discussion
"As with normal CKY parsing, larger elements are created bottom-up from pairs of smaller elements.",Experiment/Discussion
"Eisner showed that his algorithm is sufficient for both searching the space of dependency parses and, with slight modification, finding the highest scoring tree y for a given sentence x under the edge factorization assumption.",Experiment/Discussion
Eisner and Satta (1999) give a cubic algorithm for lexicalized phrase structures.,Experiment/Discussion
"However, it only works for a limited class of languages in which tree spines are regular.",Experiment/Discussion
"Furthermore, there is a large grammar constant, which is typically in the thousands for treebank parsers.",Experiment/Discussion
Figure 3 gives pseudo-code for the generic online learning setting.,Experiment/Discussion
"A single training instance is considered on each iteration, and parameters updated by applying an algorithm-specific update rule to the instance under consideration.",Experiment/Discussion
"The algorithm in Figure 3 returns an averaged weight vector: an auxiliary weight vector v is maintained that accumulates Training data: T = {(xt, yt)}Tt�1 the values of w after each iteration, and the returned weight vector is the average of all the weight vectors throughout training.",Experiment/Discussion
"Averaging has been shown to help reduce overfitting (Collins, 2002).",Experiment/Discussion
"Crammer and Singer (2001) developed a natural method for large-margin multi-class classification, which was later extended by Taskar et al. (2003) to structured classification: where L(y, y') is a real-valued loss for the tree y' relative to the correct tree y.",Experiment/Discussion
We define the loss of a dependency tree as the number of words that have the incorrect parent.,Experiment/Discussion
"Thus, the largest loss a dependency tree can have is the length of the sentence.",Experiment/Discussion
"Informally, this update looks to create a margin between the correct dependency tree and each incorrect dependency tree at least as large as the loss of the incorrect tree.",Experiment/Discussion
"The more errors a tree has, the farther away its score will be from the score of the correct tree.",Experiment/Discussion
In order to avoid a blow-up in the norm of the weight vector we minimize it subject to constraints that enforce the desired margin between the correct and incorrect trees1.,Experiment/Discussion
"The Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer, 2003; Crammer et al., 2003) employs this optimization directly within the online framework.",Experiment/Discussion
"On each update, MIRA attempts to keep the norm of the change to the parameter vector as small as possible, subject to correctly classifying the instance under consideration with a margin at least as large as the loss of the incorrect classifications.",Experiment/Discussion
"This can be formalized by substituting the following update into line 4 of the generic online algorithm, This is a standard quadratic programming problem that can be easily solved using Hildreth’s algorithm (Censor and Zenios, 1997).",Experiment/Discussion
Crammer and Singer (2003) and Crammer et al. (2003) provide an analysis of both the online generalization error and convergence properties of MIRA.,Experiment/Discussion
"In equation (1), s(x, y) is calculated with respect to the weight vector after optimization, w(Z+1).",Experiment/Discussion
"To apply MIRA to dependency parsing, we can simply see parsing as a multi-class classification problem in which each dependency tree is one of many possible classes for a sentence.",Experiment/Discussion
"However, that interpretation fails computationally because a general sentence has exponentially many possible dependency trees and thus exponentially many margin constraints.",Experiment/Discussion
"To circumvent this problem we make the assumption that the constraints that matter for large margin optimization are those involving the incorrect trees y' with the highest scores s(x, y').",Experiment/Discussion
"The resulting optimization made by MIRA (see Figure 3, line 4) would then be: reducing the number of constraints to the constant k. We tested various values of k on a development data set and found that small values of k are sufficient to achieve close to best performance, justifying our assumption.",Experiment/Discussion
"In fact, as k grew we began to observe a slight degradation of performance, indicating some overfitting to the training data.",Experiment/Discussion
All the experiments presented here use k = 5.,Experiment/Discussion
"The Eisner (1996) algorithm can be modified to find the k-best trees while only adding an additional O(k log k) factor to the runtime (Huang and Chiang, 2005).",Experiment/Discussion
"A more common approach is to factor the structure of the output space to yield a polynomial set of local constraints (Taskar et al., 2003; Taskar et al., 2004).",Experiment/Discussion
"One such factorization for dependency trees It is trivial to show that if these O(n2) constraints are satisfied, then so are those in (1).",Experiment/Discussion
"We implemented this model, but found that the required training time was much larger than the k-best formulation and typically did not improve performance.",Experiment/Discussion
"Furthermore, the k-best formulation is more flexible with respect to the loss function since it does not assume the loss function can be factored into a sum of terms for each dependency.",Experiment/Discussion
"Finally, we need a suitable feature representation f(i, j) for each dependency.",Experiment/Discussion
The basic features in our model are outlined in Table 1a and b.,Experiment/Discussion
All features are conjoined with the direction of attachment as well as the distance between the two words being attached.,Experiment/Discussion
These features represent a system of backoff from very specific features over words and partof-speech tags to less sparse features over just partof-speech tags.,Experiment/Discussion
These features are added for both the entire words as well as the 5-gram prefix if the word is longer than 5 characters.,Experiment/Discussion
"Using just features over the parent-child node pairs in the tree was not enough for high accuracy, because all attachment decisions were made outside of the context in which the words occurred.",Experiment/Discussion
"To solve this problem, we added two other types of features, which can be seen in Table 1c.",Experiment/Discussion
Features of the first type look at words that occur between a child and its parent.,Experiment/Discussion
"These features take the form of a POS trigram: the POS of the parent, of the child, and of a word in between, for all words linearly between the parent and the child.",Experiment/Discussion
"This feature was particularly helpful for nouns identifying their parent, since node. p-pos: POS of parent node. c-pos: POS of child node. p-pos+1: POS to the right of parent in sentence. p-pos-1: POS to the left of parent. c-pos+1: POS to the right of child. c-pos-1: POS to the left of child. b-pos: POS of a word in between parent and child nodes. it would typically rule out situations when a noun attached to another noun with a verb in between, which is a very uncommon phenomenon.",Experiment/Discussion
"The second type of feature provides the local context of the attachment, that is, the words before and after the parent-child pair.",Experiment/Discussion
"This feature took the form of a POS 4-gram: The POS of the parent, child, word before/after parent and word before/after child.",Experiment/Discussion
The system also used back-off features to various trigrams where one of the local context POS tags was removed.,Experiment/Discussion
Adding these two features resulted in a large improvement in performance and brought the system to state-of-the-art accuracy.,Experiment/Discussion
"Besides performance (see Section 3), the approach to dependency parsing we described has several other advantages.",Experiment/Discussion
The system is very general and contains no language specific enhancements.,Experiment/Discussion
"In fact, the results we report for English and Czech use identical features, though are obviously trained on different data.",Experiment/Discussion
The online learning algorithms themselves are intuitive and easy to implement.,Experiment/Discussion
"The efficient O(n3) parsing algorithm of Eisner allows the system to search the entire space of dependency trees while parsing thousands of sentences in a few minutes, which is crucial for discriminative training.",Experiment/Discussion
We compare the speed of our model to a standard lexicalized phrase structure parser in Section 3.1 and show a significant improvement in parsing times on the testing data.,Experiment/Discussion
The major limiting factor of the system is its restriction to features over single dependency attachments.,Experiment/Discussion
"Often, when determining the next dependent for a word, it would be useful to know previous attachment decisions and incorporate these into the features.",Experiment/Discussion
It is fairly straightforward to modify the parsing algorithm to store previous attachments.,Experiment/Discussion
"However, any modification would result in an asymptotic increase in parsing complexity.",Experiment/Discussion
"We tested our methods experimentally on the English Penn Treebank (Marcus et al., 1993) and on the Czech Prague Dependency Treebank (Hajiˇc, 1998).",Results/Conclusion
All experiments were run on a dual 64-bit AMD Opteron 2.4GHz processor.,Results/Conclusion
"To create dependency structures from the Penn Treebank, we used the extraction rules of Yamada and Matsumoto (2003), which are an approximation to the lexicalization rules of Collins (1999).",Results/Conclusion
"We split the data into three parts: sections 02-21 for training, section 22 for development and section 23 for evaluation.",Results/Conclusion
"Currently the system has 6, 998, 447 features.",Results/Conclusion
Each instance only uses a tiny fraction of these features making sparse vector calculations possible.,Results/Conclusion
Our system assumes POS tags as input and uses the tagger of Ratnaparkhi (1996) to provide tags for the development and evaluation sets.,Results/Conclusion
Table 2 shows the performance of the systems that were compared.,Results/Conclusion
"Y&M2003 is the SVM-shiftreduce parsing model of Yamada and Matsumoto (2003), N&S2004 is the memory-based learner of Nivre and Scholz (2004) and MIRA is the the system we have described.",Results/Conclusion
"We also implemented an averaged perceptron system (Collins, 2002) (another online learning algorithm) for comparison.",Results/Conclusion
This table compares only pure dependency parsers that do identified their parent in the tree.,Results/Conclusion
Root is the number of trees in which the root word was correctly identified.,Results/Conclusion
For Czech this is f-measure since a sentence may have multiple roots.,Results/Conclusion
Complete is the number of sentences for which the entire dependency tree was correct. not exploit phrase structure.,Results/Conclusion
We ensured that the gold standard dependencies of all systems compared were identical.,Results/Conclusion
"Table 2 shows that the model described here performs as well or better than previous comparable systems, including that of Yamada and Matsumoto (2003).",Results/Conclusion
"Their method has the potential advantage that SVM batch training takes into account all of the constraints from all training instances in the optimization, whereas online training only considers constraints from one instance at a time.",Results/Conclusion
"However, they are fundamentally limited by their approximate search algorithm.",Results/Conclusion
"In contrast, our system searches the entire space of dependency trees and most likely benefits greatly from this.",Results/Conclusion
This difference is amplified when looking at the percentage of trees that correctly identify the root word.,Results/Conclusion
"The models that search the entire space will not suffer from bad approximations made early in the search and thus are more likely to identify the correct root, whereas the approximate algorithms are prone to error propagation, which culminates with attachment decisions at the top of the tree.",Results/Conclusion
"When comparing the two online learning models, it can be seen that MIRA outperforms the averaged perceptron method.",Results/Conclusion
"This difference is statistically significant, p < 0.005 (McNemar test on head selection accuracy).",Results/Conclusion
"In our Czech experiments, we used the dependency trees annotated in the Prague Treebank, and the predefined training, development and evaluation sections of this data.",Results/Conclusion
"The number of sentences in this data set is nearly twice that of the English treebank, leading to a very large number of features — 13, 450, 672.",Results/Conclusion
"But again, each instance uses just a handful of these features.",Results/Conclusion
For POS tags we used the automatically generated tags in the data set.,Results/Conclusion
"Though we made no language specific model changes, we did need to make some data specific changes.",Results/Conclusion
"In particular, we used the method of Collins et al. (1999) to simplify part-of-speech tags since the rich tags used by Czech would have led to a large but rarely seen set of POS features.",Results/Conclusion
"The model based on MIRA also performs well on Czech, again slightly outperforming averaged perceptron.",Results/Conclusion
"Unfortunately, we do not know of any other parsing systems tested on the same data set.",Results/Conclusion
The Czech parser of Collins et al. (1999) was run on a different data set and most other dependency parsers are evaluated using English.,Results/Conclusion
Learning a model from the Czech training data is somewhat problematic since it contains some crossing dependencies which cannot be parsed by the Eisner algorithm.,Results/Conclusion
One trick is to rearrange the words in the training set so that all trees are nested.,Results/Conclusion
This at least allows the training algorithm to obtain reasonably low error on the training set.,Results/Conclusion
We found that this did improve performance slightly to 83.6% accuracy.,Results/Conclusion
"It is well known that dependency trees extracted from lexicalized phrase structure parsers (Collins, 1999; Charniak, 2000) typically are more accurate than those produced by pure dependency parsers (Yamada and Matsumoto, 2003).",Results/Conclusion
"We compared our system to the Bikel re-implementation of the Collins parser (Bikel, 2004; Collins, 1999) trained with the same head rules of our system.",Results/Conclusion
There are two ways to extract dependencies from lexicalized phrase structure.,Results/Conclusion
"The first is to use the automatically generated dependencies that are explicit in the lexicalization of the trees, we call this system Collinsauto.",Results/Conclusion
"The second is to take just the phrase structure output of the parser and run the automatic head rules over it to extract the dependencies, we call this system Collins-rules.",Results/Conclusion
"Table 3 shows the results comparing our system, MIRA-Normal, to the Collins parser for English.",Results/Conclusion
All systems are implemented in Java and run on the same machine.,Results/Conclusion
"Interestingly, the dependencies that are automatically produced by the Collins parser are worse than those extracted statically using the head rules.",Results/Conclusion
"Arguably, this displays the artificialness of English dependency parsing using dependencies automatically extracted from treebank phrase-structure trees.",Results/Conclusion
"Our system falls in-between, better than the automatically generated dependency trees and worse than the head-rule extracted trees.",Results/Conclusion
"Since the dependencies returned from our system are better than those actually learnt by the Collins parser, one could argue that our model is actually learning to parse dependencies more accurately.",Results/Conclusion
"However, phrase structure parsers are built to maximize the accuracy of the phrase structure and use lexicalization as just an additional source of information.",Results/Conclusion
"Thus it is not too surprising that the dependencies output by the Collins parser are not as accurate as our system, which is trained and built to maximize accuracy on dependency trees.",Results/Conclusion
"In complexity and run-time, our system is a huge improvement over the Collins parser.",Results/Conclusion
"The final system in Table 3 takes the output of Collins-rules and adds a feature to MIRA-Normal that indicates for given edge, whether the Collins parser believed this dependency actually exists, we call this system MIRA-Collins.",Results/Conclusion
This is a well known discriminative training trick — using the suggestions of a generative system to influence decisions.,Results/Conclusion
This system can essentially be considered a corrector of the Collins parser and represents a significant improvement over it.,Results/Conclusion
"However, there is an added complexity with such a model as it requires the output of the O(n5) Collins parser.",Results/Conclusion
One question that can be asked is how justifiable is the k-best MIRA approximation.,Results/Conclusion
"Table 4 indicates the accuracy on testing and the time it took to train models with k = 1, 2, 5, 10, 20 for the English data set.",Results/Conclusion
"Even though the parsing algorithm is proportional to O(k log k), empirically, the training times scale linearly with k. Peak performance is achieved very early with a slight degradation around k=20.",Results/Conclusion
The most likely reason for this phenomenon is that the model is overfitting by ensuring that even unlikely trees are separated from the correct tree proportional to their loss.,Results/Conclusion
We described a successful new method for training dependency parsers.,Results/Conclusion
"We use simple linear parsing models trained with margin-sensitive online training algorithms, achieving state-of-the-art performance with relatively modest training times and no need for pruning heuristics.",Results/Conclusion
We evaluated the system on both English and Czech data to display state-of-theart performance without any language specific enhancements.,Results/Conclusion
"Furthermore, the model can be augmented to include features over lexicalized phrase structure parsing decisions to increase dependency accuracy over those parsers.",Results/Conclusion
We plan on extending our parser in two ways.,Results/Conclusion
"First, we would add labels to dependencies to represent grammatical roles.",Results/Conclusion
Those labels are very important for using parser output in tasks like information extraction or machine translation.,Results/Conclusion
"Second, we are looking at model extensions to allow nonprojective dependencies, which occur in languages such as Czech, German and Dutch.",Results/Conclusion
J. Eisner and G. Satta.,Results/Conclusion
1999.,Results/Conclusion
Efficient parsing for bilexical context-free grammars and head-automaton grammars.,Results/Conclusion
In Proc.,Results/Conclusion
ACL.,Results/Conclusion
"Acknowledgments: We thank Jan Hajiˇc for answering queries on the Prague treebank, and Joakim Nivre for providing the Yamada and Matsumoto (2003) head rules for English that allowed for a direct comparison with our systems.",Results/Conclusion
"This work was supported by NSF ITR grants 0205456, 0205448, and 0428193.",Results/Conclusion
