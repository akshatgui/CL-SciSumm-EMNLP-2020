col1,col2
"Systems based on synchronous grammars and tree transducers promise to improve the quality of statistical machine translation output, but are often very computationally intensive.",Introduction
"The complexity is exponential in the size of individual grammar rules due to arbitrary re-orderings between the two languages, and rules extracted from parallel corpora can be quite large.",Introduction
We devise a linear-time algorithm for factoring syntactic re-orderings by binarizing synchronous rules when possible and show that the resulting rule set significantly improves the speed and accuracy of a state-of-the-art syntax-based machine translation system.,Introduction
"Several recent syntax-based models for machine translation (Chiang, 2005; Galley et al., 2004) can be seen as instances of the general framework of synchronous grammars and tree transducers.",Experiment/Discussion
"In this framework, both alignment (synchronous parsing) and decoding can be thought of as parsing problems, whose complexity is in general exponential in the number of nonterminals on the right hand side of a grammar rule.",Experiment/Discussion
"To alleviate this problem, we investigate bilingual binarization to factor the synchronous grammar to a smaller branching factor, although it is not guaranteed to be successful for any synchronous rule with arbitrary permutation.",Experiment/Discussion
In particular: • We develop a technique called synchronous binarization and devise a fast binarization algorithm such that the resulting rule set allows efficient algorithms for both synchronous parsing and decoding with integrated n-gram language models.,Experiment/Discussion
"• We examine the effect of this binarization method on end-to-end machine translation quality, compared to a more typical baseline method.",Experiment/Discussion
"• We examine cases of non-binarizable rules in a large, empirically-derived rule set, and we investigate the effect on translation quality when excluding such rules.",Experiment/Discussion
"Melamed (2003) discusses binarization of multitext grammars on a theoretical level, showing the importance and difficulty of binarization for efficient synchronous parsing.",Experiment/Discussion
"One way around this difficulty is to stipulate that all rules must be binary from the outset, as in inversion-transduction grammar (ITG) (Wu, 1997) and the binary synchronous context-free grammar (SCFG) employed by the Hiero system (Chiang, 2005) to model the hierarchical phrases.",Experiment/Discussion
"In contrast, the rule extraction method of Galley et al. (2004) aims to incorporate more syntactic information by providing parse trees for the target language and extracting tree transducer rules that apply to the parses.",Experiment/Discussion
"This approach results in rules with many nonterminals, making good binarization techniques critical.",Experiment/Discussion
"Suppose we have the following SCFG, where superscripts indicate reorderings (formal definitions of SCFGs can be found in Section 2): VP held a meeting, juxing le huitan PP with Sharon, yu Shalong Decoding can be cast as a (monolingual) parsing problem since we only need to parse the sourcelanguage side of the SCFG, as if we were constructing a CFG projected on Chinese out of the SCFG.",Experiment/Discussion
The only extra work we need to do for decoding is to build corresponding target-language (English) subtrees in parallel.,Experiment/Discussion
"In other words, we build synchronous trees when parsing the source-language input, as shown in Figure 1.",Experiment/Discussion
"To efficiently decode with CKY, we need to binarize the projected CFG grammar.'",Experiment/Discussion
Rules can be binarized in different ways.,Experiment/Discussion
"For example, we could binarize the first rule left to right or right to left:",Experiment/Discussion
We call those intermediate symbols (e.g.,Experiment/Discussion
"VPP-VP) virtual nonterminals and corresponding rules virtual rules, whose probabilities are all set to 1.",Experiment/Discussion
"These two binarizations are no different in the translation-model-only decoding described above, just as in monolingual parsing.",Experiment/Discussion
"However, in the source-channel approach to machine translation, we need to combine probabilities from the translation model (an SCFG) with the language model (an ngram), which has been shown to be very important for translation quality (Chiang, 2005).",Experiment/Discussion
"To do bigram-integrated decoding, we need to augment each chart item (X, i, j) with two target-language boundary words u and v to produce a bigram-item like u X v \ , following the dynamic program(i j ming algorithm of Wu (1996).",Experiment/Discussion
Now the two binarizations have very different effects.,Experiment/Discussion
"In the first case, we first combine NP with PP: where p and q are the scores of antecedent items.",Experiment/Discussion
This situation is unpleasant because in the targetlanguage NP and PP are not contiguous so we cannot apply language model scoring when we build the VNP-PP item.,Experiment/Discussion
"Instead, we have to maintain all four boundary words (rather than two) and postpone the language model scoring till the next step where VNP-PP is combined with C held ··· meeting l /I to form an S item.",Experiment/Discussion
We call this binarization method monolingual binarization since it works only on the source-language projection of the rule without respecting the constraints from the other side.,Experiment/Discussion
"This scheme generalizes to the case where we have n nonterminals in a SCFG rule, and the decoder conservatively assumes nothing can be done on language model scoring (because target-language spans are non-contiguous in general) until the real nonterminal has been recognized.",Experiment/Discussion
"In other words, targetlanguage boundary words from each child nonterminal of the rule will be cached in all virtual nonterminals derived from this rule.",Experiment/Discussion
"In the case of m-gram integrated decoding, we have to maintain 2(m − 1) boundary words for each child nonterminal, which leads to a prohibitive overall complexity of O(|w|3+2n(m−1)), which is exponential in rule size (Huang et al., 2005).",Experiment/Discussion
"Aggressive pruning must be used to make it tractable in practice, which in general introduces many search errors and adversely affects translation quality.",Experiment/Discussion
"In the second case, however: Here since PP and VP are contiguous (but swapped) in the target-language, we can include the language model score by adding Pr(with  |meeting), and the resulting item again has two boundary words.",Experiment/Discussion
Later we add Pr(held  |Powell) when the resulting item is combined with � Powell ��� Powell form an S item.,Experiment/Discussion
"As illustrated in Figure 2, VPP-VP has contiguous spans on both source and target sides, so that we can generate a binary-branching SCFG: In this case m-gram integrated decoding can be done in O(|w|3+4(m−1)) time which is much lowerorder polynomial and no longer depends on rule size (Wu, 1996), allowing the search to be much faster and more accurate facing pruning, as is evidenced in the Hiero system of Chiang (2005) where he restricts the hierarchical phrases to be a binary SCFG.",Experiment/Discussion
The benefit of binary grammars also lies in synchronous parsing (alignment).,Experiment/Discussion
"Wu (1997) shows that parsing a binary SCFG is in O(|w|6) while parsing SCFG is NP-hard in general (Satta and Peserico, 2005).",Experiment/Discussion
The same reasoning applies to tree transducer rules.,Experiment/Discussion
"Suppose we have the following tree-to-string rules, following Galley et al. (2004): where the reorderings of nonterminals are denoted by variables xi.",Experiment/Discussion
Notice that the first rule has a multi-level lefthand side subtree.,Experiment/Discussion
"This system can model nonisomorphic transformations on English parse trees to “fit” another language, for example, learning that the (S (V O)) structure in English should be transformed into a (V S O) structure in Arabic, by looking at two-level tree fragments (Knight and Graehl, 2005).",Experiment/Discussion
"From a synchronous rewriting point of view, this is more akin to synchronous tree substitution grammar (STSG) (Eisner, 2003).",Experiment/Discussion
This larger locality is linguistically motivated and leads to a better parameter estimation.,Experiment/Discussion
"By imagining the left-hand-side trees as special nonterminals, we can virtually create an SCFG with the same generative capacity.",Experiment/Discussion
The technical details will be explained in Section 3.2.,Experiment/Discussion
"In general, if we are given an arbitrary synchronous rule with many nonterminals, what are the good decompositions that lead to a binary grammar?",Experiment/Discussion
Figure 2 suggests that a binarization is good if every virtual nonterminal has contiguous spans on both sides.,Experiment/Discussion
We formalize this idea in the next section.,Experiment/Discussion
A synchronous CFG (SCFG) is a context-free rewriting system for generating string pairs.,Experiment/Discussion
Each rule (synchronous production) rewrites a nonterminal in two dimensions subject to the constraint that the sequence of nonterminal children on one side is a permutation of the nonterminal sequence on the other side.,Experiment/Discussion
Each co-indexed child nonterminal pair will be further rewritten as a unit.2 We define the language L(G) produced by an SCFG G as the pairs of terminal strings produced by rewriting exhaustively from the start symbol.,Experiment/Discussion
"As shown in Section 3.2, terminals do not play an important role in binarization.",Experiment/Discussion
So we now write rules in the following notation: where each Xi is a variable which ranges over nonterminals in the grammar and π is the permutation of the rule.,Experiment/Discussion
We also define an SCFG rule as n-ary if its permutation is of n and call an SCFG n-ary if its longest rule is n-ary.,Experiment/Discussion
Our goal is to produce an equivalent binary SCFG for an input n-ary SCFG.,Experiment/Discussion
"2In making one nonterminal play dual roles, we follow the definitions in (Aho and Ullman, 1972; Chiang, 2005), originally known as Syntax Directed Translation Schema (SDTS).",Experiment/Discussion
An alternative definition by Satta and Peserico (2005) allows co-indexed nonterminals taking different symbols in two dimensions.,Experiment/Discussion
"Formally speaking, we can construct an equivalent SDTS by creating a cross-product of nonterminals from two sides.",Experiment/Discussion
"See (Satta and Peserico, 2005, Sec.",Experiment/Discussion
4) for other details.,Experiment/Discussion
"However, not every SCFG can be binarized.",Experiment/Discussion
"In fact, the binarizability of an n-ary rule is determined by the structure of its permutation, which can sometimes be resistant to factorization (Aho and Ullman, 1972).",Experiment/Discussion
So we now start to rigorously define the binarizability of permutations.,Experiment/Discussion
A permuted sequence is a permutation of consecutive integers.,Experiment/Discussion
"For example, (3, 5, 4) is a permuted sequence while (2, 5) is not.",Experiment/Discussion
"As special cases, single numbers are permuted sequences as well.",Experiment/Discussion
A sequence a is said to be binarizable if it is a permuted sequence and either This is a recursive definition.,Experiment/Discussion
Each binarizable permuted sequence has at least one hierarchical binarization pattern.,Experiment/Discussion
"For instance, the permuted sequence (2, 3, 5, 4) is binarizable (with two possible binarization patterns) while (2, 4,1, 3) is not (see Figure 3).",Experiment/Discussion
An SCFG is said to be binarizable if the permutation of each synchronous production is binarizable.,Experiment/Discussion
We denote the class of binarizable SCFGs as bSCFG.,Experiment/Discussion
This set represents an important subclass of SCFG that is easy to handle (parsable in O(|w|6)) and covers many interesting longer-than-two rules.3 Proof.,Experiment/Discussion
"Once we decompose the permutation of n in the original rule into binary permutations, all that remains is to decorate the skeleton binary parse with nonterminal symbols and attach terminals to the skeleton appropriately.",Experiment/Discussion
We explain the technical details in the next section.,Experiment/Discussion
We have reduced the problem of binarizing an SCFG rule into the problem of binarizing its permutation.,Experiment/Discussion
"This problem can be cast as an instance of synchronous ITG parsing (Wu, 1997).",Experiment/Discussion
Here the parallel string pair that we are parsing is the integer sequence (1...n) and its permutation (7r(1)...7r(n)).,Experiment/Discussion
The goal of the ITG parsing is to find a synchronous tree that agrees with the alignment indicated by the permutation.,Experiment/Discussion
"In fact, as demonstrated previously, some permutations may have more than one binarization patterns among which we only need one.",Experiment/Discussion
"Wu (1997, Sec.",Experiment/Discussion
7) introduces a non-ambiguous ITG that prefers left-heavy binary trees so that for each permutation there is a unique synchronous derivation (binarization pattern).,Experiment/Discussion
"However, this problem has more efficient solutions.",Experiment/Discussion
"Shapiro and Stephens (1991, p. 277) informally present an iterative procedure where in each pass it scans the permuted sequence from left to right and combines two adjacent sub sequences whenever possible.",Experiment/Discussion
This procedure produces a left-heavy binarization tree consistent with the unambiguous ITG and runs in O(n2) time since we need n passes in the worst case.,Experiment/Discussion
"We modify this procedure and improve circle in Figure 4), which can be binarized only by analyzing interactions between rules.",Experiment/Discussion
Below is a simple example: it into a linear-time shift-reduce algorithm that only needs one pass through the sequence.,Experiment/Discussion
"The (unique) binarization tree bi(a) for a binarizable permuted sequence a is recursively defined as follows: For example, the binarization tree for (2, 3, 5, 4) is [[2, 3], (5, 4)], which corresponds to the binarization pattern in Figure 3(a).",Experiment/Discussion
"We use [] and () for straight and inverted combinations respectively, following the ITG notation (Wu, 1997).",Experiment/Discussion
The rightmost split ensures left-heavy binary trees.,Experiment/Discussion
The skeleton binarization algorithm is an instance of the widely used left-to-right shift-reduce algorithm.,Experiment/Discussion
"It maintains a stack for contiguous subsequences discovered so far, like 2-5, 1.",Experiment/Discussion
"In each iteration, it shifts the next number from the input and repeatedly tries to reduce the top two elements on the stack if they are consecutive.",Experiment/Discussion
See Algorithm 1 for details and Figure 5 for an example.,Experiment/Discussion
260 Proof.,Experiment/Discussion
—*: it is obvious that if the algorithm succeeds then a is binarizable using the binarization pattern recovered.,Experiment/Discussion
"+—: by a complete induction on n, the length of a.",Experiment/Discussion
"Base case: n = 1, trivial.",Experiment/Discussion
"Assume it holds for all n' < n. If a is binarizable, then let a = (b; c) be its rightmost binarizable split.",Experiment/Discussion
"By the induction hypothesis, the algorithm succeeds on the partial input b, reducing it to the single element on the stack and recovering its binarization tree bi(b).",Experiment/Discussion
Let c = c2).,Experiment/Discussion
If is binarizable and triggers our binarizer to make a straight combination of (b; must be true that nation.,Experiment/Discussion
We claim that c2 must be binarizable in this situation.,Experiment/Discussion
"So, (b, right of the rightmost binarizable split (b; c), which is a contradiction.",Experiment/Discussion
A similar contradiction will arise if b and can make an inverted concatenation.,Experiment/Discussion
"Therefore, the algorithm will scan through the whole c as if from the empty stack.",Experiment/Discussion
"By the induction hypothesis again, it will reduce c into s[1] on the stack and recover its binarization tree bi(c).",Experiment/Discussion
"Since b and c are combinable, the algorithm reduces s[0] and s[1] in the last step, forming the binari zation tree for a, which is either [bi(b), bi(c)] or (bi(b), bi(c)). based on the property of permutations, it c2) is a valid straight concatec2) is a binarizable split to the are exactly n shifts and at most reductions, and n−1 O(1) time.",Experiment/Discussion
"The running time of Algorithm 1 is linear in n, the length of the input sequence.",Experiment/Discussion
"This is because there each shift or reduction takes Without loss of generality, we have discussed how to binarize synchronous productions involving only nonterminals through binarizing the corresponding skeleton permutations.",Experiment/Discussion
We still need to tackle a few technical problems in the actual system.,Experiment/Discussion
"First, we are dealing with tree-to-string transducer rules.",Experiment/Discussion
"We view each left-hand side subtree as a monolithic nonterminal symbol and factor each transducer rule into two SCFG rules: one from the root nonterminal to the subtree, and the other from the subtree to the leaves.",Experiment/Discussion
In this way we can uniquely reconstruct the tree-to-string derivation using the two-step SCFG deri vation.,Experiment/Discussion
"For example, Algorithm 1 The Linear-time Binarization Algorithm consider the following tree-to-string rule: DT x2:NN the We create a specific nonterminal, say, T859, which is a unique identifier for the left-hand side subtree and generate the following two SCFG rules: Second, besides synchronous nonterminals, terminals in the two languages can also be present, as in the above example.",Experiment/Discussion
It turns out we can attach the terminals to the skeleton parse for the synchronous nonterminal strings quite freely as long as we can uniquely reconstruct the original rule from its binary parse tree.,Experiment/Discussion
In order to do so we need to keep track of sub-alignments including both aligned nonterminals and neighboring terminals.,Experiment/Discussion
"When binarizing the second rule above, we first run the skeleton algorithm to binarize the underlying permutation (1, 3, 2) to its binarization tree [1, (3, 2)].",Experiment/Discussion
"Then we do a post-order traversal to the skeleton tree, combining Chinese terminals (one at a time) at the leaf nodes and merging English terminals greedily at internal nodes: A pre-order traversal of the decorated binarization tree gives us the following binary SCFG rules: where the virtual nonterminals are: Analogous to the “dotted rules” in Earley parsing for monolingual CFGs, the names we create for the virtual nonterminals reflect the underlying sub-alignments, ensuring intermediate states can be shared across different tree-to-string rules without causing ambiguity.",Experiment/Discussion
The whole binarization algorithm still runs in time linear in the number of symbols in the rule (including both terminals and nonterminals).,Experiment/Discussion
"In this section, we answer two empirical questions.",Results/Conclusion
"It has been shown by Shapiro and Stephens (1991) and Wu (1997, Sec.",Results/Conclusion
4) that the percentage of binarizable cases over all permutations of length n quickly approaches 0 as n grows (see Figure 6).,Results/Conclusion
"However, for machine translation, it is more meaningful to compute the ratio of binarizable rules extracted from real text.",Results/Conclusion
"Our rule set is obtained by first doing word alignment using GIZA++ on a Chinese-English parallel corpus containing 50 million words in English, then parsing the English sentences using a variant of Collins parser, and finally extracting rules using the graph-theoretic algorithm of Galley et al. (2004).",Results/Conclusion
"We did a “spectrum analysis” on the resulting rule set with 50,879,242 rules.",Results/Conclusion
Figure 6 shows how the rules are distributed against their lengths (number of nonterminals).,Results/Conclusion
We can see that the percentage of non-binarizable rules in each bucket of the same length does not exceed 25%.,Results/Conclusion
"Overall, 99.7% of the rules are binarizable.",Results/Conclusion
"Even for the 0.3% nonbinarizable rules, human evaluations show that the majority of them are due to alignment errors.",Results/Conclusion
"It is also interesting to know that 86.8% of the rules have monotonic permutations, i.e. either taking identical or totally inverted order.",Results/Conclusion
We did experiments on our CKY-based decoder with two binarization methods.,Results/Conclusion
It is the responsibility of the binarizer to instruct the decoder how to compute the language model scores from children nonterminals in each rule.,Results/Conclusion
The baseline method is monolingual left-to-right binarization.,Results/Conclusion
"As shown in Section 1, decoding complexity with this method is exponential in the size of the longest rule and since we postpone all the language model scorings, pruning in this case is also biased. system bleu monolingual binarization 36.25 synchronous binarization 38.44 To move on to synchronous binarization, we first did an experiment using the above baseline system without the 0.3% non-binarizable rules and did not observe any difference in BLEU scores.",Results/Conclusion
"So we safely move a step further, focusing on the binarizable rules only.",Results/Conclusion
The decoder now works on the binary translation rules supplied by an external synchronous binarizer.,Results/Conclusion
"As shown in Section 1, this results in a simplified decoder with a polynomial time complexity, allowing less aggressive and more effective pruning based on both translation model and language model scores.",Results/Conclusion
We compare the two binarization schemes in terms of translation quality with various pruning thresholds.,Results/Conclusion
The rule set is that of the previous section.,Results/Conclusion
The test set has 116 Chinese sentences of no longer than 15 words.,Results/Conclusion
Both systems use trigram as the integrated language model.,Results/Conclusion
Figure 7 demonstrates that decoding accuracy is significantly improved after synchronous binarization.,Results/Conclusion
"The number of edges proposed during decoding is used as a measure of the size of search space, or time efficiency.",Results/Conclusion
Our system is consistently faster and more accurate than the baseline system.,Results/Conclusion
"We also compare the top result of our synchronous binarization system with the state-of-theart alignment-template approach (ATS) (Och and Ney, 2004).",Results/Conclusion
The results are shown in Table 1.,Results/Conclusion
Our system has a promising improvement over the ATS system which is trained on a larger data-set but tuned independently.,Results/Conclusion
Modeling reorderings between languages has been a major challenge for machine translation.,Results/Conclusion
"This work shows that the majority of syntactic reorderings, at least between languages like English and Chinese, can be efficiently decomposed into hierarchical binary reorderings.",Results/Conclusion
"From a modeling perspective, on the other hand, it is beneficial to start with a richer representation that has more transformational power than ITG or binary SCFG.",Results/Conclusion
Our work shows how to convert it back to a computationally friendly form without harming much of its expressiveness.,Results/Conclusion
"As a result, decoding with n-gram models can be fast and accurate, making it possible for our syntax-based system to overtake a comparable phrase-based system in BLEU score.",Results/Conclusion
"We believe that extensions of our technique to more powerful models such as synchronous tree-adjoining grammar (Shieber and Schabes, 1990) is an interesting area for further work.",Results/Conclusion
Acknowledgments Much of this work was done when H. Zhang and L. Huang were visiting USC/ISI.,Results/Conclusion
"The authors wish to thank Wei Wang, Jonathan Graehl and Steven DeNeefe for help with the experiments.",Results/Conclusion
"We are also grateful to Daniel Marcu, Giorgio Satta, and Aravind Joshi for discussions.",Results/Conclusion
This work was partially supported by NSF ITR IIS-09325646 and NSF ITR IIS-0428020.,Results/Conclusion
