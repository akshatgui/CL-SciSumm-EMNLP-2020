col1,col2
We present an algorithm for generating strings from logical form encodings that improves upon previous algorithms in that it places fewer restrictions on the class of grammars to which it is applicable.,{}
"In particular, unlike an Earley deduction generator (Shieber, 1988), it allows use of semantically nonmonotonic grammars, yet unlike topdown methods, it also permits left-recursion.",{}
The enabling design feature of the algorithm is its implicit traversal of the analysis tree for the string being generated in a semantic-head-driven fashion.,{}
The problem of generating a well-formed naturallanguage expression from an encoding of its meaning possesses certain properties which distinguish it from the converse problem of recovering a meaning encoding from a given natural-language expression.,"{'title': '1 Introduction', 'number': '1'}"
"In previous work (Shieber, 1988), however, one of us attempted to characterize these differing properties in such a way that a single uniform architecture, appropriately parameterized, might be used for both natural-language processes.","{'title': '1 Introduction', 'number': '1'}"
"In particular, we developed an architecture inspired by the Earley deduction work of Pereira and Warren (1983) but which generalized that work allowing for its use in both a parsing and generation mode merely by setting the values of a small number of parameters.","{'title': '1 Introduction', 'number': '1'}"
"As a method for generating natural-language expressions, the Earley deduction method is reasonably successful along certain dimensions.","{'title': '1 Introduction', 'number': '1'}"
"It is quite simple, general in its applicability to a range of unification-based and logic grammar formalisms, and uniform, in that it places only one restriction (discussed below) on the form of the linguistic analyses allowed by the grammars used in generation.","{'title': '1 Introduction', 'number': '1'}"
"In particular, generation from grammars with recursions whose well-foundedness relies on lexical information will terminate; top-down generation regimes such as those of Wedekind (1988) or Dymetman and Isabelle (1988) lack this property, discussed further in Section 3.1.","{'title': '1 Introduction', 'number': '1'}"
"Unfortunately, the bottom-up, left-to-right processing regime of Earley generation—as it might be called—has its own inherent frailties.","{'title': '1 Introduction', 'number': '1'}"
"Efficiency considerations require that only grammars possessing a property of semantic monotonicity can be effectively used, and even for those grammars, processing can become overly nondeterministic.","{'title': '1 Introduction', 'number': '1'}"
The algorithm described in this paper is an attempt to resolve these problems in a satisfactory manner.,"{'title': '1 Introduction', 'number': '1'}"
"Although we believe that this algorithm could be seen as an instance of a uniform architecture for parsing and generation—just as the extended Earley parser (Shieber, 1985b) and the bottom-up generator were instances of the generalized Earley deduction architecture—our efforts to date have been aimed foremost toward the development of the algorithm for generation alone.","{'title': '1 Introduction', 'number': '1'}"
"We will have little to say about its relation to parsing, leaving such questions for later research.'","{'title': '1 Introduction', 'number': '1'}"
"2 Applicability of the Algorithm As does the Earley-based generator, the new algorithm assumes that the grammar is a unificationbased or logic grammar with a phrase-structure backbone and complex nonterminals.","{'title': '1 Introduction', 'number': '1'}"
"Furthermore, and again consistent with previous work, we assume that the nonterminals associate to the phrases they describe logical expressions encoding their possible meanings.","{'title': '1 Introduction', 'number': '1'}"
"We will describe the algorithm in terms of an implementation of it for definite-clause grammars (DCG), although we beI Martin Kay (personal communication) has developed a parsing algorithm that seems to be the parsing correlate to the generation algorithm presented here.","{'title': '1 Introduction', 'number': '1'}"
Its existence might point the way towards a uniform architecture. lieve the underlying method to be more broadly applicable.,"{'title': '1 Introduction', 'number': '1'}"
"A variant of our method is used in Van Noord's BUG (Bottom-Up Generator) system, part of MiMo2, an experimental machine translation system for translating international news items of Teletext, which uses a Prolog version of PATR-II similar to that of Hirsh (1987).","{'title': '1 Introduction', 'number': '1'}"
"According to Martin Kay (personal communication), the STREP machine translation project at the Center for the Study of Language and Information uses a version of our algorithm to generate with respect to grammars based on head-driven phrase-structure grammar (HPSG).","{'title': '1 Introduction', 'number': '1'}"
"Finally, Calder et al. (1989) report on a generation algorithm for unification categorial grammar that appears to be a special case of ours.","{'title': '1 Introduction', 'number': '1'}"
Existing generation algorithms have efficiency or termination problems with respect to certain classes of grammars.,"{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
We review the problems of both top-down and bottom-up regimes in this section.,"{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Consider a naive top-down generation mechanism that takes as input the semantics to generate from and a corresponding syntactic category and builds a complete tree, top-down, left-to-right by applying rules of the grammar nondeterministically to the fringe of the expanding tree.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"This control regime is realized, for instance, when running a DCG &quot;backwards&quot; as a generator.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Clearly, such a generator may not terminate.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"For example, consider a grammar that includes the rule s/S --> np/NP, vp(NP)/S.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"(The intention is that verb phrases like, say, &quot;loves Mary&quot; be associated with a nonterminal vp(X)/love(X, nary).)","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Once this rule is applied to the goal s/love(john, mary), the subgoal np/NP will be considered.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"But the generation search space for that goal is infinite and so has infinite branches, because all noun phrases, and thus arbitrarily large ones, match the goal.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
This is an instance of the general problem known from logic programming that a logic program may not terminate when called with a goal less instantiated than what was intended by the program's designer.,"{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Dymetman and Isabelle (1988), noting this problem, propose allowing the grammarwriter to specify a separate goal ordering for parsing and for generation.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"For the case at hand, the solution is to generate the VP first—from the goal vp(NP)/loves(john, mary)—in the course of which the variable NP will become bound so that the generation from np/NP will terminate.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Wedekind (1988) achieves this goal by expanding first nodes that are connected, that is, whose semantics is instantiated.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Since the NP is not connected in this sense, but the VP is, the latter will be expanded first.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"In essence, the technique is a kind of goal freezing (Colmerauer, 1982) or implicit wail declaration (Naish, 1986).","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"For cases in which the a priori ordering of goals is insufficient, Dymetman and Isabelle also introduce goal freezing to control expansion.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Although vastly superior to the naive top-down algorithm, even this sort of amended top-down approach to generation based on goal freezing under one guise or another fails to terminate with certain linguistically plausible analyses.","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"For example, the &quot;complements&quot; rule given by Shieber (1985a, pages 77-78) in the PATR-II formalism can be encoded as the DCG-style rule:","{'title': '3 Problems Yvitll Existing Generators', 'number': '2'}"
"Top-down generation using this rule will be forced to expand the lower VP before its complement, since Compl is uninstantiated initially.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"But application of the rule can recur indefinitely, leading to nontermination.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
The problem arises because there is no limit to the size of the subcategorization list.,"{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"Although one might propose an ad hoc upper bound for lexical entries, even this expedient may be insufficient.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"In analyses of Dutch cross-serial verb constructions (Evers, 1975; Huybrechts, 1984), subcategorization lists such as these may be appended by syntactic rules (Moortgat, 1984; Steedman, 1985; Pollard, 1988), resulting in indefinitely long lists.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"Consider the Dutch sentence dat [Jan [Marie [de oppasser [de olifanten that John Mary the keeper the elephants (zag helpen voeren]]]] saw help feed that John saw Mary help the keeper feed the elephants The string of verbs is analysed by appending their subcategorization lists as follows: Subcategorization lists under this analysis can have any length, and it is impossible to predict from a semantic structure the size of its corresponding subcategorization list merely by examining the lexicon.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"In summary, top-down generation algorithms, even if controlled by the instantiation status of goals, can fail to terminate on certain grammars.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
In the case given above the well-foundedness of the generation process resides in lexical information unavailable to top-down regimes.,"{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"The bottom-up Earley-deduction generator does not fall prey to these problems of nontermination in the face of recursion, because lexical information is available immediately.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"However, several important frailties of the Earley generation method were noted, even in the earlier work.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"For efficiency, generation using this Earley deduction method requires an incomplete search strategy, filtering the search space using semantic information.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"The semantic filter makes generation from a logical form computationally feasible, but preserves completeness of the generation process only in the case of semantically monotonic grammars — those grammars in which the semantic component of each right-hand-side nonterminal subsumes some portion of the semantic component of the left-hand-side.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
The semantic monotonicity constraint itself is quite restrictive.,"{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
Although it is intuitively plausible that the semantic content of subconstituents ought to play a role in the semantics of their combination—this is just a kind of compositionality claim—there are certain cases in which reasonable linguistic analyses might violate this intuition.,"{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"In general, these cases arise when a particular lexical item is stipulated to occur, the stipulation being either lexical (as in the case of particles or idioms) or grammatical (as in the case of expletive expressions).","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"Second, the left-to-right scheduling of Earley parsing, geared as it is toward the structure of the string rather than that of its meaning, is inherently more appropriate for parsing than generation.2 This manifests itself in an overly high degree of nondeterminism in the generation process.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"For instance, various nondeterministic possibilities for generating a noun phrase (using different cases, say) might be entertained merely because the NP occurs before the verb which would more fully specify, and therefore limit, the options.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
This nondeterminism has been observed in practice.,"{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"We can think of a parsing or generation process as discovering an analysis tree,3 one admitted by the grammar and satisfying certain syntactic or semantic conditions, by traversing a virtual tree and constructing the actual tree during the traversal.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"The conditions to be satisfied—possessing a given yield in the parsing case, or having a root node labeled with given semantic information in the case of generation—reflect the different premises of the two types of problem.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"From this point of view, a naive top-down parser or generator performs a depth-first, left-to-right traversal of the tree.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"Completion steps in Earley's algorithm, whether used for parsing or generation, correspond to a post-order traversal (with prediction acting as a pre-order filter).","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"The left-to-right traversal order of both of these methods is geared towards the given information in a parsing problem, the string, rather than that of a generation problem, the goal logical form.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"It is exactly this mismatch between structure of the traversal and 2Pereira and Warren (1983) point out that Earley deduction is not restricted to a left-to-right expansion of goals, but this suggestion was not followed up with a specific algorithm addressing the problems discussed here.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
3We use the term &quot;analysis tree&quot; rather than the more familiar &quot;parse tree&quot; to make clear that the source of the tree is not necessarily a parsing process; rather the tree serves only to codify a particular analysis of the structure of the string. structure of the problem premise that accounts for the profligacy of these approaches when used for generation.,"{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"Thus for generation, we want a traversal order geared to the premise of the generation problem, that is, to the semantic structure of the sentence.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"The new algorithm is designed to reflect such a traversal strategy respecting the semantic structure of the string being generated, rather than the string itself.","{'title': 'vp(Head, Syncat) -->', 'number': '3'}"
"Given an analysis tree for a sentence, we define the pivot node as the lowest node in the tree such that it and all higher nodes up to the root have the same semantics.","{'title': '4 The New Algorithm', 'number': '4'}"
"Intuitively speaking, the pivot serves as the semantic head of the root node.","{'title': '4 The New Algorithm', 'number': '4'}"
"Our traversal will proceed both top-down and bottomup from the pivot, a sort of semantic-head-driven traversal of the tree.","{'title': '4 The New Algorithm', 'number': '4'}"
The choice of this traversal allows a great reduction in the search for rules used to build the analysis tree.,"{'title': '4 The New Algorithm', 'number': '4'}"
"To be able to identify possible pivots, we distinguish a subset of the rules of the grammar, the chain rules, in which the semantics of some right-hand-side element is identical to the semantics of the left-hand side.","{'title': '4 The New Algorithm', 'number': '4'}"
"The right-hand-side element will be called the rule's semantic head.4 The traversal, then, will work top-down from the pivot using a nonchain rule, for if a chain rule were used, the pivot would not be the lowest node sharing semantics with the root.","{'title': '4 The New Algorithm', 'number': '4'}"
"Instead, the pivot's semantic head would be.","{'title': '4 The New Algorithm', 'number': '4'}"
"After the nonchain rule 4 In case there are two right-hand-side elements that are semantically identical to the left-hand side, there is some freedom in choosing the semantic head, although the choice is not without ramifications.","{'title': '4 The New Algorithm', 'number': '4'}"
"For instance, in some analyses of NP structure, a rule such as np/NP --> det/NP , nbar/NP . is postulated.","{'title': '4 The New Algorithm', 'number': '4'}"
"In general, a chain rule is used bottom-up from its semantic head and top-down on the non-semantichead siblings.","{'title': '4 The New Algorithm', 'number': '4'}"
"Thus, if a non-semantic-head subconstituent has the same semantics as the left-hand-side, a recursive top-down generation with the same semantics will be invoked.","{'title': '4 The New Algorithm', 'number': '4'}"
"In theory, this can lead to nontermination, unless syntactic factors eliminate the recursion, as they would in the rule above regardless of which element is chosen as semantic head.","{'title': '4 The New Algorithm', 'number': '4'}"
In a rule for relative clause introduction such as the following (in highly abbreviated form) we can (and must) choose the nominal as semantic head to effect termination.,"{'title': '4 The New Algorithm', 'number': '4'}"
"However, there are other problematic cases, such as verb-movement analyses of verb-second languages, whose detailed discussion is beyond the scope of this paper. is chosen, each of its children must be generated recursively.","{'title': '4 The New Algorithm', 'number': '4'}"
"The bottom-up steps to connect the pivot to the root of the analysis tree can be restricted to chain rules only, as the pivot (along with all intermediate nodes) has the same semantics as the root and must therefore be the semantic head.","{'title': '4 The New Algorithm', 'number': '4'}"
"Again, after a chain rule is chosen to move up one node in the tree being constructed, the remaining (nonsemantic-head) children must be generated recursively.","{'title': '4 The New Algorithm', 'number': '4'}"
"The top-down base case occurs when the nonchain rule has no nonterminal children, i.e., it introduces lexical material only.","{'title': '4 The New Algorithm', 'number': '4'}"
The bottom-up base case occurs when the pivot and root are trivially connected because they are one and the same node.,"{'title': '4 The New Algorithm', 'number': '4'}"
"To make the description more explicit, we will develop a Prolog implementation of the algorithm for DCGs, along the way introducing some niceties of the algorithm previously glossed over.","{'title': '4 The New Algorithm', 'number': '4'}"
"In the implementation, a term of the form node (Cat , PO, P) represents a phrase with the syntactic and semantic information given by Cat starting at position PO and ending at position P in the string being generated.","{'title': '4 The New Algorithm', 'number': '4'}"
"As usual for DCGs, a string position is represented by the list of string elements after the position.","{'title': '4 The New Algorithm', 'number': '4'}"
"The generation process starts with a goal category and attempts to generate an appropriate node, in the process instantiating the generated string. gen(Cat , String) : generate (node (Cat , String , 0 ) ) .","{'title': '4 The New Algorithm', 'number': '4'}"
"To generate from a node, we nondeterministically choose a nonchain rule whose left-hand side will serve as the pivot.","{'title': '4 The New Algorithm', 'number': '4'}"
"For each right-hand-side element, we recursively generate, and then connect the pivot to the root.","{'title': '4 The New Algorithm', 'number': '4'}"
The processing within generate_rhs is a simple iteration. generate_rhs(0). generate_rhs([First 1 Rest]) :generate (First) generate_rhs(Rest).,"{'title': '4 The New Algorithm', 'number': '4'}"
"The connection of a pivot to the root, as noted before, requires choice of a chain rule whose semantic head matches the pivot, and the recursive generation of the remaining right-handside.","{'title': '4 The New Algorithm', 'number': '4'}"
"We assume a predicate applicable_chain_ rule(SemHead, LHS, Root, RHS) that holds if there is a chain rule admitting a node LHS as the left-hand-side, SemHead as its semantic head, and RHS as the remaining right-hand-side nodes, such that the left-hand-side node and the root node Root can themselves be connected.","{'title': '4 The New Algorithm', 'number': '4'}"
"% generate remaining siblings generate_rhs(RHS), % connect the new parent to the root connect(LHS, Root).","{'title': '4 The New Algorithm', 'number': '4'}"
The base case occurs when the root and the pivot are the same.,"{'title': '4 The New Algorithm', 'number': '4'}"
Identity checks like this one must be implemented correctly in the generator by using a sound unification algorithm with the occurs check.,"{'title': '4 The New Algorithm', 'number': '4'}"
(The default unification in most Prolog systems is unsound in this respect.),"{'title': '4 The New Algorithm', 'number': '4'}"
"For example, a grammar with a gap-threading treatment of wh-movement (Pereira, 1981; Pereira and Shieber, 1985) might include the rule np(Agr, [np(Agr)/Seml X)-X)/Sem ---> . stating that an NP with agreement Agr and semantics Sem can be empty provided that the list of gaps in the NP can be represented as the difference list [rip(Agr)/Sem I X] -X, that is the list containing an NP gap with the same agreement features Agr (Pereira and Shieber, 1985, p. 128).","{'title': '4 The New Algorithm', 'number': '4'}"
"Because the above rule is a nonchain rule, it will be considered when trying to generate any nongap NP, such as the proper noun np(3-sing,G-G)/john.","{'title': '4 The New Algorithm', 'number': '4'}"
"The base case of connect will try to unify that term with the head of the rule above, leading to the attempted unification of X with [rip (Agr) /Sem I X] , an occurs-check failure.","{'title': '4 The New Algorithm', 'number': '4'}"
"The base case, incorporating the explicit call to a sound unification algorithm is thus as follows: connect(Pivot, Root) :% trivially connect pivot to root unify(Pivot, Root).","{'title': '4 The New Algorithm', 'number': '4'}"
"Now, we need only define the notion of an applicable chain or nonchain rule.","{'title': '4 The New Algorithm', 'number': '4'}"
A nonchain rule is applicable if the semantics of the left-hand-side of the rule (which is to become the pivot) matches that of the root.,"{'title': '4 The New Algorithm', 'number': '4'}"
"Further, we require a top-down check that syntactically the pivot can serve as the semantic head of the root.","{'title': '4 The New Algorithm', 'number': '4'}"
"For this purpose, we assume a predicate chained_nodes that codifies the transitive closure of the semantic head relation over categories.","{'title': '4 The New Algorithm', 'number': '4'}"
"This is the correlate of the link relation used in left-corner parsers with topdown filtering; we direct the reader to the discussion by Matsumoto et al. (1983) or Pereira and Shieber (1985, p. 182) for further information.","{'title': '4 The New Algorithm', 'number': '4'}"
A chain rule is applicable to connect a pivot to a root if the pivot can serve as the semantic head of the rule and the left-hand-side of the rule is appropriate for linking to the root.,"{'title': '4 The New Algorithm', 'number': '4'}"
"% make sure the categories can connect chained_nodes(Parent, Root).","{'title': '4 The New Algorithm', 'number': '4'}"
"The information needed to guide the generation (given as the predicates chain_rule, non_chain_rule, and chained_nodes) can be computed automatically from the grammar; a program to compile a DCG into these tables has in fact been implemented.","{'title': '4 The New Algorithm', 'number': '4'}"
The details of the process will not be discussed further.,"{'title': '4 The New Algorithm', 'number': '4'}"
"The careful reader will have noticed, however, that no attention has been given to the issue of terminal symbols on the right-hand sides of rules.","{'title': '4 The New Algorithm', 'number': '4'}"
"During the compilation process, the right-hand side of a rule is converted from a list of categories and terminal strings to a list of nodes connected together by the difference-list threading technique used for standard DCG compilation.","{'title': '4 The New Algorithm', 'number': '4'}"
"At that point, terminal strings can be introduced into the string threading and need never be considered further.","{'title': '4 The New Algorithm', 'number': '4'}"
We turn now to a simple example to give a sense of the order of processing pursued by this generation algorithm.,"{'title': '4 The New Algorithm', 'number': '4'}"
The grammar fragment in Figure 1 uses an infix operator / to separate syntactic and semantic category information.,"{'title': '4 The New Algorithm', 'number': '4'}"
Subcategorization for complements is performed lexically.,"{'title': '4 The New Algorithm', 'number': '4'}"
"Consider the generation from the category sentence/decl(call_up(john,friends)).","{'title': '4 The New Algorithm', 'number': '4'}"
The analysis tree that we will be implicitly traversing in the course of generation is given in Figure 2.,"{'title': '4 The New Algorithm', 'number': '4'}"
The rule numbers are keyed to the grammar.,"{'title': '4 The New Algorithm', 'number': '4'}"
The pivots chosen during generation and the branches corresponding to the semantic head relation are shown in boldface.,"{'title': '4 The New Algorithm', 'number': '4'}"
We begin by attempting to find a nonchain rule that will define the pivot.,"{'title': '4 The New Algorithm', 'number': '4'}"
"This is a rule whose left-hand-side semantics matches the root semantics decl(call_up(john,friends)) (although its syntax may differ).","{'title': '4 The New Algorithm', 'number': '4'}"
"In fact, the only such nonchain rule is We conjecture that the pivot is labeled sentence/decl(call_up( j ohn, friends) ) In terms of the tree traversal, we are implicitly choosing the root node [a] as the pivot.","{'title': '4 The New Algorithm', 'number': '4'}"
"We recursively generate from the child's node [b], whose category is s(finite)/can_up(john,friends).","{'title': '4 The New Algorithm', 'number': '4'}"
"For this category, the pivot (which will turn out to be node [f]) will be defined by the nonchain rule (If there were other forms of the verb, these would be potential candidates, but would be eliminated by the chained_nodes check, as the semantic head relation requires identity of the verb form of a sentence and its VP head.)","{'title': '4 The New Algorithm', 'number': '4'}"
"Again, we recursively generate for all the nonterminal elements of the righthand side of this rule, of which there are none.","{'title': '4 The New Algorithm', 'number': '4'}"
We must therefore connect the pivot [f] to the root [b].,"{'title': '4 The New Algorithm', 'number': '4'}"
A chain rule whose semantic head matches the pivot must be chosen.,"{'title': '4 The New Algorithm', 'number': '4'}"
"The only choice rule is the rule Unifying in the pivot, we find that we must recursively generate the remaining RHS element np(_)/fr iends, and then connect the left-hand side node [e] with category vp(finite, [lex/up, np(3-sing)/john]) /call_up(john,friends) to the same root [b].","{'title': '4 The New Algorithm', 'number': '4'}"
The recursive generation yields a node covering the string &quot;friends&quot; following the previously generated string &quot;calls&quot;.,"{'title': '4 The New Algorithm', 'number': '4'}"
"The recursive connection will use the same chain rule, generating the particle &quot;up&quot;, and the new node to be connected [d].","{'title': '4 The New Algorithm', 'number': '4'}"
This node requires the chain for connection.,"{'title': '4 The New Algorithm', 'number': '4'}"
"Again, the recursive generation for the subject yields the string &quot;John&quot;, and the new node to be connected s(inite)/call_up(john, friends).","{'title': '4 The New Algorithm', 'number': '4'}"
This last node connects to the root [b] by virtue of identity.,"{'title': '4 The New Algorithm', 'number': '4'}"
"This completes the process of generating top-down from the original pivot sentence/ decl(call_up(john,friends)).","{'title': '4 The New Algorithm', 'number': '4'}"
All that remains is to connect this pivot to the original root.,"{'title': '4 The New Algorithm', 'number': '4'}"
"Again, the process is trivial, by virtue of the base case for connection.","{'title': '4 The New Algorithm', 'number': '4'}"
"The generation process is thus completed, yielding the string &quot;John calls friends up&quot;.","{'title': '4 The New Algorithm', 'number': '4'}"
The drawing summarizes the generation process by showing which steps were performed topdown or bottom-up by arrows on the analysis tree branches.,"{'title': '4 The New Algorithm', 'number': '4'}"
"The grammar presented here was perforce trivial, for expository reasons.","{'title': '4 The New Algorithm', 'number': '4'}"
"We have developed more extensive experimental grammars that can generate relative clauses with gaps and sentences with quantified NPs from quantified logical forms by using a version of Cooper storage (Cooper, 1983).","{'title': '4 The New Algorithm', 'number': '4'}"
We give an outline of our treatment of quantification in Section 6.2.,"{'title': '4 The New Algorithm', 'number': '4'}"
Several properties of the algorithm are exhibited by the preceding example example.,"{'title': '5 Important Properties of', 'number': '5'}"
"First, the order of processing is not left-to-right.","{'title': '5 Important Properties of', 'number': '5'}"
The verb was generated before any of its complements.,"{'title': '5 Important Properties of', 'number': '5'}"
"Because of this, the semantic information about the particle &quot;up&quot; was available, even though this information appears nowhere in the goal semantics.","{'title': '5 Important Properties of', 'number': '5'}"
"That is, the generator operated appropriately despite a semantically nonmonotonic grammar.","{'title': '5 Important Properties of', 'number': '5'}"
"In addition, full information about the subject, including agreement information was available before it was generated.","{'title': '5 Important Properties of', 'number': '5'}"
"Thus the nondeterminism that is an artifact of left-to-right processing, and a source of inefficiency in the Earley generator, is eliminated.","{'title': '5 Important Properties of', 'number': '5'}"
"Indeed, the example here was completely deterministic; all rule choices were forced.","{'title': '5 Important Properties of', 'number': '5'}"
"Finally, even though much of the processing is top-down, left-recursive rules (e.g., rule (3)) are still handled in a constrained manner by the algorithm.","{'title': '5 Important Properties of', 'number': '5'}"
"For these reasons, we feel that the semantichead-driven algorithm is a significant improvement over top-down methods and the previous bottom-up method based on Earley deduction.","{'title': '5 Important Properties of', 'number': '5'}"
We will now outline how the algorithm and the grammar it uses can be extended to encompass some important analyses and constraints.,"{'title': '6 Extensions', 'number': '6'}"
Wedekind (1988) defines completeness and coherence of a generation algorithm as follows.,"{'title': '6 Extensions', 'number': '6'}"
"Suppose a generator derives a string w from a logical form s, and the grammar assigns to w the logical form a.","{'title': '6 Extensions', 'number': '6'}"
"The generator is complete ifs always subsumes a and coherent if a always subsumes s. The generator defined in Section 4.1 is not coherent or complete in this sense; it requires only that a and s be compatible, that is, unifiable.","{'title': '6 Extensions', 'number': '6'}"
"If the logical-form language and semantic interpretation system provide a sound treatment of variable binding and scope, abstraction and application, completeness and coherence will be irrelevant because the logical form of any phrase will not contain free variables.","{'title': '6 Extensions', 'number': '6'}"
"However, neither semantic projections in lexical-functional grammar ( LFG) (Halvorsen and Kaplan, 1988) nor definite-clause grammars provide the means for such a sound treatment: logical-form variables or missing arguments of predicates are both encoded as unbound variables (attributes with unspecified values in the LFG semantic projection) at the description level.","{'title': '6 Extensions', 'number': '6'}"
Then completeness and coherence become important.,"{'title': '6 Extensions', 'number': '6'}"
"For example, suppose a grammar associated the following strings and logical forms. eat(john, X) 'John ate' eat(john, banana) 'John ate a banana' eat(john, nice(yellov(banana))) 'John ate a nice yellow banana' The generator of Section 4.1 would generate any of these sentences for the logical form eat(john, X) (because of its incoherence) and would generate 'John ate' for the logical form eat (john, banana) (because of its incompleteness).","{'title': '6 Extensions', 'number': '6'}"
"Coherence can be achieved by removing the confusion between object-level and metalevel variables mentioned above, that is, by treating logicalform variables as constants at the description level.","{'title': '6 Extensions', 'number': '6'}"
"In practice, this can be achieved by replacing each variable in the semantics from which we are generating by a new distinct constant (for instance with the numbervars predicate built into some implementations of Prolog).","{'title': '6 Extensions', 'number': '6'}"
These new constants will not unify with any augmentations to the semantics.,"{'title': '6 Extensions', 'number': '6'}"
"A suitable modification of our generator would be gen(Cat, String) :cat_semantics(Cat,Sem), numbervars(Sen,0,_), generate(node(Cat,String,0)).","{'title': '6 Extensions', 'number': '6'}"
This leaves us with the completeness problem.,"{'title': '6 Extensions', 'number': '6'}"
"This problem arises when there are phrases whose semantics are not ground at the description level, but instead subsume the goal logical form or generation.","{'title': '6 Extensions', 'number': '6'}"
"For instance, in our hypothetical example, the string 'John eats' will be generated for semantics eat(john, banana).","{'title': '6 Extensions', 'number': '6'}"
The solution is to test at the end of the generation procedure whether the feature structure that is found is complete with respect to the original feature structure.,"{'title': '6 Extensions', 'number': '6'}"
"However, because of the way in which top-down information is used, it is unclear what semantic information is derived by the rules themselves, and what semantic information is available because of unifications with the original semantics.","{'title': '6 Extensions', 'number': '6'}"
"For this reason, socalled &quot;shadow&quot; variables are added to the generator that represent the feature structure derived by the grammar itself.","{'title': '6 Extensions', 'number': '6'}"
Furthermore a copy of the semantics of the original feature structure is made at the start of the generation process.,"{'title': '6 Extensions', 'number': '6'}"
Completeness is achieved by testing whether the semantics of the shadow is subsumed by the copy.,"{'title': '6 Extensions', 'number': '6'}"
"We will outline here how to generate from a quantified logical form sentences with quantified NPs one of whose readings is the original logical form, that is, how to do quantifier-lowering automatically.","{'title': '6 Extensions', 'number': '6'}"
"For this, we will associate a quantifier store with certain categories and add to the grammar suitable store-manipulation rules.","{'title': '6 Extensions', 'number': '6'}"
Each category whose constituents may create store elements will have a store feature.,"{'title': '6 Extensions', 'number': '6'}"
"Furthermore, for each such category whose semantics can be the scope of a quantifier, there will be an optional nonchain rule to take the top element of an ordered store and apply it to the semantics of the category.","{'title': '6 Extensions', 'number': '6'}"
"For example, here is the rule for sentences: s(Form, GO-G, Store)/quant(Q,X,R,S) ---> s(Form, GO-G, [qterm(Q,X,R)IStore])/S.","{'title': '6 Extensions', 'number': '6'}"
"The term quant (Q,X,R,S) represents a quantified formula with quantifier Q, bound variable X, restriction R and scope S, and qterm(Q,X,R) is the corresponding store element.","{'title': '6 Extensions', 'number': '6'}"
"In addition, some mechanism is needed to combine the stores of the immediate constituents of a phrase into a store for the phrase.","{'title': '6 Extensions', 'number': '6'}"
"For example, the combination of subject and complement stores for a verb into a clause store is done in one of our test grammars by lexical rules such as which states that the store SC of a clause with main verb 'love' and the stores SS and SO of the subject and object the verb subcategorizes for satisfy the constraint shuffle(SS, SO, SC), meaning that Sc is an interleaving of elements of SS and SO in their original order.","{'title': '6 Extensions', 'number': '6'}"
"5 Finally, it is necessary to deal with the noun phrases that create store elements.","{'title': '6 Extensions', 'number': '6'}"
"Ignoring the issue of how to treat quantifiers from within complex noun phrases, we need lexical rules for determiners, of the form det(3-sing,X,P,[qterm(every,X,P)])/X ---> [every]. stating that the semantics of a quantified NP is simply the variable bound by the store element arising from the NP.","{'title': '6 Extensions', 'number': '6'}"
"For rules of this form to work properly, it is essential that distinct bound logicalform variables be represented as distinct constants in the terms encoding the logical forms.","{'title': '6 Extensions', 'number': '6'}"
This is an instance of the problem of coherence discussed in the previous section.,"{'title': '6 Extensions', 'number': '6'}"
"The rules outlined here are less efficient than necessary because the distribution of store elements among the subject and complements of a verb does not check whether the variable bound by a store element actually appears in the semantics of the phrase to which it is being assigned, leading to many dead ends in the generation process.","{'title': '6 Extensions', 'number': '6'}"
"Also, the rules are sound for generation but not for analysis, because they do not enforce the constraint that every occurrence of a variable in logical form be outscoped by the variable's binder.","{'title': '6 Extensions', 'number': '6'}"
"Adding appropriate side conditions to the rules, following the constraints discussed by Hobbs and Shieber (Hobbs and Shieber, 1987) would not be difficult.","{'title': '6 Extensions', 'number': '6'}"
"As it stands, the generation algorithm chooses particular lexical forms on-line.","{'title': '6 Extensions', 'number': '6'}"
This approach can lead to a certain amount of unnecessary nondeterminism.,"{'title': '6 Extensions', 'number': '6'}"
"For instance, the choice of verb form might depend on syntactic features of the verb's subject available only after the subject has been generated.","{'title': '6 Extensions', 'number': '6'}"
This nondeterminism can be eliminated by deferring lexical choice to a postprocess.,"{'title': '6 Extensions', 'number': '6'}"
The generator will yield a list of lexical items instead of a list of words.,"{'title': '6 Extensions', 'number': '6'}"
To this list a small phonological front end is applied.,"{'title': '6 Extensions', 'number': '6'}"
BUG uses such a mechanism to eliminate much of the uninteresting nondeterminism in choice of word forms.,"{'title': '6 Extensions', 'number': '6'}"
"Of course, the same mechanism could be added to any of the other generation techniques discussed to in this paper.","{'title': '6 Extensions', 'number': '6'}"
Further enhancements to the algorithm are envisioned.,"{'title': '7 Further Research', 'number': '7'}"
"First, any system making use of a tabular link predicate over complex nonterminals (like the chained_nodes predicate used by the generation algorithm and including the link predicate used in the BUP parser (Matsumoto et al., 1983)) is subject to a problem of spurious redundancy in processing if the elements in the link table are not mutually exclusive.","{'title': '7 Further Research', 'number': '7'}"
"For instance, a single chain rule might be considered to be applicable twice because of the nondeterminism of the call to chained_nodes.","{'title': '7 Further Research', 'number': '7'}"
"This general problem has to date received little attention, and no satisfactory solution is found in the logic grammar literature.","{'title': '7 Further Research', 'number': '7'}"
"More generally, the backtracking regimen of our implementation of the algorithm may lead to recomputation of results.","{'title': '7 Further Research', 'number': '7'}"
"Again, this is a general property of backtrack methods and is not particular to our application.","{'title': '7 Further Research', 'number': '7'}"
"The use of dynamic programming techniques, as in chart parsing, would be an appropriate augmentation to the implementation of the algorithm.","{'title': '7 Further Research', 'number': '7'}"
"Happily, such an augmentation would serve to eliminate the redundancy caused by the linking relation as well.","{'title': '7 Further Research', 'number': '7'}"
"Finally, in order to incorporate a general facility for auxiliary conditions in rules, some sort of delayed evaluation triggered by appropriate instantiation (e.g., wait declarations (Naish, 1986)) would be desirable.","{'title': '7 Further Research', 'number': '7'}"
"None of these changes, however, constitutes restructuring of the algorithm; rather they modify its realization in significant and important ways.","{'title': '7 Further Research', 'number': '7'}"
"Shieber, Moore, and Pereira were supported in this work by a contract with the Nippon Telephone and Telegraph Corp. and by a gift from the Systems Development Foundation as part of a coordinated research effort with the Center for the Study of Language and Information, Stanford University; van Noord was supported by the European Community and the Nederlands Bureau voor Bib liotheekwezen en Informatieverzorgin through the Eurotra project.","{'title': 'Acknowledgments', 'number': '8'}"
We would like to thank Mary Dalrymple and Louis des Tombe for their helpful discussions regarding this work.,"{'title': 'Acknowledgments', 'number': '8'}"
